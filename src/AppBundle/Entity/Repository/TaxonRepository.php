<?php

namespace AppBundle\Entity\Repository;

use AppBundle\Entity\Collection;
use Doctrine\ORM\AbstractQuery;

/**
 * TaxonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaxonRepository extends RecolnatRepositoryAbstract
{
    /**
     * @param Collection $collection
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderFindByCollection(Collection $collection)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('t')
            ->from('AppBundle\Entity\Taxon', 't')
            ->join('t.determination', 'd')
            ->join('d.specimen', 's')
            ->andWhere('s.collection = :collection')
            ->setParameter('collection', $collection);
    }

    /**
     *
     * @param array $ids
     * @return array
     */
    public function findById($ids)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('t')
            ->from('AppBundle\Entity\Taxon', 't', 't.taxonid')
            ->andWhere($qb->expr()->in('t.taxonid', $ids));
        $qb->setParameter('ids', $ids, 'rawid');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param array $id
     * @param int   $fetchMode
     * @return array|object|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneById($id, $fetchMode = AbstractQuery::HYDRATE_OBJECT)
    {
        return $this->getQueryFindOneById($id)->getOneOrNullResult($fetchMode);
    }

    /**
     * @param $id
     * @return array|null
     */
    public function findOneByIdToArray($id)
    {
        return $this->findOneById($id, AbstractQuery::HYDRATE_ARRAY);
    }

    /**
     * @param array  $id
     * @param string $field
     * @return object|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneFieldById($id, $field)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('t.'.$field)
            ->from('AppBundle\Entity\Taxon', 't')
            ->where('t.taxonid = :id')
            ->setParameter('id', $id, 'rawid');
        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param $id
     * @return \Doctrine\ORM\Query
     */
    private function getQueryFindOneById($id)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('t')
            ->from('AppBundle\Entity\Taxon', 't', 't.taxonid')
            ->where('t.taxonid = :id')
            ->setParameter('id', $id, 'rawid')
            ->getQuery();
    }

    /**
     *
     * @param array $specimenCodes
     * @return \Doctrine\Common\Collections\Collection
     */
    public function findBySpecimenCodeUnordered($specimenCodes)
    {
        $qb = $this->createQueryBuilder('t');

        $qb
            ->select('t')
            ->innerJoin('t.determination', 'd')
            ->join('d.specimen', 's');
        $this->setSpecimenCodesWhereClause($qb, $specimenCodes);
        return $qb->getQuery()->getResult();
    }

    /**
     *
     * @param array $specimenCodes
     * @return array
     */
    public function findBySpecimenCodes($specimenCodes)
    {
        $qb = $this->createQueryBuilder('t');

        $qb
            ->select('t')
            ->addSelect($this->getExprConcatSpecimenCode().' as specimencode')
            ->innerJoin('t.determination', 'd')
            ->join('d.specimen', 's');
        $this->setSpecimenCodesWhereClause($qb, $specimenCodes);
        return $this->orderResultSetBySpecimenCode($qb->getQuery()->getResult(), 'taxonid');
    }

    /**
     * @param $occurrenceId
     * @return object|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findBestTaxon($occurrenceId)
    {
        $qb = $this->createQueryBuilder('t');
        $qb
            ->select('t')
            ->innerJoin('t.determination', 'd')
            ->where('d.specimen = :occurrenceid')
            ->setParameter('occurrenceid', $occurrenceId)
            ->setMaxResults(1)
            ->orderBy('d.identificationverifstatus', 'DESC');
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $specimenCode
     * @return object|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findBestTaxonsBySpecimenCode($specimenCode)
    {
        $qb = $this->createQueryBuilder('t');
        $qb
            ->select('t')
            ->innerJoin('t.determination', 'd')
            ->join('d.specimen', 's')
            ->setMaxResults(1)
            ->orderBy('d.identificationverifstatus', 'DESC');
        $this->setSpecimenCodesWhereClause($qb, [$specimenCode]);
        return $qb->getQuery()->getOneOrNullResult();
    }
}
