// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package recolnat_diff.converter_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.ConversionString;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: converter Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.1.0.20151029_1337
 * @status 
 */
public class converter implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (global_filepath != null) {

				this.setProperty("global_filepath", global_filepath.toString());

			}

			if (recolnat_AdditionalParams != null) {

				this.setProperty("recolnat_AdditionalParams",
						recolnat_AdditionalParams.toString());

			}

			if (recolnat_Login != null) {

				this.setProperty("recolnat_Login", recolnat_Login.toString());

			}

			if (recolnat_Password != null) {

				this.setProperty("recolnat_Password",
						recolnat_Password.toString());

			}

			if (recolnat_Port != null) {

				this.setProperty("recolnat_Port", recolnat_Port.toString());

			}

			if (recolnat_Schema != null) {

				this.setProperty("recolnat_Schema", recolnat_Schema.toString());

			}

			if (recolnat_Server != null) {

				this.setProperty("recolnat_Server", recolnat_Server.toString());

			}

			if (recolnat_Sid != null) {

				this.setProperty("recolnat_Sid", recolnat_Sid.toString());

			}

			if (diffs != null) {

				this.setProperty("diffs", diffs.toString());

			}

			if (choices != null) {

				this.setProperty("choices", choices.toString());

			}

			if (exportpath != null) {

				this.setProperty("exportpath", exportpath.toString());

			}

		}

		public String global_filepath;

		public String getGlobal_filepath() {
			return this.global_filepath;
		}

		public String recolnat_AdditionalParams;

		public String getRecolnat_AdditionalParams() {
			return this.recolnat_AdditionalParams;
		}

		public String recolnat_Login;

		public String getRecolnat_Login() {
			return this.recolnat_Login;
		}

		public java.lang.String recolnat_Password;

		public java.lang.String getRecolnat_Password() {
			return this.recolnat_Password;
		}

		public String recolnat_Port;

		public String getRecolnat_Port() {
			return this.recolnat_Port;
		}

		public String recolnat_Schema;

		public String getRecolnat_Schema() {
			return this.recolnat_Schema;
		}

		public String recolnat_Server;

		public String getRecolnat_Server() {
			return this.recolnat_Server;
		}

		public String recolnat_Sid;

		public String getRecolnat_Sid() {
			return this.recolnat_Sid;
		}

		public String diffs;

		public String getDiffs() {
			return this.diffs;
		}

		public String choices;

		public String getChoices() {
			return this.choices;
		}

		public String exportpath;

		public String getExportpath() {
			return this.exportpath;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "converter";
	private final String projectName = "RECOLNAT_DIFF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					converter.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(converter.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_deter_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_specimen_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_taxon_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_biblio_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_strati_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_recolte_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_localisation_choices_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_6_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_6_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_7_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_7_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class specimen_to_csvStruct implements
			routines.system.IPersistableRow<specimen_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String CATALOGNUMBER;

		public String getCATALOGNUMBER() {
			return this.CATALOGNUMBER;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String BASISOFRECORD;

		public String getBASISOFRECORD() {
			return this.BASISOFRECORD;
		}

		public String OCCURRENCEREMARKS;

		public String getOCCURRENCEREMARKS() {
			return this.OCCURRENCEREMARKS;
		}

		public String RECORDNUMBER;

		public String getRECORDNUMBER() {
			return this.RECORDNUMBER;
		}

		public String SEX;

		public String getSEX() {
			return this.SEX;
		}

		public String LIFESTAGE;

		public String getLIFESTAGE() {
			return this.LIFESTAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String OWNERINSTITUTIONCODE;

		public String getOWNERINSTITUTIONCODE() {
			return this.OWNERINSTITUTIONCODE;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String COLLECTIONCODE;

		public String getCOLLECTIONCODE() {
			return this.COLLECTIONCODE;
		}

		public BigDecimal COLLECTIONID;

		public BigDecimal getCOLLECTIONID() {
			return this.COLLECTIONID;
		}

		public String INSTITUTIONCODE;

		public String getINSTITUTIONCODE() {
			return this.INSTITUTIONCODE;
		}

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String ASSOCIATEDMEDIA;

		public String getASSOCIATEDMEDIA() {
			return this.ASSOCIATEDMEDIA;
		}

		public String ASSOCIATEDREFERENCES;

		public String getASSOCIATEDREFERENCES() {
			return this.ASSOCIATEDREFERENCES;
		}

		public String ASSOCIATEDTAXA;

		public String getASSOCIATEDTAXA() {
			return this.ASSOCIATEDTAXA;
		}

		public BigDecimal HASMEDIA;

		public BigDecimal getHASMEDIA() {
			return this.HASMEDIA;
		}

		public BigDecimal HASCOORDINATES;

		public BigDecimal getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String DWCAID;

		public String getDWCAID() {
			return this.DWCAID;
		}

		public String DISPOSITION;

		public String getDISPOSITION() {
			return this.DISPOSITION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OCCURRENCEID == null) ? 0 : this.OCCURRENCEID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final specimen_to_csvStruct other = (specimen_to_csvStruct) obj;

			if (this.OCCURRENCEID == null) {
				if (other.OCCURRENCEID != null)
					return false;

			} else if (!this.OCCURRENCEID.equals(other.OCCURRENCEID))

				return false;

			return true;
		}

		public void copyDataTo(specimen_to_csvStruct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;
			other.CATALOGNUMBER = this.CATALOGNUMBER;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.BASISOFRECORD = this.BASISOFRECORD;
			other.OCCURRENCEREMARKS = this.OCCURRENCEREMARKS;
			other.RECORDNUMBER = this.RECORDNUMBER;
			other.SEX = this.SEX;
			other.LIFESTAGE = this.LIFESTAGE;
			other.RIGHTS = this.RIGHTS;
			other.RIGHTSHOLDER = this.RIGHTSHOLDER;
			other.OWNERINSTITUTIONCODE = this.OWNERINSTITUTIONCODE;
			other.ACCESSRIGHTS = this.ACCESSRIGHTS;
			other.BIBLIOGRAPHICCITATION = this.BIBLIOGRAPHICCITATION;
			other.COLLECTIONCODE = this.COLLECTIONCODE;
			other.COLLECTIONID = this.COLLECTIONID;
			other.INSTITUTIONCODE = this.INSTITUTIONCODE;
			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EVENTID = this.EVENTID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.ASSOCIATEDMEDIA = this.ASSOCIATEDMEDIA;
			other.ASSOCIATEDREFERENCES = this.ASSOCIATEDREFERENCES;
			other.ASSOCIATEDTAXA = this.ASSOCIATEDTAXA;
			other.HASMEDIA = this.HASMEDIA;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.DWCAID = this.DWCAID;
			other.DISPOSITION = this.DISPOSITION;

		}

		public void copyKeysDataTo(specimen_to_csvStruct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.OCCURRENCEID = readString(dis);

					this.CATALOGNUMBER = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.BASISOFRECORD = readString(dis);

					this.OCCURRENCEREMARKS = readString(dis);

					this.RECORDNUMBER = readString(dis);

					this.SEX = readString(dis);

					this.LIFESTAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.OWNERINSTITUTIONCODE = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.COLLECTIONCODE = readString(dis);

					this.COLLECTIONID = (BigDecimal) dis.readObject();

					this.INSTITUTIONCODE = readString(dis);

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EVENTID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.ASSOCIATEDMEDIA = readString(dis);

					this.ASSOCIATEDREFERENCES = readString(dis);

					this.ASSOCIATEDTAXA = readString(dis);

					this.HASMEDIA = (BigDecimal) dis.readObject();

					this.HASCOORDINATES = (BigDecimal) dis.readObject();

					this.DWCAID = readString(dis);

					this.DISPOSITION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.CATALOGNUMBER, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.BASISOFRECORD, dos);

				// String

				writeString(this.OCCURRENCEREMARKS, dos);

				// String

				writeString(this.RECORDNUMBER, dos);

				// String

				writeString(this.SEX, dos);

				// String

				writeString(this.LIFESTAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.OWNERINSTITUTIONCODE, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.COLLECTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.COLLECTIONID);

				// String

				writeString(this.INSTITUTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.ASSOCIATEDMEDIA, dos);

				// String

				writeString(this.ASSOCIATEDREFERENCES, dos);

				// String

				writeString(this.ASSOCIATEDTAXA, dos);

				// BigDecimal

				dos.writeObject(this.HASMEDIA);

				// BigDecimal

				dos.writeObject(this.HASCOORDINATES);

				// String

				writeString(this.DWCAID, dos);

				// String

				writeString(this.DISPOSITION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",CATALOGNUMBER=" + CATALOGNUMBER);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",BASISOFRECORD=" + BASISOFRECORD);
			sb.append(",OCCURRENCEREMARKS=" + OCCURRENCEREMARKS);
			sb.append(",RECORDNUMBER=" + RECORDNUMBER);
			sb.append(",SEX=" + SEX);
			sb.append(",LIFESTAGE=" + LIFESTAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",OWNERINSTITUTIONCODE=" + OWNERINSTITUTIONCODE);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",COLLECTIONCODE=" + COLLECTIONCODE);
			sb.append(",COLLECTIONID=" + String.valueOf(COLLECTIONID));
			sb.append(",INSTITUTIONCODE=" + INSTITUTIONCODE);
			sb.append(",GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EVENTID=" + EVENTID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",ASSOCIATEDMEDIA=" + ASSOCIATEDMEDIA);
			sb.append(",ASSOCIATEDREFERENCES=" + ASSOCIATEDREFERENCES);
			sb.append(",ASSOCIATEDTAXA=" + ASSOCIATEDTAXA);
			sb.append(",HASMEDIA=" + String.valueOf(HASMEDIA));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",DWCAID=" + DWCAID);
			sb.append(",DISPOSITION=" + DISPOSITION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(specimen_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OCCURRENCEID,
					other.OCCURRENCEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class specimensStruct implements
			routines.system.IPersistableRow<specimensStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String CATALOGNUMBER;

		public String getCATALOGNUMBER() {
			return this.CATALOGNUMBER;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String BASISOFRECORD;

		public String getBASISOFRECORD() {
			return this.BASISOFRECORD;
		}

		public String OCCURRENCEREMARKS;

		public String getOCCURRENCEREMARKS() {
			return this.OCCURRENCEREMARKS;
		}

		public String RECORDNUMBER;

		public String getRECORDNUMBER() {
			return this.RECORDNUMBER;
		}

		public String SEX;

		public String getSEX() {
			return this.SEX;
		}

		public String LIFESTAGE;

		public String getLIFESTAGE() {
			return this.LIFESTAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String OWNERINSTITUTIONCODE;

		public String getOWNERINSTITUTIONCODE() {
			return this.OWNERINSTITUTIONCODE;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String COLLECTIONCODE;

		public String getCOLLECTIONCODE() {
			return this.COLLECTIONCODE;
		}

		public BigDecimal COLLECTIONID;

		public BigDecimal getCOLLECTIONID() {
			return this.COLLECTIONID;
		}

		public String INSTITUTIONCODE;

		public String getINSTITUTIONCODE() {
			return this.INSTITUTIONCODE;
		}

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String ASSOCIATEDMEDIA;

		public String getASSOCIATEDMEDIA() {
			return this.ASSOCIATEDMEDIA;
		}

		public String ASSOCIATEDREFERENCES;

		public String getASSOCIATEDREFERENCES() {
			return this.ASSOCIATEDREFERENCES;
		}

		public String ASSOCIATEDTAXA;

		public String getASSOCIATEDTAXA() {
			return this.ASSOCIATEDTAXA;
		}

		public BigDecimal HASMEDIA;

		public BigDecimal getHASMEDIA() {
			return this.HASMEDIA;
		}

		public BigDecimal HASCOORDINATES;

		public BigDecimal getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String DWCAID;

		public String getDWCAID() {
			return this.DWCAID;
		}

		public String DISPOSITION;

		public String getDISPOSITION() {
			return this.DISPOSITION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OCCURRENCEID == null) ? 0 : this.OCCURRENCEID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final specimensStruct other = (specimensStruct) obj;

			if (this.OCCURRENCEID == null) {
				if (other.OCCURRENCEID != null)
					return false;

			} else if (!this.OCCURRENCEID.equals(other.OCCURRENCEID))

				return false;

			return true;
		}

		public void copyDataTo(specimensStruct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;
			other.CATALOGNUMBER = this.CATALOGNUMBER;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.BASISOFRECORD = this.BASISOFRECORD;
			other.OCCURRENCEREMARKS = this.OCCURRENCEREMARKS;
			other.RECORDNUMBER = this.RECORDNUMBER;
			other.SEX = this.SEX;
			other.LIFESTAGE = this.LIFESTAGE;
			other.RIGHTS = this.RIGHTS;
			other.RIGHTSHOLDER = this.RIGHTSHOLDER;
			other.OWNERINSTITUTIONCODE = this.OWNERINSTITUTIONCODE;
			other.ACCESSRIGHTS = this.ACCESSRIGHTS;
			other.BIBLIOGRAPHICCITATION = this.BIBLIOGRAPHICCITATION;
			other.COLLECTIONCODE = this.COLLECTIONCODE;
			other.COLLECTIONID = this.COLLECTIONID;
			other.INSTITUTIONCODE = this.INSTITUTIONCODE;
			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EVENTID = this.EVENTID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.ASSOCIATEDMEDIA = this.ASSOCIATEDMEDIA;
			other.ASSOCIATEDREFERENCES = this.ASSOCIATEDREFERENCES;
			other.ASSOCIATEDTAXA = this.ASSOCIATEDTAXA;
			other.HASMEDIA = this.HASMEDIA;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.DWCAID = this.DWCAID;
			other.DISPOSITION = this.DISPOSITION;

		}

		public void copyKeysDataTo(specimensStruct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.OCCURRENCEID = readString(dis);

					this.CATALOGNUMBER = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.BASISOFRECORD = readString(dis);

					this.OCCURRENCEREMARKS = readString(dis);

					this.RECORDNUMBER = readString(dis);

					this.SEX = readString(dis);

					this.LIFESTAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.OWNERINSTITUTIONCODE = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.COLLECTIONCODE = readString(dis);

					this.COLLECTIONID = (BigDecimal) dis.readObject();

					this.INSTITUTIONCODE = readString(dis);

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EVENTID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.ASSOCIATEDMEDIA = readString(dis);

					this.ASSOCIATEDREFERENCES = readString(dis);

					this.ASSOCIATEDTAXA = readString(dis);

					this.HASMEDIA = (BigDecimal) dis.readObject();

					this.HASCOORDINATES = (BigDecimal) dis.readObject();

					this.DWCAID = readString(dis);

					this.DISPOSITION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.CATALOGNUMBER, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.BASISOFRECORD, dos);

				// String

				writeString(this.OCCURRENCEREMARKS, dos);

				// String

				writeString(this.RECORDNUMBER, dos);

				// String

				writeString(this.SEX, dos);

				// String

				writeString(this.LIFESTAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.OWNERINSTITUTIONCODE, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.COLLECTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.COLLECTIONID);

				// String

				writeString(this.INSTITUTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.ASSOCIATEDMEDIA, dos);

				// String

				writeString(this.ASSOCIATEDREFERENCES, dos);

				// String

				writeString(this.ASSOCIATEDTAXA, dos);

				// BigDecimal

				dos.writeObject(this.HASMEDIA);

				// BigDecimal

				dos.writeObject(this.HASCOORDINATES);

				// String

				writeString(this.DWCAID, dos);

				// String

				writeString(this.DISPOSITION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",CATALOGNUMBER=" + CATALOGNUMBER);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",BASISOFRECORD=" + BASISOFRECORD);
			sb.append(",OCCURRENCEREMARKS=" + OCCURRENCEREMARKS);
			sb.append(",RECORDNUMBER=" + RECORDNUMBER);
			sb.append(",SEX=" + SEX);
			sb.append(",LIFESTAGE=" + LIFESTAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",OWNERINSTITUTIONCODE=" + OWNERINSTITUTIONCODE);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",COLLECTIONCODE=" + COLLECTIONCODE);
			sb.append(",COLLECTIONID=" + String.valueOf(COLLECTIONID));
			sb.append(",INSTITUTIONCODE=" + INSTITUTIONCODE);
			sb.append(",GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EVENTID=" + EVENTID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",ASSOCIATEDMEDIA=" + ASSOCIATEDMEDIA);
			sb.append(",ASSOCIATEDREFERENCES=" + ASSOCIATEDREFERENCES);
			sb.append(",ASSOCIATEDTAXA=" + ASSOCIATEDTAXA);
			sb.append(",HASMEDIA=" + String.valueOf(HASMEDIA));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",DWCAID=" + DWCAID);
			sb.append(",DISPOSITION=" + DISPOSITION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(specimensStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OCCURRENCEID,
					other.OCCURRENCEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String CATALOGNUMBER;

		public String getCATALOGNUMBER() {
			return this.CATALOGNUMBER;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String BASISOFRECORD;

		public String getBASISOFRECORD() {
			return this.BASISOFRECORD;
		}

		public String OCCURRENCEREMARKS;

		public String getOCCURRENCEREMARKS() {
			return this.OCCURRENCEREMARKS;
		}

		public String RECORDNUMBER;

		public String getRECORDNUMBER() {
			return this.RECORDNUMBER;
		}

		public String SEX;

		public String getSEX() {
			return this.SEX;
		}

		public String LIFESTAGE;

		public String getLIFESTAGE() {
			return this.LIFESTAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String OWNERINSTITUTIONCODE;

		public String getOWNERINSTITUTIONCODE() {
			return this.OWNERINSTITUTIONCODE;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String COLLECTIONCODE;

		public String getCOLLECTIONCODE() {
			return this.COLLECTIONCODE;
		}

		public BigDecimal COLLECTIONID;

		public BigDecimal getCOLLECTIONID() {
			return this.COLLECTIONID;
		}

		public String INSTITUTIONCODE;

		public String getINSTITUTIONCODE() {
			return this.INSTITUTIONCODE;
		}

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String ASSOCIATEDMEDIA;

		public String getASSOCIATEDMEDIA() {
			return this.ASSOCIATEDMEDIA;
		}

		public String ASSOCIATEDREFERENCES;

		public String getASSOCIATEDREFERENCES() {
			return this.ASSOCIATEDREFERENCES;
		}

		public String ASSOCIATEDTAXA;

		public String getASSOCIATEDTAXA() {
			return this.ASSOCIATEDTAXA;
		}

		public BigDecimal HASMEDIA;

		public BigDecimal getHASMEDIA() {
			return this.HASMEDIA;
		}

		public BigDecimal HASCOORDINATES;

		public BigDecimal getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String DWCAID;

		public String getDWCAID() {
			return this.DWCAID;
		}

		public String DISPOSITION;

		public String getDISPOSITION() {
			return this.DISPOSITION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OCCURRENCEID == null) ? 0 : this.OCCURRENCEID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;

			if (this.OCCURRENCEID == null) {
				if (other.OCCURRENCEID != null)
					return false;

			} else if (!this.OCCURRENCEID.equals(other.OCCURRENCEID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

			other.OCCURRENCEID = this.OCCURRENCEID;
			other.CATALOGNUMBER = this.CATALOGNUMBER;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.BASISOFRECORD = this.BASISOFRECORD;
			other.OCCURRENCEREMARKS = this.OCCURRENCEREMARKS;
			other.RECORDNUMBER = this.RECORDNUMBER;
			other.SEX = this.SEX;
			other.LIFESTAGE = this.LIFESTAGE;
			other.RIGHTS = this.RIGHTS;
			other.RIGHTSHOLDER = this.RIGHTSHOLDER;
			other.OWNERINSTITUTIONCODE = this.OWNERINSTITUTIONCODE;
			other.ACCESSRIGHTS = this.ACCESSRIGHTS;
			other.BIBLIOGRAPHICCITATION = this.BIBLIOGRAPHICCITATION;
			other.COLLECTIONCODE = this.COLLECTIONCODE;
			other.COLLECTIONID = this.COLLECTIONID;
			other.INSTITUTIONCODE = this.INSTITUTIONCODE;
			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EVENTID = this.EVENTID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.ASSOCIATEDMEDIA = this.ASSOCIATEDMEDIA;
			other.ASSOCIATEDREFERENCES = this.ASSOCIATEDREFERENCES;
			other.ASSOCIATEDTAXA = this.ASSOCIATEDTAXA;
			other.HASMEDIA = this.HASMEDIA;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.DWCAID = this.DWCAID;
			other.DISPOSITION = this.DISPOSITION;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

			other.OCCURRENCEID = this.OCCURRENCEID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.OCCURRENCEID = readString(dis);

					this.CATALOGNUMBER = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.BASISOFRECORD = readString(dis);

					this.OCCURRENCEREMARKS = readString(dis);

					this.RECORDNUMBER = readString(dis);

					this.SEX = readString(dis);

					this.LIFESTAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.OWNERINSTITUTIONCODE = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.COLLECTIONCODE = readString(dis);

					this.COLLECTIONID = (BigDecimal) dis.readObject();

					this.INSTITUTIONCODE = readString(dis);

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EVENTID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.ASSOCIATEDMEDIA = readString(dis);

					this.ASSOCIATEDREFERENCES = readString(dis);

					this.ASSOCIATEDTAXA = readString(dis);

					this.HASMEDIA = (BigDecimal) dis.readObject();

					this.HASCOORDINATES = (BigDecimal) dis.readObject();

					this.DWCAID = readString(dis);

					this.DISPOSITION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.CATALOGNUMBER, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.BASISOFRECORD, dos);

				// String

				writeString(this.OCCURRENCEREMARKS, dos);

				// String

				writeString(this.RECORDNUMBER, dos);

				// String

				writeString(this.SEX, dos);

				// String

				writeString(this.LIFESTAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.OWNERINSTITUTIONCODE, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.COLLECTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.COLLECTIONID);

				// String

				writeString(this.INSTITUTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.ASSOCIATEDMEDIA, dos);

				// String

				writeString(this.ASSOCIATEDREFERENCES, dos);

				// String

				writeString(this.ASSOCIATEDTAXA, dos);

				// BigDecimal

				dos.writeObject(this.HASMEDIA);

				// BigDecimal

				dos.writeObject(this.HASCOORDINATES);

				// String

				writeString(this.DWCAID, dos);

				// String

				writeString(this.DISPOSITION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",CATALOGNUMBER=" + CATALOGNUMBER);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",BASISOFRECORD=" + BASISOFRECORD);
			sb.append(",OCCURRENCEREMARKS=" + OCCURRENCEREMARKS);
			sb.append(",RECORDNUMBER=" + RECORDNUMBER);
			sb.append(",SEX=" + SEX);
			sb.append(",LIFESTAGE=" + LIFESTAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",OWNERINSTITUTIONCODE=" + OWNERINSTITUTIONCODE);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",COLLECTIONCODE=" + COLLECTIONCODE);
			sb.append(",COLLECTIONID=" + String.valueOf(COLLECTIONID));
			sb.append(",INSTITUTIONCODE=" + INSTITUTIONCODE);
			sb.append(",GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EVENTID=" + EVENTID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",ASSOCIATEDMEDIA=" + ASSOCIATEDMEDIA);
			sb.append(",ASSOCIATEDREFERENCES=" + ASSOCIATEDREFERENCES);
			sb.append(",ASSOCIATEDTAXA=" + ASSOCIATEDTAXA);
			sb.append(",HASMEDIA=" + String.valueOf(HASMEDIA));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",DWCAID=" + DWCAID);
			sb.append(",DISPOSITION=" + DISPOSITION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OCCURRENCEID,
					other.OCCURRENCEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String CATALOGNUMBER;

		public String getCATALOGNUMBER() {
			return this.CATALOGNUMBER;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String BASISOFRECORD;

		public String getBASISOFRECORD() {
			return this.BASISOFRECORD;
		}

		public String OCCURRENCEREMARKS;

		public String getOCCURRENCEREMARKS() {
			return this.OCCURRENCEREMARKS;
		}

		public String RECORDNUMBER;

		public String getRECORDNUMBER() {
			return this.RECORDNUMBER;
		}

		public String SEX;

		public String getSEX() {
			return this.SEX;
		}

		public String LIFESTAGE;

		public String getLIFESTAGE() {
			return this.LIFESTAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String OWNERINSTITUTIONCODE;

		public String getOWNERINSTITUTIONCODE() {
			return this.OWNERINSTITUTIONCODE;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String COLLECTIONCODE;

		public String getCOLLECTIONCODE() {
			return this.COLLECTIONCODE;
		}

		public BigDecimal COLLECTIONID;

		public BigDecimal getCOLLECTIONID() {
			return this.COLLECTIONID;
		}

		public String INSTITUTIONCODE;

		public String getINSTITUTIONCODE() {
			return this.INSTITUTIONCODE;
		}

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String ASSOCIATEDMEDIA;

		public String getASSOCIATEDMEDIA() {
			return this.ASSOCIATEDMEDIA;
		}

		public String ASSOCIATEDREFERENCES;

		public String getASSOCIATEDREFERENCES() {
			return this.ASSOCIATEDREFERENCES;
		}

		public String ASSOCIATEDTAXA;

		public String getASSOCIATEDTAXA() {
			return this.ASSOCIATEDTAXA;
		}

		public BigDecimal HASMEDIA;

		public BigDecimal getHASMEDIA() {
			return this.HASMEDIA;
		}

		public BigDecimal HASCOORDINATES;

		public BigDecimal getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String DWCAID;

		public String getDWCAID() {
			return this.DWCAID;
		}

		public String DISPOSITION;

		public String getDISPOSITION() {
			return this.DISPOSITION;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OCCURRENCEID == null) ? 0 : this.OCCURRENCEID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.OCCURRENCEID == null) {
				if (other.OCCURRENCEID != null)
					return false;

			} else if (!this.OCCURRENCEID.equals(other.OCCURRENCEID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;
			other.CATALOGNUMBER = this.CATALOGNUMBER;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.BASISOFRECORD = this.BASISOFRECORD;
			other.OCCURRENCEREMARKS = this.OCCURRENCEREMARKS;
			other.RECORDNUMBER = this.RECORDNUMBER;
			other.SEX = this.SEX;
			other.LIFESTAGE = this.LIFESTAGE;
			other.RIGHTS = this.RIGHTS;
			other.RIGHTSHOLDER = this.RIGHTSHOLDER;
			other.OWNERINSTITUTIONCODE = this.OWNERINSTITUTIONCODE;
			other.ACCESSRIGHTS = this.ACCESSRIGHTS;
			other.BIBLIOGRAPHICCITATION = this.BIBLIOGRAPHICCITATION;
			other.COLLECTIONCODE = this.COLLECTIONCODE;
			other.COLLECTIONID = this.COLLECTIONID;
			other.INSTITUTIONCODE = this.INSTITUTIONCODE;
			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EVENTID = this.EVENTID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.ASSOCIATEDMEDIA = this.ASSOCIATEDMEDIA;
			other.ASSOCIATEDREFERENCES = this.ASSOCIATEDREFERENCES;
			other.ASSOCIATEDTAXA = this.ASSOCIATEDTAXA;
			other.HASMEDIA = this.HASMEDIA;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.DWCAID = this.DWCAID;
			other.DISPOSITION = this.DISPOSITION;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.OCCURRENCEID = readString(dis);

					this.CATALOGNUMBER = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.BASISOFRECORD = readString(dis);

					this.OCCURRENCEREMARKS = readString(dis);

					this.RECORDNUMBER = readString(dis);

					this.SEX = readString(dis);

					this.LIFESTAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.OWNERINSTITUTIONCODE = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.COLLECTIONCODE = readString(dis);

					this.COLLECTIONID = (BigDecimal) dis.readObject();

					this.INSTITUTIONCODE = readString(dis);

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EVENTID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.ASSOCIATEDMEDIA = readString(dis);

					this.ASSOCIATEDREFERENCES = readString(dis);

					this.ASSOCIATEDTAXA = readString(dis);

					this.HASMEDIA = (BigDecimal) dis.readObject();

					this.HASCOORDINATES = (BigDecimal) dis.readObject();

					this.DWCAID = readString(dis);

					this.DISPOSITION = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.CATALOGNUMBER, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.BASISOFRECORD, dos);

				// String

				writeString(this.OCCURRENCEREMARKS, dos);

				// String

				writeString(this.RECORDNUMBER, dos);

				// String

				writeString(this.SEX, dos);

				// String

				writeString(this.LIFESTAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.OWNERINSTITUTIONCODE, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.COLLECTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.COLLECTIONID);

				// String

				writeString(this.INSTITUTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.ASSOCIATEDMEDIA, dos);

				// String

				writeString(this.ASSOCIATEDREFERENCES, dos);

				// String

				writeString(this.ASSOCIATEDTAXA, dos);

				// BigDecimal

				dos.writeObject(this.HASMEDIA);

				// BigDecimal

				dos.writeObject(this.HASCOORDINATES);

				// String

				writeString(this.DWCAID, dos);

				// String

				writeString(this.DISPOSITION, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",CATALOGNUMBER=" + CATALOGNUMBER);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",BASISOFRECORD=" + BASISOFRECORD);
			sb.append(",OCCURRENCEREMARKS=" + OCCURRENCEREMARKS);
			sb.append(",RECORDNUMBER=" + RECORDNUMBER);
			sb.append(",SEX=" + SEX);
			sb.append(",LIFESTAGE=" + LIFESTAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",OWNERINSTITUTIONCODE=" + OWNERINSTITUTIONCODE);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",COLLECTIONCODE=" + COLLECTIONCODE);
			sb.append(",COLLECTIONID=" + String.valueOf(COLLECTIONID));
			sb.append(",INSTITUTIONCODE=" + INSTITUTIONCODE);
			sb.append(",GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EVENTID=" + EVENTID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",ASSOCIATEDMEDIA=" + ASSOCIATEDMEDIA);
			sb.append(",ASSOCIATEDREFERENCES=" + ASSOCIATEDREFERENCES);
			sb.append(",ASSOCIATEDTAXA=" + ASSOCIATEDTAXA);
			sb.append(",HASMEDIA=" + String.valueOf(HASMEDIA));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",DWCAID=" + DWCAID);
			sb.append(",DISPOSITION=" + DISPOSITION);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OCCURRENCEID,
					other.OCCURRENCEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rows_specimensStruct implements
			routines.system.IPersistableRow<rows_specimensStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String CATALOGNUMBER;

		public String getCATALOGNUMBER() {
			return this.CATALOGNUMBER;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String BASISOFRECORD;

		public String getBASISOFRECORD() {
			return this.BASISOFRECORD;
		}

		public String OCCURRENCEREMARKS;

		public String getOCCURRENCEREMARKS() {
			return this.OCCURRENCEREMARKS;
		}

		public String RECORDNUMBER;

		public String getRECORDNUMBER() {
			return this.RECORDNUMBER;
		}

		public String SEX;

		public String getSEX() {
			return this.SEX;
		}

		public String LIFESTAGE;

		public String getLIFESTAGE() {
			return this.LIFESTAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String OWNERINSTITUTIONCODE;

		public String getOWNERINSTITUTIONCODE() {
			return this.OWNERINSTITUTIONCODE;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String COLLECTIONCODE;

		public String getCOLLECTIONCODE() {
			return this.COLLECTIONCODE;
		}

		public BigDecimal COLLECTIONID;

		public BigDecimal getCOLLECTIONID() {
			return this.COLLECTIONID;
		}

		public String INSTITUTIONCODE;

		public String getINSTITUTIONCODE() {
			return this.INSTITUTIONCODE;
		}

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String ASSOCIATEDMEDIA;

		public String getASSOCIATEDMEDIA() {
			return this.ASSOCIATEDMEDIA;
		}

		public String ASSOCIATEDREFERENCES;

		public String getASSOCIATEDREFERENCES() {
			return this.ASSOCIATEDREFERENCES;
		}

		public String ASSOCIATEDTAXA;

		public String getASSOCIATEDTAXA() {
			return this.ASSOCIATEDTAXA;
		}

		public BigDecimal HASMEDIA;

		public BigDecimal getHASMEDIA() {
			return this.HASMEDIA;
		}

		public BigDecimal HASCOORDINATES;

		public BigDecimal getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String DWCAID;

		public String getDWCAID() {
			return this.DWCAID;
		}

		public String DISPOSITION;

		public String getDISPOSITION() {
			return this.DISPOSITION;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OCCURRENCEID == null) ? 0 : this.OCCURRENCEID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rows_specimensStruct other = (rows_specimensStruct) obj;

			if (this.OCCURRENCEID == null) {
				if (other.OCCURRENCEID != null)
					return false;

			} else if (!this.OCCURRENCEID.equals(other.OCCURRENCEID))

				return false;

			return true;
		}

		public void copyDataTo(rows_specimensStruct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;
			other.CATALOGNUMBER = this.CATALOGNUMBER;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.BASISOFRECORD = this.BASISOFRECORD;
			other.OCCURRENCEREMARKS = this.OCCURRENCEREMARKS;
			other.RECORDNUMBER = this.RECORDNUMBER;
			other.SEX = this.SEX;
			other.LIFESTAGE = this.LIFESTAGE;
			other.RIGHTS = this.RIGHTS;
			other.RIGHTSHOLDER = this.RIGHTSHOLDER;
			other.OWNERINSTITUTIONCODE = this.OWNERINSTITUTIONCODE;
			other.ACCESSRIGHTS = this.ACCESSRIGHTS;
			other.BIBLIOGRAPHICCITATION = this.BIBLIOGRAPHICCITATION;
			other.COLLECTIONCODE = this.COLLECTIONCODE;
			other.COLLECTIONID = this.COLLECTIONID;
			other.INSTITUTIONCODE = this.INSTITUTIONCODE;
			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EVENTID = this.EVENTID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.ASSOCIATEDMEDIA = this.ASSOCIATEDMEDIA;
			other.ASSOCIATEDREFERENCES = this.ASSOCIATEDREFERENCES;
			other.ASSOCIATEDTAXA = this.ASSOCIATEDTAXA;
			other.HASMEDIA = this.HASMEDIA;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.DWCAID = this.DWCAID;
			other.DISPOSITION = this.DISPOSITION;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(rows_specimensStruct other) {

			other.OCCURRENCEID = this.OCCURRENCEID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.OCCURRENCEID = readString(dis);

					this.CATALOGNUMBER = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.BASISOFRECORD = readString(dis);

					this.OCCURRENCEREMARKS = readString(dis);

					this.RECORDNUMBER = readString(dis);

					this.SEX = readString(dis);

					this.LIFESTAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.OWNERINSTITUTIONCODE = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.COLLECTIONCODE = readString(dis);

					this.COLLECTIONID = (BigDecimal) dis.readObject();

					this.INSTITUTIONCODE = readString(dis);

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EVENTID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.ASSOCIATEDMEDIA = readString(dis);

					this.ASSOCIATEDREFERENCES = readString(dis);

					this.ASSOCIATEDTAXA = readString(dis);

					this.HASMEDIA = (BigDecimal) dis.readObject();

					this.HASCOORDINATES = (BigDecimal) dis.readObject();

					this.DWCAID = readString(dis);

					this.DISPOSITION = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.CATALOGNUMBER, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.BASISOFRECORD, dos);

				// String

				writeString(this.OCCURRENCEREMARKS, dos);

				// String

				writeString(this.RECORDNUMBER, dos);

				// String

				writeString(this.SEX, dos);

				// String

				writeString(this.LIFESTAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.OWNERINSTITUTIONCODE, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.COLLECTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.COLLECTIONID);

				// String

				writeString(this.INSTITUTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.ASSOCIATEDMEDIA, dos);

				// String

				writeString(this.ASSOCIATEDREFERENCES, dos);

				// String

				writeString(this.ASSOCIATEDTAXA, dos);

				// BigDecimal

				dos.writeObject(this.HASMEDIA);

				// BigDecimal

				dos.writeObject(this.HASCOORDINATES);

				// String

				writeString(this.DWCAID, dos);

				// String

				writeString(this.DISPOSITION, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",CATALOGNUMBER=" + CATALOGNUMBER);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",BASISOFRECORD=" + BASISOFRECORD);
			sb.append(",OCCURRENCEREMARKS=" + OCCURRENCEREMARKS);
			sb.append(",RECORDNUMBER=" + RECORDNUMBER);
			sb.append(",SEX=" + SEX);
			sb.append(",LIFESTAGE=" + LIFESTAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",OWNERINSTITUTIONCODE=" + OWNERINSTITUTIONCODE);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",COLLECTIONCODE=" + COLLECTIONCODE);
			sb.append(",COLLECTIONID=" + String.valueOf(COLLECTIONID));
			sb.append(",INSTITUTIONCODE=" + INSTITUTIONCODE);
			sb.append(",GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EVENTID=" + EVENTID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",ASSOCIATEDMEDIA=" + ASSOCIATEDMEDIA);
			sb.append(",ASSOCIATEDREFERENCES=" + ASSOCIATEDREFERENCES);
			sb.append(",ASSOCIATEDTAXA=" + ASSOCIATEDTAXA);
			sb.append(",HASMEDIA=" + String.valueOf(HASMEDIA));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",DWCAID=" + DWCAID);
			sb.append(",DISPOSITION=" + DISPOSITION);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rows_specimensStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OCCURRENCEID,
					other.OCCURRENCEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_specimensStruct implements
			routines.system.IPersistableRow<db_specimensStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String CATALOGNUMBER;

		public String getCATALOGNUMBER() {
			return this.CATALOGNUMBER;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String BASISOFRECORD;

		public String getBASISOFRECORD() {
			return this.BASISOFRECORD;
		}

		public String OCCURRENCEREMARKS;

		public String getOCCURRENCEREMARKS() {
			return this.OCCURRENCEREMARKS;
		}

		public String RECORDNUMBER;

		public String getRECORDNUMBER() {
			return this.RECORDNUMBER;
		}

		public String SEX;

		public String getSEX() {
			return this.SEX;
		}

		public String LIFESTAGE;

		public String getLIFESTAGE() {
			return this.LIFESTAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String OWNERINSTITUTIONCODE;

		public String getOWNERINSTITUTIONCODE() {
			return this.OWNERINSTITUTIONCODE;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String COLLECTIONCODE;

		public String getCOLLECTIONCODE() {
			return this.COLLECTIONCODE;
		}

		public BigDecimal COLLECTIONID;

		public BigDecimal getCOLLECTIONID() {
			return this.COLLECTIONID;
		}

		public String INSTITUTIONCODE;

		public String getINSTITUTIONCODE() {
			return this.INSTITUTIONCODE;
		}

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public byte[] EVENTID;

		public byte[] getEVENTID() {
			return this.EVENTID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String ASSOCIATEDMEDIA;

		public String getASSOCIATEDMEDIA() {
			return this.ASSOCIATEDMEDIA;
		}

		public String ASSOCIATEDREFERENCES;

		public String getASSOCIATEDREFERENCES() {
			return this.ASSOCIATEDREFERENCES;
		}

		public String ASSOCIATEDTAXA;

		public String getASSOCIATEDTAXA() {
			return this.ASSOCIATEDTAXA;
		}

		public BigDecimal HASMEDIA;

		public BigDecimal getHASMEDIA() {
			return this.HASMEDIA;
		}

		public BigDecimal HASCOORDINATES;

		public BigDecimal getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String DWCAID;

		public String getDWCAID() {
			return this.DWCAID;
		}

		public String DISPOSITION;

		public String getDISPOSITION() {
			return this.DISPOSITION;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.OCCURRENCEID = readByteArray(dis);

					this.CATALOGNUMBER = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.BASISOFRECORD = readString(dis);

					this.OCCURRENCEREMARKS = readString(dis);

					this.RECORDNUMBER = readString(dis);

					this.SEX = readString(dis);

					this.LIFESTAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.OWNERINSTITUTIONCODE = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.COLLECTIONCODE = readString(dis);

					this.COLLECTIONID = (BigDecimal) dis.readObject();

					this.INSTITUTIONCODE = readString(dis);

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EVENTID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.ASSOCIATEDMEDIA = readString(dis);

					this.ASSOCIATEDREFERENCES = readString(dis);

					this.ASSOCIATEDTAXA = readString(dis);

					this.HASMEDIA = (BigDecimal) dis.readObject();

					this.HASCOORDINATES = (BigDecimal) dis.readObject();

					this.DWCAID = readString(dis);

					this.DISPOSITION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.CATALOGNUMBER, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.BASISOFRECORD, dos);

				// String

				writeString(this.OCCURRENCEREMARKS, dos);

				// String

				writeString(this.RECORDNUMBER, dos);

				// String

				writeString(this.SEX, dos);

				// String

				writeString(this.LIFESTAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.OWNERINSTITUTIONCODE, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.COLLECTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.COLLECTIONID);

				// String

				writeString(this.INSTITUTIONCODE, dos);

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// byte[]

				writeByteArray(this.EVENTID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.ASSOCIATEDMEDIA, dos);

				// String

				writeString(this.ASSOCIATEDREFERENCES, dos);

				// String

				writeString(this.ASSOCIATEDTAXA, dos);

				// BigDecimal

				dos.writeObject(this.HASMEDIA);

				// BigDecimal

				dos.writeObject(this.HASCOORDINATES);

				// String

				writeString(this.DWCAID, dos);

				// String

				writeString(this.DISPOSITION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",CATALOGNUMBER=" + CATALOGNUMBER);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",BASISOFRECORD=" + BASISOFRECORD);
			sb.append(",OCCURRENCEREMARKS=" + OCCURRENCEREMARKS);
			sb.append(",RECORDNUMBER=" + RECORDNUMBER);
			sb.append(",SEX=" + SEX);
			sb.append(",LIFESTAGE=" + LIFESTAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",OWNERINSTITUTIONCODE=" + OWNERINSTITUTIONCODE);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",COLLECTIONCODE=" + COLLECTIONCODE);
			sb.append(",COLLECTIONID=" + String.valueOf(COLLECTIONID));
			sb.append(",INSTITUTIONCODE=" + INSTITUTIONCODE);
			sb.append(",GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EVENTID=" + String.valueOf(EVENTID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",ASSOCIATEDMEDIA=" + ASSOCIATEDMEDIA);
			sb.append(",ASSOCIATEDREFERENCES=" + ASSOCIATEDREFERENCES);
			sb.append(",ASSOCIATEDTAXA=" + ASSOCIATEDTAXA);
			sb.append(",HASMEDIA=" + String.valueOf(HASMEDIA));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",DWCAID=" + DWCAID);
			sb.append(",DISPOSITION=" + DISPOSITION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_specimensStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class input_specimensStruct implements
			routines.system.IPersistableRow<input_specimensStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String specimensCode;

		public String getSpecimensCode() {
			return this.specimensCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.specimensCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.specimensCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("specimensCode=" + specimensCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(input_specimensStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputJSON_1Struct implements
			routines.system.IPersistableRow<after_tFileInputJSON_1Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String specimensCode;

		public String getSpecimensCode() {
			return this.specimensCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.specimensCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.specimensCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("specimensCode=" + specimensCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputJSON_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				input_specimensStruct input_specimens = new input_specimensStruct();
				db_specimensStruct db_specimens = new db_specimensStruct();
				rows_specimensStruct rows_specimens = new rows_specimensStruct();
				rows_specimensStruct row1 = rows_specimens;
				specimensStruct specimens = new specimensStruct();
				specimen_to_csvStruct specimen_to_csv = new specimen_to_csvStruct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tOracleInput_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JSONUtil_tFileInputJSON_1 {
					public int getData(
							String query,
							javax.script.Invocable invocableEngine,
							java.util.List<org.json.simple.JSONArray> jsonResultList,
							int recordMaxSize) {
						try {
							// only 2 types: String/Boolean
							String resultObj = invocableEngine.invokeFunction(
									"jsonPath", query).toString();
							if (!"false".equals(resultObj)) {
								org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
										.parse(resultObj);
								jsonResultList.add(resultArray);
								if (recordMaxSize != -1
										&& recordMaxSize != resultArray.size()) {
									// just give an error, don't stop

									System.err
											.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
								}
								recordMaxSize = Math.max(recordMaxSize,
										resultArray.size());
							} else {

								System.err
										.println("Can't find any data with JSONPath "
												+ query);
								// add null to take a place in List(buffer)
								jsonResultList.add(null);
							}
						} catch (java.lang.Exception e) {

							e.printStackTrace();
						}
						return recordMaxSize;
					}

					void setRowValue_0(
							input_specimensStruct input_specimens,
							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1,
							int nbResultArray_tFileInputJSON_1)
							throws java.io.UnsupportedEncodingException {
						if (JSONResultList_tFileInputJSON_1.get(0) != null
								&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
										.get(0).size()
								&& JSONResultList_tFileInputJSON_1.get(0).get(
										nbResultArray_tFileInputJSON_1) != null) {
							input_specimens.specimensCode = JSONResultList_tFileInputJSON_1
									.get(0).get(nbResultArray_tFileInputJSON_1)
									.toString();
						} else {

							input_specimens.specimensCode = null;

						}
					}
				}
				int nb_line_tFileInputJSON_1 = 0;
				java.lang.Object jsonText_tFileInputJSON_1 = null;
				JSONUtil_tFileInputJSON_1 jsonUtil_tFileInputJSON_1 = new JSONUtil_tFileInputJSON_1();
				java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1 = new java.util.ArrayList<org.json.simple.JSONArray>();
				int recordMaxSize_tFileInputJSON_1 = -1;

				// init js json engine
				javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_1 = new javax.script.ScriptEngineManager();
				javax.script.ScriptEngine jsEngine_tFileInputJSON_1 = scriptEngineMgr_tFileInputJSON_1
						.getEngineByName("JavaScript");
				if (jsEngine_tFileInputJSON_1 == null) {

					System.err.println("No script engine found for JavaScript");
				} else {
					java.net.URL jsonjsUrl_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
							.getResource("json.js");
					if (jsonjsUrl_tFileInputJSON_1 != null) {
						jsEngine_tFileInputJSON_1
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonjsUrl_tFileInputJSON_1
														.openStream())));
					}

					java.net.URL jsonpathjsUrl_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
							.getResource("jsonpath.js");
					if (jsonpathjsUrl_tFileInputJSON_1 != null) {
						jsEngine_tFileInputJSON_1
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonpathjsUrl_tFileInputJSON_1
														.openStream())));
					}

					java.io.BufferedReader fr_tFileInputJSON_1 = null;
					try {

						fr_tFileInputJSON_1 = new java.io.BufferedReader(
								new java.io.InputStreamReader(
										new java.io.FileInputStream(
												context.diffs), "UTF-8"));

						jsonText_tFileInputJSON_1 = org.json.simple.JSONValue
								.parse(fr_tFileInputJSON_1);
						if (jsonText_tFileInputJSON_1 == null) {
							throw new RuntimeException(
									"fail to parse the json file : "
											+ context.diffs);
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {

						System.err.println(e_tFileInputJSON_1.getMessage());

					} finally {
						if (fr_tFileInputJSON_1 != null) {
							fr_tFileInputJSON_1.close();
						}
					}

					if (jsonText_tFileInputJSON_1 != null) {
						jsEngine_tFileInputJSON_1.eval("var obj="
								+ jsonText_tFileInputJSON_1.toString());

						javax.script.Invocable invocableEngine_tFileInputJSON_1 = (javax.script.Invocable) jsEngine_tFileInputJSON_1;

						recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
								.getData("$.specimensCode[*]",
										invocableEngine_tFileInputJSON_1,
										JSONResultList_tFileInputJSON_1,
										recordMaxSize_tFileInputJSON_1);

					}
				}
				for (int nbResultArray_tFileInputJSON_1 = 0; nbResultArray_tFileInputJSON_1 < recordMaxSize_tFileInputJSON_1; nbResultArray_tFileInputJSON_1++) {

					nb_line_tFileInputJSON_1++;
					input_specimens = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					input_specimens = new input_specimensStruct();
					try {
						jsonUtil_tFileInputJSON_1.setRowValue_0(
								input_specimens,
								JSONResultList_tFileInputJSON_1,
								nbResultArray_tFileInputJSON_1);
					} catch (java.lang.Exception e) {
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e.getMessage());
						input_specimens = null;
					}

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */
					// Start of branch "input_specimens"
					if (input_specimens != null) {

						/**
						 * [tFlowToIterate_1 main ] start
						 */

						currentComponent = "tFlowToIterate_1";

						globalMap.put("specimenCode",
								input_specimens.specimensCode);
						nb_line_tFlowToIterate_1++;
						counter_tFlowToIterate_1++;
						globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
								counter_tFlowToIterate_1);

						tos_count_tFlowToIterate_1++;

						/**
						 * [tFlowToIterate_1 main ] stop
						 */
						NB_ITERATE_tOracleInput_1++;

						/**
						 * [tAggregateRow_1_AGGOUT begin ] start
						 */

						ok_Hash.put("tAggregateRow_1_AGGOUT", false);
						start_Hash.put("tAggregateRow_1_AGGOUT",
								System.currentTimeMillis());

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						int tos_count_tAggregateRow_1_AGGOUT = 0;

						// ------------

						java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

						// ------------
						class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String OCCURRENCEID;
							String CATALOGNUMBER;
							java.util.Date CREATED;
							java.util.Date MODIFIED;
							String BASISOFRECORD;
							String OCCURRENCEREMARKS;
							String RECORDNUMBER;
							String SEX;
							String LIFESTAGE;
							String RIGHTS;
							String RIGHTSHOLDER;
							String OWNERINSTITUTIONCODE;
							String ACCESSRIGHTS;
							String BIBLIOGRAPHICCITATION;
							String COLLECTIONCODE;
							BigDecimal COLLECTIONID;
							String INSTITUTIONCODE;
							BigDecimal GEOLOGICALCONTEXTID;
							String EVENTID;
							String SOURCEFILEID;
							String ASSOCIATEDMEDIA;
							String ASSOCIATEDREFERENCES;
							String ASSOCIATEDTAXA;
							BigDecimal HASMEDIA;
							BigDecimal HASCOORDINATES;
							String DWCAID;
							String DISPOSITION;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.OCCURRENCEID == null) ? 0
													: this.OCCURRENCEID
															.hashCode());

									result = prime
											* result
											+ ((this.CATALOGNUMBER == null) ? 0
													: this.CATALOGNUMBER
															.hashCode());

									result = prime
											* result
											+ ((this.CREATED == null) ? 0
													: this.CREATED.hashCode());

									result = prime
											* result
											+ ((this.MODIFIED == null) ? 0
													: this.MODIFIED.hashCode());

									result = prime
											* result
											+ ((this.BASISOFRECORD == null) ? 0
													: this.BASISOFRECORD
															.hashCode());

									result = prime
											* result
											+ ((this.OCCURRENCEREMARKS == null) ? 0
													: this.OCCURRENCEREMARKS
															.hashCode());

									result = prime
											* result
											+ ((this.RECORDNUMBER == null) ? 0
													: this.RECORDNUMBER
															.hashCode());

									result = prime
											* result
											+ ((this.SEX == null) ? 0
													: this.SEX.hashCode());

									result = prime
											* result
											+ ((this.LIFESTAGE == null) ? 0
													: this.LIFESTAGE.hashCode());

									result = prime
											* result
											+ ((this.RIGHTS == null) ? 0
													: this.RIGHTS.hashCode());

									result = prime
											* result
											+ ((this.RIGHTSHOLDER == null) ? 0
													: this.RIGHTSHOLDER
															.hashCode());

									result = prime
											* result
											+ ((this.OWNERINSTITUTIONCODE == null) ? 0
													: this.OWNERINSTITUTIONCODE
															.hashCode());

									result = prime
											* result
											+ ((this.ACCESSRIGHTS == null) ? 0
													: this.ACCESSRIGHTS
															.hashCode());

									result = prime
											* result
											+ ((this.BIBLIOGRAPHICCITATION == null) ? 0
													: this.BIBLIOGRAPHICCITATION
															.hashCode());

									result = prime
											* result
											+ ((this.COLLECTIONCODE == null) ? 0
													: this.COLLECTIONCODE
															.hashCode());

									result = prime
											* result
											+ ((this.COLLECTIONID == null) ? 0
													: this.COLLECTIONID
															.hashCode());

									result = prime
											* result
											+ ((this.INSTITUTIONCODE == null) ? 0
													: this.INSTITUTIONCODE
															.hashCode());

									result = prime
											* result
											+ ((this.GEOLOGICALCONTEXTID == null) ? 0
													: this.GEOLOGICALCONTEXTID
															.hashCode());

									result = prime
											* result
											+ ((this.EVENTID == null) ? 0
													: this.EVENTID.hashCode());

									result = prime
											* result
											+ ((this.SOURCEFILEID == null) ? 0
													: this.SOURCEFILEID
															.hashCode());

									result = prime
											* result
											+ ((this.ASSOCIATEDMEDIA == null) ? 0
													: this.ASSOCIATEDMEDIA
															.hashCode());

									result = prime
											* result
											+ ((this.ASSOCIATEDREFERENCES == null) ? 0
													: this.ASSOCIATEDREFERENCES
															.hashCode());

									result = prime
											* result
											+ ((this.ASSOCIATEDTAXA == null) ? 0
													: this.ASSOCIATEDTAXA
															.hashCode());

									result = prime
											* result
											+ ((this.HASMEDIA == null) ? 0
													: this.HASMEDIA.hashCode());

									result = prime
											* result
											+ ((this.HASCOORDINATES == null) ? 0
													: this.HASCOORDINATES
															.hashCode());

									result = prime
											* result
											+ ((this.DWCAID == null) ? 0
													: this.DWCAID.hashCode());

									result = prime
											* result
											+ ((this.DISPOSITION == null) ? 0
													: this.DISPOSITION
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

								if (this.OCCURRENCEID == null) {
									if (other.OCCURRENCEID != null)
										return false;
								} else if (!this.OCCURRENCEID
										.equals(other.OCCURRENCEID))
									return false;

								if (this.CATALOGNUMBER == null) {
									if (other.CATALOGNUMBER != null)
										return false;
								} else if (!this.CATALOGNUMBER
										.equals(other.CATALOGNUMBER))
									return false;

								if (this.CREATED == null) {
									if (other.CREATED != null)
										return false;
								} else if (!this.CREATED.equals(other.CREATED))
									return false;

								if (this.MODIFIED == null) {
									if (other.MODIFIED != null)
										return false;
								} else if (!this.MODIFIED
										.equals(other.MODIFIED))
									return false;

								if (this.BASISOFRECORD == null) {
									if (other.BASISOFRECORD != null)
										return false;
								} else if (!this.BASISOFRECORD
										.equals(other.BASISOFRECORD))
									return false;

								if (this.OCCURRENCEREMARKS == null) {
									if (other.OCCURRENCEREMARKS != null)
										return false;
								} else if (!this.OCCURRENCEREMARKS
										.equals(other.OCCURRENCEREMARKS))
									return false;

								if (this.RECORDNUMBER == null) {
									if (other.RECORDNUMBER != null)
										return false;
								} else if (!this.RECORDNUMBER
										.equals(other.RECORDNUMBER))
									return false;

								if (this.SEX == null) {
									if (other.SEX != null)
										return false;
								} else if (!this.SEX.equals(other.SEX))
									return false;

								if (this.LIFESTAGE == null) {
									if (other.LIFESTAGE != null)
										return false;
								} else if (!this.LIFESTAGE
										.equals(other.LIFESTAGE))
									return false;

								if (this.RIGHTS == null) {
									if (other.RIGHTS != null)
										return false;
								} else if (!this.RIGHTS.equals(other.RIGHTS))
									return false;

								if (this.RIGHTSHOLDER == null) {
									if (other.RIGHTSHOLDER != null)
										return false;
								} else if (!this.RIGHTSHOLDER
										.equals(other.RIGHTSHOLDER))
									return false;

								if (this.OWNERINSTITUTIONCODE == null) {
									if (other.OWNERINSTITUTIONCODE != null)
										return false;
								} else if (!this.OWNERINSTITUTIONCODE
										.equals(other.OWNERINSTITUTIONCODE))
									return false;

								if (this.ACCESSRIGHTS == null) {
									if (other.ACCESSRIGHTS != null)
										return false;
								} else if (!this.ACCESSRIGHTS
										.equals(other.ACCESSRIGHTS))
									return false;

								if (this.BIBLIOGRAPHICCITATION == null) {
									if (other.BIBLIOGRAPHICCITATION != null)
										return false;
								} else if (!this.BIBLIOGRAPHICCITATION
										.equals(other.BIBLIOGRAPHICCITATION))
									return false;

								if (this.COLLECTIONCODE == null) {
									if (other.COLLECTIONCODE != null)
										return false;
								} else if (!this.COLLECTIONCODE
										.equals(other.COLLECTIONCODE))
									return false;

								if (this.COLLECTIONID == null) {
									if (other.COLLECTIONID != null)
										return false;
								} else if (!this.COLLECTIONID
										.equals(other.COLLECTIONID))
									return false;

								if (this.INSTITUTIONCODE == null) {
									if (other.INSTITUTIONCODE != null)
										return false;
								} else if (!this.INSTITUTIONCODE
										.equals(other.INSTITUTIONCODE))
									return false;

								if (this.GEOLOGICALCONTEXTID == null) {
									if (other.GEOLOGICALCONTEXTID != null)
										return false;
								} else if (!this.GEOLOGICALCONTEXTID
										.equals(other.GEOLOGICALCONTEXTID))
									return false;

								if (this.EVENTID == null) {
									if (other.EVENTID != null)
										return false;
								} else if (!this.EVENTID.equals(other.EVENTID))
									return false;

								if (this.SOURCEFILEID == null) {
									if (other.SOURCEFILEID != null)
										return false;
								} else if (!this.SOURCEFILEID
										.equals(other.SOURCEFILEID))
									return false;

								if (this.ASSOCIATEDMEDIA == null) {
									if (other.ASSOCIATEDMEDIA != null)
										return false;
								} else if (!this.ASSOCIATEDMEDIA
										.equals(other.ASSOCIATEDMEDIA))
									return false;

								if (this.ASSOCIATEDREFERENCES == null) {
									if (other.ASSOCIATEDREFERENCES != null)
										return false;
								} else if (!this.ASSOCIATEDREFERENCES
										.equals(other.ASSOCIATEDREFERENCES))
									return false;

								if (this.ASSOCIATEDTAXA == null) {
									if (other.ASSOCIATEDTAXA != null)
										return false;
								} else if (!this.ASSOCIATEDTAXA
										.equals(other.ASSOCIATEDTAXA))
									return false;

								if (this.HASMEDIA == null) {
									if (other.HASMEDIA != null)
										return false;
								} else if (!this.HASMEDIA
										.equals(other.HASMEDIA))
									return false;

								if (this.HASCOORDINATES == null) {
									if (other.HASCOORDINATES != null)
										return false;
								} else if (!this.HASCOORDINATES
										.equals(other.HASCOORDINATES))
									return false;

								if (this.DWCAID == null) {
									if (other.DWCAID != null)
										return false;
								} else if (!this.DWCAID.equals(other.DWCAID))
									return false;

								if (this.DISPOSITION == null) {
									if (other.DISPOSITION != null)
										return false;
								} else if (!this.DISPOSITION
										.equals(other.DISPOSITION))
									return false;

								return true;
							}

						} // G_OutBegin_AggR_100

						AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
						AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
						java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

						/**
						 * [tAggregateRow_1_AGGOUT begin ] stop
						 */

						/**
						 * [tMemorizeRows_1 begin ] start
						 */

						ok_Hash.put("tMemorizeRows_1", false);
						start_Hash.put("tMemorizeRows_1",
								System.currentTimeMillis());

						currentComponent = "tMemorizeRows_1";

						int tos_count_tMemorizeRows_1 = 0;

						int iRows_tMemorizeRows_1 = 50;
						String[] OCCURRENCEID_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_OCCURRENCEID",
								OCCURRENCEID_tMemorizeRows_1);
						String[] CATALOGNUMBER_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_CATALOGNUMBER",
								CATALOGNUMBER_tMemorizeRows_1);
						java.util.Date[] CREATED_tMemorizeRows_1 = new java.util.Date[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_CREATED",
								CREATED_tMemorizeRows_1);
						java.util.Date[] MODIFIED_tMemorizeRows_1 = new java.util.Date[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_MODIFIED",
								MODIFIED_tMemorizeRows_1);
						String[] BASISOFRECORD_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_BASISOFRECORD",
								BASISOFRECORD_tMemorizeRows_1);
						String[] OCCURRENCEREMARKS_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_OCCURRENCEREMARKS",
								OCCURRENCEREMARKS_tMemorizeRows_1);
						String[] RECORDNUMBER_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_RECORDNUMBER",
								RECORDNUMBER_tMemorizeRows_1);
						String[] SEX_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_SEX",
								SEX_tMemorizeRows_1);
						String[] LIFESTAGE_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_LIFESTAGE",
								LIFESTAGE_tMemorizeRows_1);
						String[] RIGHTS_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_RIGHTS",
								RIGHTS_tMemorizeRows_1);
						String[] RIGHTSHOLDER_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_RIGHTSHOLDER",
								RIGHTSHOLDER_tMemorizeRows_1);
						String[] OWNERINSTITUTIONCODE_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_OWNERINSTITUTIONCODE",
								OWNERINSTITUTIONCODE_tMemorizeRows_1);
						String[] ACCESSRIGHTS_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_ACCESSRIGHTS",
								ACCESSRIGHTS_tMemorizeRows_1);
						String[] BIBLIOGRAPHICCITATION_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_BIBLIOGRAPHICCITATION",
								BIBLIOGRAPHICCITATION_tMemorizeRows_1);
						String[] COLLECTIONCODE_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_COLLECTIONCODE",
								COLLECTIONCODE_tMemorizeRows_1);
						BigDecimal[] COLLECTIONID_tMemorizeRows_1 = new BigDecimal[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_COLLECTIONID",
								COLLECTIONID_tMemorizeRows_1);
						String[] INSTITUTIONCODE_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_INSTITUTIONCODE",
								INSTITUTIONCODE_tMemorizeRows_1);
						BigDecimal[] GEOLOGICALCONTEXTID_tMemorizeRows_1 = new BigDecimal[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_GEOLOGICALCONTEXTID",
								GEOLOGICALCONTEXTID_tMemorizeRows_1);
						String[] EVENTID_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_EVENTID",
								EVENTID_tMemorizeRows_1);
						String[] SOURCEFILEID_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_SOURCEFILEID",
								SOURCEFILEID_tMemorizeRows_1);
						String[] ASSOCIATEDMEDIA_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_ASSOCIATEDMEDIA",
								ASSOCIATEDMEDIA_tMemorizeRows_1);
						String[] ASSOCIATEDREFERENCES_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_ASSOCIATEDREFERENCES",
								ASSOCIATEDREFERENCES_tMemorizeRows_1);
						String[] ASSOCIATEDTAXA_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_ASSOCIATEDTAXA",
								ASSOCIATEDTAXA_tMemorizeRows_1);
						BigDecimal[] HASMEDIA_tMemorizeRows_1 = new BigDecimal[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_HASMEDIA",
								HASMEDIA_tMemorizeRows_1);
						BigDecimal[] HASCOORDINATES_tMemorizeRows_1 = new BigDecimal[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_HASCOORDINATES",
								HASCOORDINATES_tMemorizeRows_1);
						String[] DWCAID_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_DWCAID",
								DWCAID_tMemorizeRows_1);
						String[] DISPOSITION_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_DISPOSITION",
								DISPOSITION_tMemorizeRows_1);
						String[] fieldName_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_fieldName",
								fieldName_tMemorizeRows_1);
						String[] data_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
						globalMap.put("tMemorizeRows_1_data",
								data_tMemorizeRows_1);
						globalMap.put("tMemorizeRows_1_NB_LINE_ROWS",
								iRows_tMemorizeRows_1);

						/**
						 * [tMemorizeRows_1 begin ] stop
						 */

						/**
						 * [tMap_1 begin ] start
						 */

						ok_Hash.put("tMap_1", false);
						start_Hash.put("tMap_1", System.currentTimeMillis());

						currentComponent = "tMap_1";

						int tos_count_tMap_1 = 0;

						// ###############################
						// # Lookup's keys initialization

						org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<specimen_choicesStruct> tHash_Lookup_specimen_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<specimen_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<specimen_choicesStruct>) globalMap
								.get("tHash_Lookup_specimen_choices"));

						specimen_choicesStruct specimen_choicesHashKey = new specimen_choicesStruct();
						specimen_choicesStruct specimen_choicesDefault = new specimen_choicesStruct();
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_1__Struct {
						}
						Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						rows_specimensStruct rows_specimens_tmp = new rows_specimensStruct();
						// ###############################

						/**
						 * [tMap_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 begin ] start
						 */

						ok_Hash.put("tOracleInput_1", false);
						start_Hash.put("tOracleInput_1",
								System.currentTimeMillis());

						currentComponent = "tOracleInput_1";

						int tos_count_tOracleInput_1 = 0;

						int nb_line_tOracleInput_1 = 0;
						java.sql.Connection conn_tOracleInput_1 = null;
						String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
						java.lang.Class.forName(driverClass_tOracleInput_1);

						String url_tOracleInput_1 = null;
						url_tOracleInput_1 = "jdbc:oracle:thin:@"
								+ context.recolnat_Server + ":"
								+ context.recolnat_Port + ":"
								+ context.recolnat_Sid;

						String dbUser_tOracleInput_1 = context.recolnat_Login;

						final String decryptedPassword_tOracleInput_1 = context.recolnat_Password;

						String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

						java.util.Properties atnParamsPrope_tOracleInput_1 = new java.util.Properties();
						atnParamsPrope_tOracleInput_1.put("user",
								dbUser_tOracleInput_1);
						atnParamsPrope_tOracleInput_1.put("password",
								dbPwd_tOracleInput_1);
						if (context.recolnat_AdditionalParams != null
								&& !"\"\""
										.equals(context.recolnat_AdditionalParams)
								&& !"".equals(context.recolnat_AdditionalParams)) {
							atnParamsPrope_tOracleInput_1
									.load(new java.io.ByteArrayInputStream(
											context.recolnat_AdditionalParams
													.replace("&", "\n")
													.getBytes()));
						}
						conn_tOracleInput_1 = java.sql.DriverManager
								.getConnection(url_tOracleInput_1,
										atnParamsPrope_tOracleInput_1);
						java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
								.createStatement();
						java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
								.executeQuery("select sessiontimezone from dual");
						String sessionTimezone_tOracleInput_1 = java.util.TimeZone
								.getDefault().getID();
						while (rsGetTZ_tOracleInput_1.next()) {
							sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
									.getString(1);
						}
						((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);

						java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
								.createStatement();

						String dbquery_tOracleInput_1 = "SELECT \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.OCCURRENCEID, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.CATALOGNUMBER, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.CREATED, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.MODIFIED, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.BASISOFRECORD, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.OCCURRENCEREMARKS, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.RECORDNUMBER, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.SEX, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.LIFESTAGE, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.RIGHTS, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.RIGHTSHOLDER, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.OWNERINSTITUTIONCODE, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.ACCESSRIGHTS, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.BIBLIOGRAPHICCITATION, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.COLLECTIONCODE, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.COLLECTIONID, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.INSTITUTIONCODE, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.GEOLOGICALCONTEXTID, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.EVENTID, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.SOURCEFILEID, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.ASSOCIATEDMEDIA, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.ASSOCIATEDREFERENCES, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.ASSOCIATEDTAXA, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.HASMEDIA, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.HASCOORDINATES, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.DWCAID, \n  "
								+ context.recolnat_Schema
								+ ".SPECIMENS.DISPOSITION\nFROM "
								+ context.recolnat_Schema
								+ ".SPECIMENS\nwhere \nINSTITUTIONCODE||COLLECTIONCODE||CATALOGNUMBER =\n'"
								+ ((String) globalMap.get("specimenCode"))
								+ "'";

						globalMap.put("tOracleInput_1_QUERY",
								dbquery_tOracleInput_1);

						java.sql.ResultSet rs_tOracleInput_1 = null;
						try {
							rs_tOracleInput_1 = stmt_tOracleInput_1
									.executeQuery(dbquery_tOracleInput_1);
							java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
									.getMetaData();
							int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
									.getColumnCount();

							String tmpContent_tOracleInput_1 = null;

							while (rs_tOracleInput_1.next()) {
								nb_line_tOracleInput_1++;

								if (colQtyInRs_tOracleInput_1 < 1) {
									db_specimens.OCCURRENCEID = null;
								} else {

									if (rs_tOracleInput_1.getObject(1) != null) {
										db_specimens.OCCURRENCEID = rs_tOracleInput_1
												.getBytes(1);
									} else {

										throw new RuntimeException(
												"Null value in non-Nullable column");
									}
								}
								if (colQtyInRs_tOracleInput_1 < 2) {
									db_specimens.CATALOGNUMBER = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(2);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.CATALOGNUMBER = tmpContent_tOracleInput_1;
									} else {
										db_specimens.CATALOGNUMBER = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 3) {
									db_specimens.CREATED = null;
								} else {

									if (rs_tOracleInput_1.getTimestamp(3) != null) {
										db_specimens.CREATED = new java.util.Date(
												rs_tOracleInput_1.getTimestamp(
														3).getTime());
									} else {
										db_specimens.CREATED = null;
									}

								}
								if (colQtyInRs_tOracleInput_1 < 4) {
									db_specimens.MODIFIED = null;
								} else {

									if (rs_tOracleInput_1.getTimestamp(4) != null) {
										db_specimens.MODIFIED = new java.util.Date(
												rs_tOracleInput_1.getTimestamp(
														4).getTime());
									} else {
										db_specimens.MODIFIED = null;
									}

								}
								if (colQtyInRs_tOracleInput_1 < 5) {
									db_specimens.BASISOFRECORD = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(5);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.BASISOFRECORD = tmpContent_tOracleInput_1;
									} else {
										db_specimens.BASISOFRECORD = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 6) {
									db_specimens.OCCURRENCEREMARKS = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(6);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.OCCURRENCEREMARKS = tmpContent_tOracleInput_1;
									} else {
										db_specimens.OCCURRENCEREMARKS = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 7) {
									db_specimens.RECORDNUMBER = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(7);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.RECORDNUMBER = tmpContent_tOracleInput_1;
									} else {
										db_specimens.RECORDNUMBER = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 8) {
									db_specimens.SEX = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(8);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.SEX = tmpContent_tOracleInput_1;
									} else {
										db_specimens.SEX = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 9) {
									db_specimens.LIFESTAGE = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(9);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.LIFESTAGE = tmpContent_tOracleInput_1;
									} else {
										db_specimens.LIFESTAGE = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 10) {
									db_specimens.RIGHTS = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(10);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.RIGHTS = tmpContent_tOracleInput_1;
									} else {
										db_specimens.RIGHTS = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 11) {
									db_specimens.RIGHTSHOLDER = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(11);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.RIGHTSHOLDER = tmpContent_tOracleInput_1;
									} else {
										db_specimens.RIGHTSHOLDER = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 12) {
									db_specimens.OWNERINSTITUTIONCODE = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(12);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.OWNERINSTITUTIONCODE = tmpContent_tOracleInput_1;
									} else {
										db_specimens.OWNERINSTITUTIONCODE = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 13) {
									db_specimens.ACCESSRIGHTS = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(13);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.ACCESSRIGHTS = tmpContent_tOracleInput_1;
									} else {
										db_specimens.ACCESSRIGHTS = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 14) {
									db_specimens.BIBLIOGRAPHICCITATION = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(14);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.BIBLIOGRAPHICCITATION = tmpContent_tOracleInput_1;
									} else {
										db_specimens.BIBLIOGRAPHICCITATION = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 15) {
									db_specimens.COLLECTIONCODE = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(15);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.COLLECTIONCODE = tmpContent_tOracleInput_1;
									} else {
										db_specimens.COLLECTIONCODE = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 16) {
									db_specimens.COLLECTIONID = null;
								} else {

									if (rs_tOracleInput_1.getObject(16) != null) {
										db_specimens.COLLECTIONID = rs_tOracleInput_1
												.getBigDecimal(16);
									} else {

										db_specimens.COLLECTIONID = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 17) {
									db_specimens.INSTITUTIONCODE = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(17);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.INSTITUTIONCODE = tmpContent_tOracleInput_1;
									} else {
										db_specimens.INSTITUTIONCODE = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 18) {
									db_specimens.GEOLOGICALCONTEXTID = null;
								} else {

									if (rs_tOracleInput_1.getObject(18) != null) {
										db_specimens.GEOLOGICALCONTEXTID = rs_tOracleInput_1
												.getBigDecimal(18);
									} else {

										db_specimens.GEOLOGICALCONTEXTID = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 19) {
									db_specimens.EVENTID = null;
								} else {

									if (rs_tOracleInput_1.getObject(19) != null) {
										db_specimens.EVENTID = rs_tOracleInput_1
												.getBytes(19);
									} else {

										db_specimens.EVENTID = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 20) {
									db_specimens.SOURCEFILEID = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(20);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.SOURCEFILEID = tmpContent_tOracleInput_1;
									} else {
										db_specimens.SOURCEFILEID = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 21) {
									db_specimens.ASSOCIATEDMEDIA = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(21);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.ASSOCIATEDMEDIA = tmpContent_tOracleInput_1;
									} else {
										db_specimens.ASSOCIATEDMEDIA = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 22) {
									db_specimens.ASSOCIATEDREFERENCES = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(22);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.ASSOCIATEDREFERENCES = tmpContent_tOracleInput_1;
									} else {
										db_specimens.ASSOCIATEDREFERENCES = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 23) {
									db_specimens.ASSOCIATEDTAXA = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(23);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.ASSOCIATEDTAXA = tmpContent_tOracleInput_1;
									} else {
										db_specimens.ASSOCIATEDTAXA = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 24) {
									db_specimens.HASMEDIA = null;
								} else {

									if (rs_tOracleInput_1.getObject(24) != null) {
										db_specimens.HASMEDIA = rs_tOracleInput_1
												.getBigDecimal(24);
									} else {

										db_specimens.HASMEDIA = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 25) {
									db_specimens.HASCOORDINATES = null;
								} else {

									if (rs_tOracleInput_1.getObject(25) != null) {
										db_specimens.HASCOORDINATES = rs_tOracleInput_1
												.getBigDecimal(25);
									} else {

										db_specimens.HASCOORDINATES = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 26) {
									db_specimens.DWCAID = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(26);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.DWCAID = tmpContent_tOracleInput_1;
									} else {
										db_specimens.DWCAID = null;
									}
								}
								if (colQtyInRs_tOracleInput_1 < 27) {
									db_specimens.DISPOSITION = null;
								} else {

									tmpContent_tOracleInput_1 = rs_tOracleInput_1
											.getString(27);
									if (tmpContent_tOracleInput_1 != null) {
										db_specimens.DISPOSITION = tmpContent_tOracleInput_1;
									} else {
										db_specimens.DISPOSITION = null;
									}
								}

								/**
								 * [tOracleInput_1 begin ] stop
								 */

								/**
								 * [tOracleInput_1 main ] start
								 */

								currentComponent = "tOracleInput_1";

								tos_count_tOracleInput_1++;

								/**
								 * [tOracleInput_1 main ] stop
								 */

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "specimen_choices"
								// /////////////////////////////////////////////

								boolean forceLoopspecimen_choices = false;

								specimen_choicesStruct specimen_choicesObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									specimen_choicesHashKey.className = "Specimen";

									specimen_choicesHashKey.relationId = javax.xml.bind.DatatypeConverter
											.printHexBinary(db_specimens.OCCURRENCEID);

									specimen_choicesHashKey.hashCodeDirty = true;

									tHash_Lookup_specimen_choices
											.lookup(specimen_choicesHashKey);

									if (!tHash_Lookup_specimen_choices
											.hasNext()) { // G_TM_M_090

										forceLoopspecimen_choices = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLoopspecimen_choices = true;
								} // G 21

								specimen_choicesStruct specimen_choices = null;

								while ((tHash_Lookup_specimen_choices != null && tHash_Lookup_specimen_choices
										.hasNext())
										|| forceLoopspecimen_choices) { // G_TM_M_043

									// CALL close loop of lookup
									// 'specimen_choices'

									specimen_choicesStruct fromLookup_specimen_choices = null;
									specimen_choices = specimen_choicesDefault;

									if (!forceLoopspecimen_choices) { // G 46

										fromLookup_specimen_choices = tHash_Lookup_specimen_choices
												.next();

										if (fromLookup_specimen_choices != null) {
											specimen_choices = fromLookup_specimen_choices;
										}

									} // G 46

									forceLoopspecimen_choices = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										rows_specimens = null;

										// # Output table : 'rows_specimens'
										rows_specimens_tmp.OCCURRENCEID = javax.xml.bind.DatatypeConverter
												.printHexBinary(db_specimens.OCCURRENCEID);
										rows_specimens_tmp.CATALOGNUMBER = db_specimens.CATALOGNUMBER;
										rows_specimens_tmp.CREATED = db_specimens.CREATED;
										rows_specimens_tmp.MODIFIED = db_specimens.MODIFIED;
										rows_specimens_tmp.BASISOFRECORD = db_specimens.BASISOFRECORD;
										rows_specimens_tmp.OCCURRENCEREMARKS = db_specimens.OCCURRENCEREMARKS;
										rows_specimens_tmp.RECORDNUMBER = db_specimens.RECORDNUMBER;
										rows_specimens_tmp.SEX = db_specimens.SEX;
										rows_specimens_tmp.LIFESTAGE = db_specimens.LIFESTAGE;
										rows_specimens_tmp.RIGHTS = db_specimens.RIGHTS;
										rows_specimens_tmp.RIGHTSHOLDER = db_specimens.RIGHTSHOLDER;
										rows_specimens_tmp.OWNERINSTITUTIONCODE = db_specimens.OWNERINSTITUTIONCODE;
										rows_specimens_tmp.ACCESSRIGHTS = db_specimens.ACCESSRIGHTS;
										rows_specimens_tmp.BIBLIOGRAPHICCITATION = db_specimens.BIBLIOGRAPHICCITATION;
										rows_specimens_tmp.COLLECTIONCODE = db_specimens.COLLECTIONCODE;
										rows_specimens_tmp.COLLECTIONID = db_specimens.COLLECTIONID;
										rows_specimens_tmp.INSTITUTIONCODE = db_specimens.INSTITUTIONCODE;
										rows_specimens_tmp.GEOLOGICALCONTEXTID = db_specimens.GEOLOGICALCONTEXTID;
										rows_specimens_tmp.EVENTID = javax.xml.bind.DatatypeConverter
												.printHexBinary(db_specimens.EVENTID);
										rows_specimens_tmp.SOURCEFILEID = db_specimens.SOURCEFILEID;
										rows_specimens_tmp.ASSOCIATEDMEDIA = db_specimens.ASSOCIATEDMEDIA;
										rows_specimens_tmp.ASSOCIATEDREFERENCES = db_specimens.ASSOCIATEDREFERENCES;
										rows_specimens_tmp.ASSOCIATEDTAXA = db_specimens.ASSOCIATEDTAXA;
										rows_specimens_tmp.HASMEDIA = db_specimens.HASMEDIA;
										rows_specimens_tmp.HASCOORDINATES = db_specimens.HASCOORDINATES;
										rows_specimens_tmp.DWCAID = db_specimens.DWCAID;
										rows_specimens_tmp.DISPOSITION = db_specimens.DISPOSITION;
										rows_specimens_tmp.fieldName = specimen_choices.fieldName;
										rows_specimens_tmp.data = specimen_choices.data;
										rows_specimens = rows_specimens_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "rows_specimens"
									if (rows_specimens != null) {

										/**
										 * [tMemorizeRows_1 main ] start
										 */

										currentComponent = "tMemorizeRows_1";

										for (int i_tMemorizeRows_1 = iRows_tMemorizeRows_1 - 1; i_tMemorizeRows_1 > 0; i_tMemorizeRows_1--) {
											fieldName_tMemorizeRows_1[i_tMemorizeRows_1] = fieldName_tMemorizeRows_1[i_tMemorizeRows_1 - 1];
											data_tMemorizeRows_1[i_tMemorizeRows_1] = data_tMemorizeRows_1[i_tMemorizeRows_1 - 1];
										}
										fieldName_tMemorizeRows_1[0] = rows_specimens.fieldName;
										data_tMemorizeRows_1[0] = rows_specimens.data;

										row1 = rows_specimens;

										tos_count_tMemorizeRows_1++;

										/**
										 * [tMemorizeRows_1 main ] stop
										 */

										/**
										 * [tAggregateRow_1_AGGOUT main ] start
										 */

										currentVirtualComponent = "tAggregateRow_1";

										currentComponent = "tAggregateRow_1_AGGOUT";

										operation_finder_tAggregateRow_1.OCCURRENCEID = row1.OCCURRENCEID;
										operation_finder_tAggregateRow_1.CATALOGNUMBER = row1.CATALOGNUMBER;
										operation_finder_tAggregateRow_1.CREATED = row1.CREATED;
										operation_finder_tAggregateRow_1.MODIFIED = row1.MODIFIED;
										operation_finder_tAggregateRow_1.BASISOFRECORD = row1.BASISOFRECORD;
										operation_finder_tAggregateRow_1.OCCURRENCEREMARKS = row1.OCCURRENCEREMARKS;
										operation_finder_tAggregateRow_1.RECORDNUMBER = row1.RECORDNUMBER;
										operation_finder_tAggregateRow_1.SEX = row1.SEX;
										operation_finder_tAggregateRow_1.LIFESTAGE = row1.LIFESTAGE;
										operation_finder_tAggregateRow_1.RIGHTS = row1.RIGHTS;
										operation_finder_tAggregateRow_1.RIGHTSHOLDER = row1.RIGHTSHOLDER;
										operation_finder_tAggregateRow_1.OWNERINSTITUTIONCODE = row1.OWNERINSTITUTIONCODE;
										operation_finder_tAggregateRow_1.ACCESSRIGHTS = row1.ACCESSRIGHTS;
										operation_finder_tAggregateRow_1.BIBLIOGRAPHICCITATION = row1.BIBLIOGRAPHICCITATION;
										operation_finder_tAggregateRow_1.COLLECTIONCODE = row1.COLLECTIONCODE;
										operation_finder_tAggregateRow_1.COLLECTIONID = row1.COLLECTIONID;
										operation_finder_tAggregateRow_1.INSTITUTIONCODE = row1.INSTITUTIONCODE;
										operation_finder_tAggregateRow_1.GEOLOGICALCONTEXTID = row1.GEOLOGICALCONTEXTID;
										operation_finder_tAggregateRow_1.EVENTID = row1.EVENTID;
										operation_finder_tAggregateRow_1.SOURCEFILEID = row1.SOURCEFILEID;
										operation_finder_tAggregateRow_1.ASSOCIATEDMEDIA = row1.ASSOCIATEDMEDIA;
										operation_finder_tAggregateRow_1.ASSOCIATEDREFERENCES = row1.ASSOCIATEDREFERENCES;
										operation_finder_tAggregateRow_1.ASSOCIATEDTAXA = row1.ASSOCIATEDTAXA;
										operation_finder_tAggregateRow_1.HASMEDIA = row1.HASMEDIA;
										operation_finder_tAggregateRow_1.HASCOORDINATES = row1.HASCOORDINATES;
										operation_finder_tAggregateRow_1.DWCAID = row1.DWCAID;
										operation_finder_tAggregateRow_1.DISPOSITION = row1.DISPOSITION;

										operation_finder_tAggregateRow_1.hashCodeDirty = true;

										operation_result_tAggregateRow_1 = hash_tAggregateRow_1
												.get(operation_finder_tAggregateRow_1);

										if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

											operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

											operation_result_tAggregateRow_1.OCCURRENCEID = operation_finder_tAggregateRow_1.OCCURRENCEID;
											operation_result_tAggregateRow_1.CATALOGNUMBER = operation_finder_tAggregateRow_1.CATALOGNUMBER;
											operation_result_tAggregateRow_1.CREATED = operation_finder_tAggregateRow_1.CREATED;
											operation_result_tAggregateRow_1.MODIFIED = operation_finder_tAggregateRow_1.MODIFIED;
											operation_result_tAggregateRow_1.BASISOFRECORD = operation_finder_tAggregateRow_1.BASISOFRECORD;
											operation_result_tAggregateRow_1.OCCURRENCEREMARKS = operation_finder_tAggregateRow_1.OCCURRENCEREMARKS;
											operation_result_tAggregateRow_1.RECORDNUMBER = operation_finder_tAggregateRow_1.RECORDNUMBER;
											operation_result_tAggregateRow_1.SEX = operation_finder_tAggregateRow_1.SEX;
											operation_result_tAggregateRow_1.LIFESTAGE = operation_finder_tAggregateRow_1.LIFESTAGE;
											operation_result_tAggregateRow_1.RIGHTS = operation_finder_tAggregateRow_1.RIGHTS;
											operation_result_tAggregateRow_1.RIGHTSHOLDER = operation_finder_tAggregateRow_1.RIGHTSHOLDER;
											operation_result_tAggregateRow_1.OWNERINSTITUTIONCODE = operation_finder_tAggregateRow_1.OWNERINSTITUTIONCODE;
											operation_result_tAggregateRow_1.ACCESSRIGHTS = operation_finder_tAggregateRow_1.ACCESSRIGHTS;
											operation_result_tAggregateRow_1.BIBLIOGRAPHICCITATION = operation_finder_tAggregateRow_1.BIBLIOGRAPHICCITATION;
											operation_result_tAggregateRow_1.COLLECTIONCODE = operation_finder_tAggregateRow_1.COLLECTIONCODE;
											operation_result_tAggregateRow_1.COLLECTIONID = operation_finder_tAggregateRow_1.COLLECTIONID;
											operation_result_tAggregateRow_1.INSTITUTIONCODE = operation_finder_tAggregateRow_1.INSTITUTIONCODE;
											operation_result_tAggregateRow_1.GEOLOGICALCONTEXTID = operation_finder_tAggregateRow_1.GEOLOGICALCONTEXTID;
											operation_result_tAggregateRow_1.EVENTID = operation_finder_tAggregateRow_1.EVENTID;
											operation_result_tAggregateRow_1.SOURCEFILEID = operation_finder_tAggregateRow_1.SOURCEFILEID;
											operation_result_tAggregateRow_1.ASSOCIATEDMEDIA = operation_finder_tAggregateRow_1.ASSOCIATEDMEDIA;
											operation_result_tAggregateRow_1.ASSOCIATEDREFERENCES = operation_finder_tAggregateRow_1.ASSOCIATEDREFERENCES;
											operation_result_tAggregateRow_1.ASSOCIATEDTAXA = operation_finder_tAggregateRow_1.ASSOCIATEDTAXA;
											operation_result_tAggregateRow_1.HASMEDIA = operation_finder_tAggregateRow_1.HASMEDIA;
											operation_result_tAggregateRow_1.HASCOORDINATES = operation_finder_tAggregateRow_1.HASCOORDINATES;
											operation_result_tAggregateRow_1.DWCAID = operation_finder_tAggregateRow_1.DWCAID;
											operation_result_tAggregateRow_1.DISPOSITION = operation_finder_tAggregateRow_1.DISPOSITION;

											hash_tAggregateRow_1
													.put(operation_result_tAggregateRow_1,
															operation_result_tAggregateRow_1);

										} // G_OutMain_AggR_001

										tos_count_tAggregateRow_1_AGGOUT++;

										/**
										 * [tAggregateRow_1_AGGOUT main ] stop
										 */

									} // End of branch "rows_specimens"

								} // close loop of lookup 'specimen_choices' //
									// G_TM_M_043

								/**
								 * [tOracleInput_1 end ] start
								 */

								currentComponent = "tOracleInput_1";

							}
						} finally {
							stmt_tOracleInput_1.close();

							if (conn_tOracleInput_1 != null
									&& !conn_tOracleInput_1.isClosed()) {

								conn_tOracleInput_1.close();

							}

						}

						globalMap.put("tOracleInput_1_NB_LINE",
								nb_line_tOracleInput_1);

						ok_Hash.put("tOracleInput_1", true);
						end_Hash.put("tOracleInput_1",
								System.currentTimeMillis());

						/**
						 * [tOracleInput_1 end ] stop
						 */

						/**
						 * [tMap_1 end ] start
						 */

						currentComponent = "tMap_1";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_1", true);
						end_Hash.put("tMap_1", System.currentTimeMillis());

						/**
						 * [tMap_1 end ] stop
						 */

						/**
						 * [tMemorizeRows_1 end ] start
						 */

						currentComponent = "tMemorizeRows_1";

						ok_Hash.put("tMemorizeRows_1", true);
						end_Hash.put("tMemorizeRows_1",
								System.currentTimeMillis());

						/**
						 * [tMemorizeRows_1 end ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						ok_Hash.put("tAggregateRow_1_AGGOUT", true);
						end_Hash.put("tAggregateRow_1_AGGOUT",
								System.currentTimeMillis());

						/**
						 * [tAggregateRow_1_AGGOUT end ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_1", false);
						start_Hash.put("tFileOutputDelimited_1",
								System.currentTimeMillis());

						currentComponent = "tFileOutputDelimited_1";

						int tos_count_tFileOutputDelimited_1 = 0;

						String fileName_tFileOutputDelimited_1 = "";
						fileName_tFileOutputDelimited_1 = (new java.io.File(
								context.exportpath + "/specimens.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_1 = null;
						String extension_tFileOutputDelimited_1 = null;
						String directory_tFileOutputDelimited_1 = null;
						if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_1
									.lastIndexOf(".") < fileName_tFileOutputDelimited_1
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
								extension_tFileOutputDelimited_1 = "";
							} else {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(0,
												fileName_tFileOutputDelimited_1
														.lastIndexOf("."));
								extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(fileName_tFileOutputDelimited_1
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_1
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(0,
												fileName_tFileOutputDelimited_1
														.lastIndexOf("."));
								extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(fileName_tFileOutputDelimited_1
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
								extension_tFileOutputDelimited_1 = "";
							}
							directory_tFileOutputDelimited_1 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_1 = true;
						java.io.File filetFileOutputDelimited_1 = new java.io.File(
								fileName_tFileOutputDelimited_1);
						globalMap.put("tFileOutputDelimited_1_FILE_NAME",
								fileName_tFileOutputDelimited_1);
						if (filetFileOutputDelimited_1.exists()) {
							isFileGenerated_tFileOutputDelimited_1 = false;
						}
						int nb_line_tFileOutputDelimited_1 = 0;
						int splitEvery_tFileOutputDelimited_1 = 1000;
						int splitedFileNo_tFileOutputDelimited_1 = 0;
						int currentRow_tFileOutputDelimited_1 = 0;

						final String OUT_DELIM_tFileOutputDelimited_1 = /**
						 * Start
						 * field tFileOutputDelimited_1:FIELDSEPARATOR
						 */
						"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
						;

						final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
						 * 
						 * Start field tFileOutputDelimited_1:ROWSEPARATOR
						 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
						;

						// create directory only if not exists
						if (directory_tFileOutputDelimited_1 != null
								&& directory_tFileOutputDelimited_1.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
									directory_tFileOutputDelimited_1);
							if (!dir_tFileOutputDelimited_1.exists()) {
								dir_tFileOutputDelimited_1.mkdirs();
							}
						}

						// routines.system.Row
						java.io.Writer outtFileOutputDelimited_1 = null;

						outtFileOutputDelimited_1 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_1,
												true), "ISO-8859-15"));
						if (filetFileOutputDelimited_1.length() == 0) {
							outtFileOutputDelimited_1.write("OCCURRENCEID");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("CATALOGNUMBER");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("CREATED");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("MODIFIED");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("BASISOFRECORD");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1
									.write("OCCURRENCEREMARKS");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("RECORDNUMBER");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("SEX");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("LIFESTAGE");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("RIGHTS");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("RIGHTSHOLDER");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1
									.write("OWNERINSTITUTIONCODE");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("ACCESSRIGHTS");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1
									.write("BIBLIOGRAPHICCITATION");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("COLLECTIONCODE");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("COLLECTIONID");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("INSTITUTIONCODE");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1
									.write("GEOLOGICALCONTEXTID");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("EVENTID");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("SOURCEFILEID");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("ASSOCIATEDMEDIA");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1
									.write("ASSOCIATEDREFERENCES");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("ASSOCIATEDTAXA");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("HASMEDIA");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("HASCOORDINATES");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("DWCAID");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.write("DISPOSITION");
							outtFileOutputDelimited_1
									.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.flush();
						}

						resourceMap.put("out_tFileOutputDelimited_1",
								outtFileOutputDelimited_1);
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);

						/**
						 * [tFileOutputDelimited_1 begin ] stop
						 */

						/**
						 * [tJavaRow_1 begin ] start
						 */

						ok_Hash.put("tJavaRow_1", false);
						start_Hash
								.put("tJavaRow_1", System.currentTimeMillis());

						currentComponent = "tJavaRow_1";

						int tos_count_tJavaRow_1 = 0;

						int nb_line_tJavaRow_1 = 0;

						/**
						 * [tJavaRow_1 begin ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGIN begin ] start
						 */

						ok_Hash.put("tAggregateRow_1_AGGIN", false);
						start_Hash.put("tAggregateRow_1_AGGIN",
								System.currentTimeMillis());

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGIN";

						int tos_count_tAggregateRow_1_AGGIN = 0;

						java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
								.values();

						globalMap.put("tAggregateRow_1_NB_LINE",
								values_tAggregateRow_1.size());

						for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

							/**
							 * [tAggregateRow_1_AGGIN begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGIN main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGIN";

							specimens.OCCURRENCEID = aggregated_row_tAggregateRow_1.OCCURRENCEID;

							specimens.CATALOGNUMBER = aggregated_row_tAggregateRow_1.CATALOGNUMBER;

							specimens.CREATED = aggregated_row_tAggregateRow_1.CREATED;

							specimens.MODIFIED = aggregated_row_tAggregateRow_1.MODIFIED;

							specimens.BASISOFRECORD = aggregated_row_tAggregateRow_1.BASISOFRECORD;

							specimens.OCCURRENCEREMARKS = aggregated_row_tAggregateRow_1.OCCURRENCEREMARKS;

							specimens.RECORDNUMBER = aggregated_row_tAggregateRow_1.RECORDNUMBER;

							specimens.SEX = aggregated_row_tAggregateRow_1.SEX;

							specimens.LIFESTAGE = aggregated_row_tAggregateRow_1.LIFESTAGE;

							specimens.RIGHTS = aggregated_row_tAggregateRow_1.RIGHTS;

							specimens.RIGHTSHOLDER = aggregated_row_tAggregateRow_1.RIGHTSHOLDER;

							specimens.OWNERINSTITUTIONCODE = aggregated_row_tAggregateRow_1.OWNERINSTITUTIONCODE;

							specimens.ACCESSRIGHTS = aggregated_row_tAggregateRow_1.ACCESSRIGHTS;

							specimens.BIBLIOGRAPHICCITATION = aggregated_row_tAggregateRow_1.BIBLIOGRAPHICCITATION;

							specimens.COLLECTIONCODE = aggregated_row_tAggregateRow_1.COLLECTIONCODE;

							specimens.COLLECTIONID = aggregated_row_tAggregateRow_1.COLLECTIONID;

							specimens.INSTITUTIONCODE = aggregated_row_tAggregateRow_1.INSTITUTIONCODE;

							specimens.GEOLOGICALCONTEXTID = aggregated_row_tAggregateRow_1.GEOLOGICALCONTEXTID;

							specimens.EVENTID = aggregated_row_tAggregateRow_1.EVENTID;

							specimens.SOURCEFILEID = aggregated_row_tAggregateRow_1.SOURCEFILEID;

							specimens.ASSOCIATEDMEDIA = aggregated_row_tAggregateRow_1.ASSOCIATEDMEDIA;

							specimens.ASSOCIATEDREFERENCES = aggregated_row_tAggregateRow_1.ASSOCIATEDREFERENCES;

							specimens.ASSOCIATEDTAXA = aggregated_row_tAggregateRow_1.ASSOCIATEDTAXA;

							specimens.HASMEDIA = aggregated_row_tAggregateRow_1.HASMEDIA;

							specimens.HASCOORDINATES = aggregated_row_tAggregateRow_1.HASCOORDINATES;

							specimens.DWCAID = aggregated_row_tAggregateRow_1.DWCAID;

							specimens.DISPOSITION = aggregated_row_tAggregateRow_1.DISPOSITION;

							tos_count_tAggregateRow_1_AGGIN++;

							/**
							 * [tAggregateRow_1_AGGIN main ] stop
							 */

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							// Code généré selon le schémas d'entrée et de
							// sortie
							specimen_to_csv.OCCURRENCEID = specimens.OCCURRENCEID;
							specimen_to_csv.CATALOGNUMBER = specimens.CATALOGNUMBER;
							specimen_to_csv.CREATED = specimens.CREATED;
							specimen_to_csv.MODIFIED = specimens.MODIFIED;
							specimen_to_csv.BASISOFRECORD = specimens.BASISOFRECORD;
							specimen_to_csv.OCCURRENCEREMARKS = specimens.OCCURRENCEREMARKS;
							specimen_to_csv.RECORDNUMBER = specimens.RECORDNUMBER;
							specimen_to_csv.SEX = specimens.SEX;
							specimen_to_csv.LIFESTAGE = specimens.LIFESTAGE;
							specimen_to_csv.RIGHTS = specimens.RIGHTS;
							specimen_to_csv.RIGHTSHOLDER = specimens.RIGHTSHOLDER;
							specimen_to_csv.OWNERINSTITUTIONCODE = specimens.OWNERINSTITUTIONCODE;
							specimen_to_csv.ACCESSRIGHTS = specimens.ACCESSRIGHTS;
							specimen_to_csv.BIBLIOGRAPHICCITATION = specimens.BIBLIOGRAPHICCITATION;
							specimen_to_csv.COLLECTIONCODE = specimens.COLLECTIONCODE;
							specimen_to_csv.COLLECTIONID = specimens.COLLECTIONID;
							specimen_to_csv.INSTITUTIONCODE = specimens.INSTITUTIONCODE;
							specimen_to_csv.GEOLOGICALCONTEXTID = specimens.GEOLOGICALCONTEXTID;
							specimen_to_csv.EVENTID = specimens.EVENTID;
							specimen_to_csv.SOURCEFILEID = specimens.SOURCEFILEID;
							specimen_to_csv.ASSOCIATEDMEDIA = specimens.ASSOCIATEDMEDIA;
							specimen_to_csv.ASSOCIATEDREFERENCES = specimens.ASSOCIATEDREFERENCES;
							specimen_to_csv.ASSOCIATEDTAXA = specimens.ASSOCIATEDTAXA;
							specimen_to_csv.HASMEDIA = specimens.HASMEDIA;
							specimen_to_csv.HASCOORDINATES = specimens.HASCOORDINATES;
							specimen_to_csv.DWCAID = specimens.DWCAID;
							specimen_to_csv.DISPOSITION = specimens.DISPOSITION;

							if (specimens.OCCURRENCEID != null) {
								globalMap.put("occurrenceId",
										specimens.OCCURRENCEID);
							} else {
								System.out
										.println("error : occurrenceId est null! "
												+ specimens.CATALOGNUMBER);
							}

							if (specimens.EVENTID != null) {
								globalMap.put("geologicalContextId",
										specimens.GEOLOGICALCONTEXTID);
							} else {
								globalMap.put("geologicalContextId", null);
							}
							if (specimens.EVENTID != null) {
								globalMap.put("eventId", specimens.EVENTID);
							} else {
								globalMap.put("eventId", null);
							}
							ConversionString.setChoices(specimen_to_csv,
									((String[]) globalMap
											.get("tMemorizeRows_1_fieldName")),
									(String[]) globalMap
											.get("tMemorizeRows_1_data"));

							/*
							 * int comptSpecimensChoices = ((String[])
							 * globalMap.
							 * get("tMemorizeRows_1_fieldName")).length; for
							 * (int i=0; i<comptSpecimensChoices;i++) { if
							 * (((String[])
							 * globalMap.get("tMemorizeRows_1_fieldName"
							 * ))[i]!=null) { System.out.println(((String[])
							 * globalMap.get("tMemorizeRows_1_fieldName"))[i]);
							 * specimen_to_csv
							 * .getClass().getField(StringHandling
							 * .UPCASE(((String[])
							 * globalMap.get("tMemorizeRows_1_fieldName"
							 * ))[i])).set(specimen_to_csv, ((String[])
							 * globalMap.get("tMemorizeRows_1_data"))[i]);
							 * 
							 * } }
							 */
							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (specimen_to_csv.OCCURRENCEID != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.OCCURRENCEID);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.CATALOGNUMBER != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.CATALOGNUMBER);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.CREATED != null) {
								sb_tFileOutputDelimited_1.append(FormatterUtils
										.format_Date(specimen_to_csv.CREATED,
												"dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.MODIFIED != null) {
								sb_tFileOutputDelimited_1.append(FormatterUtils
										.format_Date(specimen_to_csv.MODIFIED,
												"dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.BASISOFRECORD != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.BASISOFRECORD);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.OCCURRENCEREMARKS != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.OCCURRENCEREMARKS);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.RECORDNUMBER != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.RECORDNUMBER);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.SEX != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.SEX);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.LIFESTAGE != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.LIFESTAGE);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.RIGHTS != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.RIGHTS);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.RIGHTSHOLDER != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.RIGHTSHOLDER);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.OWNERINSTITUTIONCODE != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.OWNERINSTITUTIONCODE);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.ACCESSRIGHTS != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.ACCESSRIGHTS);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.BIBLIOGRAPHICCITATION != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.BIBLIOGRAPHICCITATION);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.COLLECTIONCODE != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.COLLECTIONCODE);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.COLLECTIONID != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.COLLECTIONID
												.setScale(
														0,
														java.math.RoundingMode.HALF_UP)
												.toPlainString());
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.INSTITUTIONCODE != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.INSTITUTIONCODE);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.GEOLOGICALCONTEXTID != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.GEOLOGICALCONTEXTID
												.setScale(
														0,
														java.math.RoundingMode.HALF_UP)
												.toPlainString());
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.EVENTID != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.EVENTID);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.SOURCEFILEID != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.SOURCEFILEID);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.ASSOCIATEDMEDIA != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.ASSOCIATEDMEDIA);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.ASSOCIATEDREFERENCES != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.ASSOCIATEDREFERENCES);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.ASSOCIATEDTAXA != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.ASSOCIATEDTAXA);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.HASMEDIA != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.HASMEDIA
												.setScale(
														0,
														java.math.RoundingMode.HALF_UP)
												.toPlainString());
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.HASCOORDINATES != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.HASCOORDINATES
												.setScale(
														0,
														java.math.RoundingMode.HALF_UP)
												.toPlainString());
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.DWCAID != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.DWCAID);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (specimen_to_csv.DISPOSITION != null) {
								sb_tFileOutputDelimited_1
										.append(specimen_to_csv.DISPOSITION);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGIN end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGIN";

						} // G_AggR_600

						ok_Hash.put("tAggregateRow_1_AGGIN", true);
						end_Hash.put("tAggregateRow_1_AGGIN",
								System.currentTimeMillis());

						/**
						 * [tAggregateRow_1_AGGIN end ] stop
						 */

						/**
						 * [tJavaRow_1 end ] start
						 */

						currentComponent = "tJavaRow_1";

						globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

						ok_Hash.put("tJavaRow_1", true);
						end_Hash.put("tJavaRow_1", System.currentTimeMillis());

						/**
						 * [tJavaRow_1 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (outtFileOutputDelimited_1 != null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}

						globalMap.put("tFileOutputDelimited_1_NB_LINE",
								nb_line_tFileOutputDelimited_1);
						globalMap.put("tFileOutputDelimited_1_FILE_NAME",
								fileName_tFileOutputDelimited_1);

						resourceMap.put("finish_tFileOutputDelimited_1", true);

						ok_Hash.put("tFileOutputDelimited_1", true);
						end_Hash.put("tFileOutputDelimited_1",
								System.currentTimeMillis());

						tOracleInput_2Process(globalMap);

						/**
						 * [tFileOutputDelimited_1 end ] stop
						 */

					} // End of branch "input_specimens"

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE",
						nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_specimen_choices");

			try {

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMemorizeRows_1 finally ] start
				 */

				currentComponent = "tMemorizeRows_1";

				/**
				 * [tMemorizeRows_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}

	public static class deter_to_csvStruct implements
			routines.system.IPersistableRow<deter_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String IDENTIFICATIONID;

		public String getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public String TAXONID;

		public String getTAXONID() {
			return this.TAXONID;
		}

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDENTIFICATIONID == null) ? 0
								: this.IDENTIFICATIONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final deter_to_csvStruct other = (deter_to_csvStruct) obj;

			if (this.IDENTIFICATIONID == null) {
				if (other.IDENTIFICATIONID != null)
					return false;

			} else if (!this.IDENTIFICATIONID.equals(other.IDENTIFICATIONID))

				return false;

			return true;
		}

		public void copyDataTo(deter_to_csvStruct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;
			other.IDENTIFIEDBY = this.IDENTIFIEDBY;
			other.DATEIDENTIFIED = this.DATEIDENTIFIED;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.IDENTIFICATIONVERIFSTATUS = this.IDENTIFICATIONVERIFSTATUS;
			other.IDENTIFICATIONREMARKS = this.IDENTIFICATIONREMARKS;
			other.IDENTIFICATIONQUALIFIER = this.IDENTIFICATIONQUALIFIER;
			other.IDENTIFICATIONREFERENCES = this.IDENTIFICATIONREFERENCES;
			other.TYPESTATUS = this.TYPESTATUS;
			other.TAXONID = this.TAXONID;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCAIDENTIFICATIONID = this.DWCAIDENTIFICATIONID;

		}

		public void copyKeysDataTo(deter_to_csvStruct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readString(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readString(dis);

					this.OCCURRENCEID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// String

				writeString(this.TAXONID, dos);

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + IDENTIFICATIONID);
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + TAXONID);
			sb.append(",OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(deter_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_deterStruct implements
			routines.system.IPersistableRow<row_deterStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String IDENTIFICATIONID;

		public String getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDENTIFICATIONID == null) ? 0
								: this.IDENTIFICATIONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_deterStruct other = (row_deterStruct) obj;

			if (this.IDENTIFICATIONID == null) {
				if (other.IDENTIFICATIONID != null)
					return false;

			} else if (!this.IDENTIFICATIONID.equals(other.IDENTIFICATIONID))

				return false;

			return true;
		}

		public void copyDataTo(row_deterStruct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;
			other.IDENTIFIEDBY = this.IDENTIFIEDBY;
			other.DATEIDENTIFIED = this.DATEIDENTIFIED;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.IDENTIFICATIONVERIFSTATUS = this.IDENTIFICATIONVERIFSTATUS;
			other.IDENTIFICATIONREMARKS = this.IDENTIFICATIONREMARKS;
			other.IDENTIFICATIONQUALIFIER = this.IDENTIFICATIONQUALIFIER;
			other.IDENTIFICATIONREFERENCES = this.IDENTIFICATIONREFERENCES;
			other.TYPESTATUS = this.TYPESTATUS;
			other.TAXONID = this.TAXONID;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCAIDENTIFICATIONID = this.DWCAIDENTIFICATIONID;

		}

		public void copyKeysDataTo(row_deterStruct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readString(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readByteArray(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + IDENTIFICATIONID);
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + String.valueOf(TAXONID));
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_deterStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String IDENTIFICATIONID;

		public String getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDENTIFICATIONID == null) ? 0
								: this.IDENTIFICATIONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_2 other = (OnRowsEndStructtAggregateRow_2) obj;

			if (this.IDENTIFICATIONID == null) {
				if (other.IDENTIFICATIONID != null)
					return false;

			} else if (!this.IDENTIFICATIONID.equals(other.IDENTIFICATIONID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_2 other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;
			other.IDENTIFIEDBY = this.IDENTIFIEDBY;
			other.DATEIDENTIFIED = this.DATEIDENTIFIED;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.IDENTIFICATIONVERIFSTATUS = this.IDENTIFICATIONVERIFSTATUS;
			other.IDENTIFICATIONREMARKS = this.IDENTIFICATIONREMARKS;
			other.IDENTIFICATIONQUALIFIER = this.IDENTIFICATIONQUALIFIER;
			other.IDENTIFICATIONREFERENCES = this.IDENTIFICATIONREFERENCES;
			other.TYPESTATUS = this.TYPESTATUS;
			other.TAXONID = this.TAXONID;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCAIDENTIFICATIONID = this.DWCAIDENTIFICATIONID;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_2 other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readString(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readByteArray(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + IDENTIFICATIONID);
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + String.valueOf(TAXONID));
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String IDENTIFICATIONID;

		public String getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDENTIFICATIONID == null) ? 0
								: this.IDENTIFICATIONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.IDENTIFICATIONID == null) {
				if (other.IDENTIFICATIONID != null)
					return false;

			} else if (!this.IDENTIFICATIONID.equals(other.IDENTIFICATIONID))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;
			other.IDENTIFIEDBY = this.IDENTIFIEDBY;
			other.DATEIDENTIFIED = this.DATEIDENTIFIED;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.IDENTIFICATIONVERIFSTATUS = this.IDENTIFICATIONVERIFSTATUS;
			other.IDENTIFICATIONREMARKS = this.IDENTIFICATIONREMARKS;
			other.IDENTIFICATIONQUALIFIER = this.IDENTIFICATIONQUALIFIER;
			other.IDENTIFICATIONREFERENCES = this.IDENTIFICATIONREFERENCES;
			other.TYPESTATUS = this.TYPESTATUS;
			other.TAXONID = this.TAXONID;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCAIDENTIFICATIONID = this.DWCAIDENTIFICATIONID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readString(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readByteArray(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + IDENTIFICATIONID);
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + String.valueOf(TAXONID));
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class determination_choicesStruct implements
			routines.system.IPersistableRow<determination_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String IDENTIFICATIONID;

		public String getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDENTIFICATIONID == null) ? 0
								: this.IDENTIFICATIONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final determination_choicesStruct other = (determination_choicesStruct) obj;

			if (this.IDENTIFICATIONID == null) {
				if (other.IDENTIFICATIONID != null)
					return false;

			} else if (!this.IDENTIFICATIONID.equals(other.IDENTIFICATIONID))

				return false;

			return true;
		}

		public void copyDataTo(determination_choicesStruct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;
			other.IDENTIFIEDBY = this.IDENTIFIEDBY;
			other.DATEIDENTIFIED = this.DATEIDENTIFIED;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.IDENTIFICATIONVERIFSTATUS = this.IDENTIFICATIONVERIFSTATUS;
			other.IDENTIFICATIONREMARKS = this.IDENTIFICATIONREMARKS;
			other.IDENTIFICATIONQUALIFIER = this.IDENTIFICATIONQUALIFIER;
			other.IDENTIFICATIONREFERENCES = this.IDENTIFICATIONREFERENCES;
			other.TYPESTATUS = this.TYPESTATUS;
			other.TAXONID = this.TAXONID;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCAIDENTIFICATIONID = this.DWCAIDENTIFICATIONID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(determination_choicesStruct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readString(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readByteArray(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + IDENTIFICATIONID);
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + String.valueOf(TAXONID));
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(determination_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_deterStruct implements
			routines.system.IPersistableRow<db_deterStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public byte[] IDENTIFICATIONID;

		public byte[] getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readByteArray(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readByteArray(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + String.valueOf(IDENTIFICATIONID));
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + String.valueOf(TAXONID));
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_deterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_2Struct implements
			routines.system.IPersistableRow<after_tOracleInput_2Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public byte[] IDENTIFICATIONID;

		public byte[] getIDENTIFICATIONID() {
			return this.IDENTIFICATIONID;
		}

		public String IDENTIFIEDBY;

		public String getIDENTIFIEDBY() {
			return this.IDENTIFIEDBY;
		}

		public java.util.Date DATEIDENTIFIED;

		public java.util.Date getDATEIDENTIFIED() {
			return this.DATEIDENTIFIED;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public BigDecimal IDENTIFICATIONVERIFSTATUS;

		public BigDecimal getIDENTIFICATIONVERIFSTATUS() {
			return this.IDENTIFICATIONVERIFSTATUS;
		}

		public String IDENTIFICATIONREMARKS;

		public String getIDENTIFICATIONREMARKS() {
			return this.IDENTIFICATIONREMARKS;
		}

		public String IDENTIFICATIONQUALIFIER;

		public String getIDENTIFICATIONQUALIFIER() {
			return this.IDENTIFICATIONQUALIFIER;
		}

		public String IDENTIFICATIONREFERENCES;

		public String getIDENTIFICATIONREFERENCES() {
			return this.IDENTIFICATIONREFERENCES;
		}

		public String TYPESTATUS;

		public String getTYPESTATUS() {
			return this.TYPESTATUS;
		}

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCAIDENTIFICATIONID;

		public String getDWCAIDENTIFICATIONID() {
			return this.DWCAIDENTIFICATIONID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ java.util.Arrays.hashCode(this.IDENTIFICATIONID);

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tOracleInput_2Struct other = (after_tOracleInput_2Struct) obj;

			if (!java.util.Arrays.equals(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID)) {
				return false;
			}

			return true;
		}

		public void copyDataTo(after_tOracleInput_2Struct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;
			other.IDENTIFIEDBY = this.IDENTIFIEDBY;
			other.DATEIDENTIFIED = this.DATEIDENTIFIED;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.IDENTIFICATIONVERIFSTATUS = this.IDENTIFICATIONVERIFSTATUS;
			other.IDENTIFICATIONREMARKS = this.IDENTIFICATIONREMARKS;
			other.IDENTIFICATIONQUALIFIER = this.IDENTIFICATIONQUALIFIER;
			other.IDENTIFICATIONREFERENCES = this.IDENTIFICATIONREFERENCES;
			other.TYPESTATUS = this.TYPESTATUS;
			other.TAXONID = this.TAXONID;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCAIDENTIFICATIONID = this.DWCAIDENTIFICATIONID;

		}

		public void copyKeysDataTo(after_tOracleInput_2Struct other) {

			other.IDENTIFICATIONID = this.IDENTIFICATIONID;

		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.IDENTIFICATIONID = readByteArray(dis);

					this.IDENTIFIEDBY = readString(dis);

					this.DATEIDENTIFIED = readDate(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.IDENTIFICATIONVERIFSTATUS = (BigDecimal) dis
							.readObject();

					this.IDENTIFICATIONREMARKS = readString(dis);

					this.IDENTIFICATIONQUALIFIER = readString(dis);

					this.IDENTIFICATIONREFERENCES = readString(dis);

					this.TYPESTATUS = readString(dis);

					this.TAXONID = readByteArray(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCAIDENTIFICATIONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.IDENTIFICATIONID, dos);

				// String

				writeString(this.IDENTIFIEDBY, dos);

				// java.util.Date

				writeDate(this.DATEIDENTIFIED, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// BigDecimal

				dos.writeObject(this.IDENTIFICATIONVERIFSTATUS);

				// String

				writeString(this.IDENTIFICATIONREMARKS, dos);

				// String

				writeString(this.IDENTIFICATIONQUALIFIER, dos);

				// String

				writeString(this.IDENTIFICATIONREFERENCES, dos);

				// String

				writeString(this.TYPESTATUS, dos);

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCAIDENTIFICATIONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICATIONID=" + String.valueOf(IDENTIFICATIONID));
			sb.append(",IDENTIFIEDBY=" + IDENTIFIEDBY);
			sb.append(",DATEIDENTIFIED=" + String.valueOf(DATEIDENTIFIED));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",IDENTIFICATIONVERIFSTATUS="
					+ String.valueOf(IDENTIFICATIONVERIFSTATUS));
			sb.append(",IDENTIFICATIONREMARKS=" + IDENTIFICATIONREMARKS);
			sb.append(",IDENTIFICATIONQUALIFIER=" + IDENTIFICATIONQUALIFIER);
			sb.append(",IDENTIFICATIONREFERENCES=" + IDENTIFICATIONREFERENCES);
			sb.append(",TYPESTATUS=" + TYPESTATUS);
			sb.append(",TAXONID=" + String.valueOf(TAXONID));
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCAIDENTIFICATIONID=" + DWCAIDENTIFICATIONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDENTIFICATIONID,
					other.IDENTIFICATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				db_deterStruct db_deter = new db_deterStruct();
				determination_choicesStruct determination_choices = new determination_choicesStruct();
				determination_choicesStruct row15 = determination_choices;
				row_deterStruct row_deter = new row_deterStruct();
				deter_to_csvStruct deter_to_csv = new deter_to_csvStruct();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				int tos_count_tAggregateRow_2_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String IDENTIFICATIONID;
					String IDENTIFIEDBY;
					java.util.Date DATEIDENTIFIED;
					java.util.Date CREATED;
					java.util.Date MODIFIED;
					BigDecimal IDENTIFICATIONVERIFSTATUS;
					String IDENTIFICATIONREMARKS;
					String IDENTIFICATIONQUALIFIER;
					String IDENTIFICATIONREFERENCES;
					String TYPESTATUS;
					byte[] TAXONID;
					byte[] OCCURRENCEID;
					String SOURCEFILEID;
					String DWCAIDENTIFICATIONID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.IDENTIFICATIONID == null) ? 0
											: this.IDENTIFICATIONID.hashCode());

							result = prime
									* result
									+ ((this.IDENTIFIEDBY == null) ? 0
											: this.IDENTIFIEDBY.hashCode());

							result = prime
									* result
									+ ((this.DATEIDENTIFIED == null) ? 0
											: this.DATEIDENTIFIED.hashCode());

							result = prime
									* result
									+ ((this.CREATED == null) ? 0
											: this.CREATED.hashCode());

							result = prime
									* result
									+ ((this.MODIFIED == null) ? 0
											: this.MODIFIED.hashCode());

							result = prime
									* result
									+ ((this.IDENTIFICATIONVERIFSTATUS == null) ? 0
											: this.IDENTIFICATIONVERIFSTATUS
													.hashCode());

							result = prime
									* result
									+ ((this.IDENTIFICATIONREMARKS == null) ? 0
											: this.IDENTIFICATIONREMARKS
													.hashCode());

							result = prime
									* result
									+ ((this.IDENTIFICATIONQUALIFIER == null) ? 0
											: this.IDENTIFICATIONQUALIFIER
													.hashCode());

							result = prime
									* result
									+ ((this.IDENTIFICATIONREFERENCES == null) ? 0
											: this.IDENTIFICATIONREFERENCES
													.hashCode());

							result = prime
									* result
									+ ((this.TYPESTATUS == null) ? 0
											: this.TYPESTATUS.hashCode());

							result = prime * result
									+ java.util.Arrays.hashCode(this.TAXONID);

							result = prime
									* result
									+ java.util.Arrays
											.hashCode(this.OCCURRENCEID);

							result = prime
									* result
									+ ((this.SOURCEFILEID == null) ? 0
											: this.SOURCEFILEID.hashCode());

							result = prime
									* result
									+ ((this.DWCAIDENTIFICATIONID == null) ? 0
											: this.DWCAIDENTIFICATIONID
													.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.IDENTIFICATIONID == null) {
							if (other.IDENTIFICATIONID != null)
								return false;
						} else if (!this.IDENTIFICATIONID
								.equals(other.IDENTIFICATIONID))
							return false;

						if (this.IDENTIFIEDBY == null) {
							if (other.IDENTIFIEDBY != null)
								return false;
						} else if (!this.IDENTIFIEDBY
								.equals(other.IDENTIFIEDBY))
							return false;

						if (this.DATEIDENTIFIED == null) {
							if (other.DATEIDENTIFIED != null)
								return false;
						} else if (!this.DATEIDENTIFIED
								.equals(other.DATEIDENTIFIED))
							return false;

						if (this.CREATED == null) {
							if (other.CREATED != null)
								return false;
						} else if (!this.CREATED.equals(other.CREATED))
							return false;

						if (this.MODIFIED == null) {
							if (other.MODIFIED != null)
								return false;
						} else if (!this.MODIFIED.equals(other.MODIFIED))
							return false;

						if (this.IDENTIFICATIONVERIFSTATUS == null) {
							if (other.IDENTIFICATIONVERIFSTATUS != null)
								return false;
						} else if (!this.IDENTIFICATIONVERIFSTATUS
								.equals(other.IDENTIFICATIONVERIFSTATUS))
							return false;

						if (this.IDENTIFICATIONREMARKS == null) {
							if (other.IDENTIFICATIONREMARKS != null)
								return false;
						} else if (!this.IDENTIFICATIONREMARKS
								.equals(other.IDENTIFICATIONREMARKS))
							return false;

						if (this.IDENTIFICATIONQUALIFIER == null) {
							if (other.IDENTIFICATIONQUALIFIER != null)
								return false;
						} else if (!this.IDENTIFICATIONQUALIFIER
								.equals(other.IDENTIFICATIONQUALIFIER))
							return false;

						if (this.IDENTIFICATIONREFERENCES == null) {
							if (other.IDENTIFICATIONREFERENCES != null)
								return false;
						} else if (!this.IDENTIFICATIONREFERENCES
								.equals(other.IDENTIFICATIONREFERENCES))
							return false;

						if (this.TYPESTATUS == null) {
							if (other.TYPESTATUS != null)
								return false;
						} else if (!this.TYPESTATUS.equals(other.TYPESTATUS))
							return false;

						if (!java.util.Arrays.equals(this.TAXONID,
								other.TAXONID)) {
							return false;
						}

						if (!java.util.Arrays.equals(this.OCCURRENCEID,
								other.OCCURRENCEID)) {
							return false;
						}

						if (this.SOURCEFILEID == null) {
							if (other.SOURCEFILEID != null)
								return false;
						} else if (!this.SOURCEFILEID
								.equals(other.SOURCEFILEID))
							return false;

						if (this.DWCAIDENTIFICATIONID == null) {
							if (other.DWCAIDENTIFICATIONID != null)
								return false;
						} else if (!this.DWCAIDENTIFICATIONID
								.equals(other.DWCAIDENTIFICATIONID))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tMemorizeRows_2 begin ] start
				 */

				ok_Hash.put("tMemorizeRows_2", false);
				start_Hash.put("tMemorizeRows_2", System.currentTimeMillis());

				currentComponent = "tMemorizeRows_2";

				int tos_count_tMemorizeRows_2 = 0;

				int iRows_tMemorizeRows_2 = 50;
				String[] IDENTIFICATIONID_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_IDENTIFICATIONID",
						IDENTIFICATIONID_tMemorizeRows_2);
				String[] IDENTIFIEDBY_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_IDENTIFIEDBY",
						IDENTIFIEDBY_tMemorizeRows_2);
				java.util.Date[] DATEIDENTIFIED_tMemorizeRows_2 = new java.util.Date[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_DATEIDENTIFIED",
						DATEIDENTIFIED_tMemorizeRows_2);
				java.util.Date[] CREATED_tMemorizeRows_2 = new java.util.Date[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_CREATED",
						CREATED_tMemorizeRows_2);
				java.util.Date[] MODIFIED_tMemorizeRows_2 = new java.util.Date[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_MODIFIED",
						MODIFIED_tMemorizeRows_2);
				BigDecimal[] IDENTIFICATIONVERIFSTATUS_tMemorizeRows_2 = new BigDecimal[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_IDENTIFICATIONVERIFSTATUS",
						IDENTIFICATIONVERIFSTATUS_tMemorizeRows_2);
				String[] IDENTIFICATIONREMARKS_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_IDENTIFICATIONREMARKS",
						IDENTIFICATIONREMARKS_tMemorizeRows_2);
				String[] IDENTIFICATIONQUALIFIER_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_IDENTIFICATIONQUALIFIER",
						IDENTIFICATIONQUALIFIER_tMemorizeRows_2);
				String[] IDENTIFICATIONREFERENCES_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_IDENTIFICATIONREFERENCES",
						IDENTIFICATIONREFERENCES_tMemorizeRows_2);
				String[] TYPESTATUS_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_TYPESTATUS",
						TYPESTATUS_tMemorizeRows_2);
				byte[][] TAXONID_tMemorizeRows_2 = new byte[iRows_tMemorizeRows_2][];
				globalMap.put("tMemorizeRows_2_TAXONID",
						TAXONID_tMemorizeRows_2);
				byte[][] OCCURRENCEID_tMemorizeRows_2 = new byte[iRows_tMemorizeRows_2][];
				globalMap.put("tMemorizeRows_2_OCCURRENCEID",
						OCCURRENCEID_tMemorizeRows_2);
				String[] SOURCEFILEID_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_SOURCEFILEID",
						SOURCEFILEID_tMemorizeRows_2);
				String[] DWCAIDENTIFICATIONID_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_DWCAIDENTIFICATIONID",
						DWCAIDENTIFICATIONID_tMemorizeRows_2);
				String[] fieldName_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_fieldName",
						fieldName_tMemorizeRows_2);
				String[] data_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
				globalMap.put("tMemorizeRows_2_data", data_tMemorizeRows_2);
				globalMap.put("tMemorizeRows_2_NB_LINE_ROWS",
						iRows_tMemorizeRows_2);

				/**
				 * [tMemorizeRows_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<deter_choicesStruct> tHash_Lookup_deter_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<deter_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<deter_choicesStruct>) globalMap
						.get("tHash_Lookup_deter_choices"));

				deter_choicesStruct deter_choicesHashKey = new deter_choicesStruct();
				deter_choicesStruct deter_choicesDefault = new deter_choicesStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				determination_choicesStruct determination_choices_tmp = new determination_choicesStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tOracleInput_2 begin ] start
				 */

				ok_Hash.put("tOracleInput_2", false);
				start_Hash.put("tOracleInput_2", System.currentTimeMillis());

				currentComponent = "tOracleInput_2";

				int tos_count_tOracleInput_2 = 0;

				int nb_line_tOracleInput_2 = 0;
				java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);

				String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@"
						+ context.recolnat_Server + ":" + context.recolnat_Port
						+ ":" + context.recolnat_Sid;

				String dbUser_tOracleInput_2 = context.recolnat_Login;

				final String decryptedPassword_tOracleInput_2 = context.recolnat_Password;

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				java.util.Properties atnParamsPrope_tOracleInput_2 = new java.util.Properties();
				atnParamsPrope_tOracleInput_2
						.put("user", dbUser_tOracleInput_2);
				atnParamsPrope_tOracleInput_2.put("password",
						dbPwd_tOracleInput_2);
				if (context.recolnat_AdditionalParams != null
						&& !"\"\"".equals(context.recolnat_AdditionalParams)
						&& !"".equals(context.recolnat_AdditionalParams)) {
					atnParamsPrope_tOracleInput_2
							.load(new java.io.ByteArrayInputStream(
									context.recolnat_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}
				conn_tOracleInput_2 = java.sql.DriverManager.getConnection(
						url_tOracleInput_2, atnParamsPrope_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_2)
						.setSessionTimeZone(sessionTimezone_tOracleInput_2);

				java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();

				String dbquery_tOracleInput_2 = "SELECT \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.IDENTIFICATIONID, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.IDENTIFIEDBY, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.DATEIDENTIFIED, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.CREATED, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.MODIFIED, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.IDENTIFICATIONVERIFSTATUS, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.IDENTIFICATIONREMARKS, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.IDENTIFICATIONQUALIFIER, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.IDENTIFICATIONREFERENCES, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.TYPESTATUS, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.TAXONID, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.OCCURRENCEID, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.SOURCEFILEID, \n  "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS.DWCAIDENTIFICATIONID\nFROM "
						+ context.recolnat_Schema
						+ ".DETERMINATIONS\nWHERE OCCURRENCEID='"
						+ ((String) globalMap.get("occurrenceId")) + "'";

				globalMap.put("tOracleInput_2_QUERY", dbquery_tOracleInput_2);

				java.sql.ResultSet rs_tOracleInput_2 = null;
				try {
					rs_tOracleInput_2 = stmt_tOracleInput_2
							.executeQuery(dbquery_tOracleInput_2);
					java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2
							.getMetaData();
					int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2
							.getColumnCount();

					String tmpContent_tOracleInput_2 = null;

					while (rs_tOracleInput_2.next()) {
						nb_line_tOracleInput_2++;

						if (colQtyInRs_tOracleInput_2 < 1) {
							db_deter.IDENTIFICATIONID = null;
						} else {

							if (rs_tOracleInput_2.getObject(1) != null) {
								db_deter.IDENTIFICATIONID = rs_tOracleInput_2
										.getBytes(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_2 < 2) {
							db_deter.IDENTIFIEDBY = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(2);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.IDENTIFIEDBY = tmpContent_tOracleInput_2;
							} else {
								db_deter.IDENTIFIEDBY = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 3) {
							db_deter.DATEIDENTIFIED = null;
						} else {

							if (rs_tOracleInput_2.getTimestamp(3) != null) {
								db_deter.DATEIDENTIFIED = new java.util.Date(
										rs_tOracleInput_2.getTimestamp(3)
												.getTime());
							} else {
								db_deter.DATEIDENTIFIED = null;
							}

						}
						if (colQtyInRs_tOracleInput_2 < 4) {
							db_deter.CREATED = null;
						} else {

							if (rs_tOracleInput_2.getTimestamp(4) != null) {
								db_deter.CREATED = new java.util.Date(
										rs_tOracleInput_2.getTimestamp(4)
												.getTime());
							} else {
								db_deter.CREATED = null;
							}

						}
						if (colQtyInRs_tOracleInput_2 < 5) {
							db_deter.MODIFIED = null;
						} else {

							if (rs_tOracleInput_2.getTimestamp(5) != null) {
								db_deter.MODIFIED = new java.util.Date(
										rs_tOracleInput_2.getTimestamp(5)
												.getTime());
							} else {
								db_deter.MODIFIED = null;
							}

						}
						if (colQtyInRs_tOracleInput_2 < 6) {
							db_deter.IDENTIFICATIONVERIFSTATUS = null;
						} else {

							if (rs_tOracleInput_2.getObject(6) != null) {
								db_deter.IDENTIFICATIONVERIFSTATUS = rs_tOracleInput_2
										.getBigDecimal(6);
							} else {

								db_deter.IDENTIFICATIONVERIFSTATUS = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 7) {
							db_deter.IDENTIFICATIONREMARKS = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(7);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.IDENTIFICATIONREMARKS = tmpContent_tOracleInput_2;
							} else {
								db_deter.IDENTIFICATIONREMARKS = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 8) {
							db_deter.IDENTIFICATIONQUALIFIER = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(8);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.IDENTIFICATIONQUALIFIER = tmpContent_tOracleInput_2;
							} else {
								db_deter.IDENTIFICATIONQUALIFIER = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 9) {
							db_deter.IDENTIFICATIONREFERENCES = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(9);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.IDENTIFICATIONREFERENCES = tmpContent_tOracleInput_2;
							} else {
								db_deter.IDENTIFICATIONREFERENCES = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 10) {
							db_deter.TYPESTATUS = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(10);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.TYPESTATUS = tmpContent_tOracleInput_2;
							} else {
								db_deter.TYPESTATUS = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 11) {
							db_deter.TAXONID = null;
						} else {

							if (rs_tOracleInput_2.getObject(11) != null) {
								db_deter.TAXONID = rs_tOracleInput_2
										.getBytes(11);
							} else {

								db_deter.TAXONID = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 12) {
							db_deter.OCCURRENCEID = null;
						} else {

							if (rs_tOracleInput_2.getObject(12) != null) {
								db_deter.OCCURRENCEID = rs_tOracleInput_2
										.getBytes(12);
							} else {

								db_deter.OCCURRENCEID = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 13) {
							db_deter.SOURCEFILEID = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(13);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.SOURCEFILEID = tmpContent_tOracleInput_2;
							} else {
								db_deter.SOURCEFILEID = null;
							}
						}
						if (colQtyInRs_tOracleInput_2 < 14) {
							db_deter.DWCAIDENTIFICATIONID = null;
						} else {

							tmpContent_tOracleInput_2 = rs_tOracleInput_2
									.getString(14);
							if (tmpContent_tOracleInput_2 != null) {
								db_deter.DWCAIDENTIFICATIONID = tmpContent_tOracleInput_2;
							} else {
								db_deter.DWCAIDENTIFICATIONID = null;
							}
						}

						/**
						 * [tOracleInput_2 begin ] stop
						 */

						/**
						 * [tOracleInput_2 main ] start
						 */

						currentComponent = "tOracleInput_2";

						tos_count_tOracleInput_2++;

						/**
						 * [tOracleInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "deter_choices"
						// /////////////////////////////////////////////

						boolean forceLoopdeter_choices = false;

						deter_choicesStruct deter_choicesObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							deter_choicesHashKey.className = "Determination";

							deter_choicesHashKey.relationId = javax.xml.bind.DatatypeConverter
									.printHexBinary(db_deter.IDENTIFICATIONID);

							deter_choicesHashKey.hashCodeDirty = true;

							tHash_Lookup_deter_choices
									.lookup(deter_choicesHashKey);

							if (!tHash_Lookup_deter_choices.hasNext()) { // G_TM_M_090

								forceLoopdeter_choices = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLoopdeter_choices = true;
						} // G 21

						deter_choicesStruct deter_choices = null;

						while ((tHash_Lookup_deter_choices != null && tHash_Lookup_deter_choices
								.hasNext()) || forceLoopdeter_choices) { // G_TM_M_043

							// CALL close loop of lookup 'deter_choices'

							deter_choicesStruct fromLookup_deter_choices = null;
							deter_choices = deter_choicesDefault;

							if (!forceLoopdeter_choices) { // G 46

								fromLookup_deter_choices = tHash_Lookup_deter_choices
										.next();

								if (fromLookup_deter_choices != null) {
									deter_choices = fromLookup_deter_choices;
								}

							} // G 46

							forceLoopdeter_choices = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								determination_choices = null;

								// # Output table : 'determination_choices'
								determination_choices_tmp.IDENTIFICATIONID = javax.xml.bind.DatatypeConverter
										.printHexBinary(db_deter.IDENTIFICATIONID);
								determination_choices_tmp.IDENTIFIEDBY = db_deter.IDENTIFIEDBY;
								determination_choices_tmp.DATEIDENTIFIED = db_deter.DATEIDENTIFIED;
								determination_choices_tmp.CREATED = db_deter.CREATED;
								determination_choices_tmp.MODIFIED = db_deter.MODIFIED;
								determination_choices_tmp.IDENTIFICATIONVERIFSTATUS = db_deter.IDENTIFICATIONVERIFSTATUS;
								determination_choices_tmp.IDENTIFICATIONREMARKS = db_deter.IDENTIFICATIONREMARKS;
								determination_choices_tmp.IDENTIFICATIONQUALIFIER = db_deter.IDENTIFICATIONQUALIFIER;
								determination_choices_tmp.IDENTIFICATIONREFERENCES = db_deter.IDENTIFICATIONREFERENCES;
								determination_choices_tmp.TYPESTATUS = db_deter.TYPESTATUS;
								determination_choices_tmp.TAXONID = db_deter.TAXONID;
								determination_choices_tmp.OCCURRENCEID = db_deter.OCCURRENCEID;
								determination_choices_tmp.SOURCEFILEID = db_deter.SOURCEFILEID;
								determination_choices_tmp.DWCAIDENTIFICATIONID = db_deter.DWCAIDENTIFICATIONID;
								determination_choices_tmp.fieldName = deter_choices.fieldName;
								determination_choices_tmp.data = deter_choices.data;
								determination_choices = determination_choices_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "determination_choices"
							if (determination_choices != null) {

								/**
								 * [tMemorizeRows_2 main ] start
								 */

								currentComponent = "tMemorizeRows_2";

								for (int i_tMemorizeRows_2 = iRows_tMemorizeRows_2 - 1; i_tMemorizeRows_2 > 0; i_tMemorizeRows_2--) {
									fieldName_tMemorizeRows_2[i_tMemorizeRows_2] = fieldName_tMemorizeRows_2[i_tMemorizeRows_2 - 1];
									data_tMemorizeRows_2[i_tMemorizeRows_2] = data_tMemorizeRows_2[i_tMemorizeRows_2 - 1];
								}
								fieldName_tMemorizeRows_2[0] = determination_choices.fieldName;
								data_tMemorizeRows_2[0] = determination_choices.data;

								row15 = determination_choices;

								tos_count_tMemorizeRows_2++;

								/**
								 * [tMemorizeRows_2 main ] stop
								 */

								/**
								 * [tAggregateRow_2_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_2";

								currentComponent = "tAggregateRow_2_AGGOUT";

								operation_finder_tAggregateRow_2.IDENTIFICATIONID = row15.IDENTIFICATIONID;
								operation_finder_tAggregateRow_2.IDENTIFIEDBY = row15.IDENTIFIEDBY;
								operation_finder_tAggregateRow_2.DATEIDENTIFIED = row15.DATEIDENTIFIED;
								operation_finder_tAggregateRow_2.CREATED = row15.CREATED;
								operation_finder_tAggregateRow_2.MODIFIED = row15.MODIFIED;
								operation_finder_tAggregateRow_2.IDENTIFICATIONVERIFSTATUS = row15.IDENTIFICATIONVERIFSTATUS;
								operation_finder_tAggregateRow_2.IDENTIFICATIONREMARKS = row15.IDENTIFICATIONREMARKS;
								operation_finder_tAggregateRow_2.IDENTIFICATIONQUALIFIER = row15.IDENTIFICATIONQUALIFIER;
								operation_finder_tAggregateRow_2.IDENTIFICATIONREFERENCES = row15.IDENTIFICATIONREFERENCES;
								operation_finder_tAggregateRow_2.TYPESTATUS = row15.TYPESTATUS;
								operation_finder_tAggregateRow_2.TAXONID = row15.TAXONID;
								operation_finder_tAggregateRow_2.OCCURRENCEID = row15.OCCURRENCEID;
								operation_finder_tAggregateRow_2.SOURCEFILEID = row15.SOURCEFILEID;
								operation_finder_tAggregateRow_2.DWCAIDENTIFICATIONID = row15.DWCAIDENTIFICATIONID;

								operation_finder_tAggregateRow_2.hashCodeDirty = true;

								operation_result_tAggregateRow_2 = hash_tAggregateRow_2
										.get(operation_finder_tAggregateRow_2);

								if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

									operation_result_tAggregateRow_2.IDENTIFICATIONID = operation_finder_tAggregateRow_2.IDENTIFICATIONID;
									operation_result_tAggregateRow_2.IDENTIFIEDBY = operation_finder_tAggregateRow_2.IDENTIFIEDBY;
									operation_result_tAggregateRow_2.DATEIDENTIFIED = operation_finder_tAggregateRow_2.DATEIDENTIFIED;
									operation_result_tAggregateRow_2.CREATED = operation_finder_tAggregateRow_2.CREATED;
									operation_result_tAggregateRow_2.MODIFIED = operation_finder_tAggregateRow_2.MODIFIED;
									operation_result_tAggregateRow_2.IDENTIFICATIONVERIFSTATUS = operation_finder_tAggregateRow_2.IDENTIFICATIONVERIFSTATUS;
									operation_result_tAggregateRow_2.IDENTIFICATIONREMARKS = operation_finder_tAggregateRow_2.IDENTIFICATIONREMARKS;
									operation_result_tAggregateRow_2.IDENTIFICATIONQUALIFIER = operation_finder_tAggregateRow_2.IDENTIFICATIONQUALIFIER;
									operation_result_tAggregateRow_2.IDENTIFICATIONREFERENCES = operation_finder_tAggregateRow_2.IDENTIFICATIONREFERENCES;
									operation_result_tAggregateRow_2.TYPESTATUS = operation_finder_tAggregateRow_2.TYPESTATUS;
									operation_result_tAggregateRow_2.TAXONID = operation_finder_tAggregateRow_2.TAXONID;
									operation_result_tAggregateRow_2.OCCURRENCEID = operation_finder_tAggregateRow_2.OCCURRENCEID;
									operation_result_tAggregateRow_2.SOURCEFILEID = operation_finder_tAggregateRow_2.SOURCEFILEID;
									operation_result_tAggregateRow_2.DWCAIDENTIFICATIONID = operation_finder_tAggregateRow_2.DWCAIDENTIFICATIONID;

									hash_tAggregateRow_2.put(
											operation_result_tAggregateRow_2,
											operation_result_tAggregateRow_2);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_2_AGGOUT++;

								/**
								 * [tAggregateRow_2_AGGOUT main ] stop
								 */

							} // End of branch "determination_choices"

						} // close loop of lookup 'deter_choices' // G_TM_M_043

						/**
						 * [tOracleInput_2 end ] start
						 */

						currentComponent = "tOracleInput_2";

					}
				} finally {
					stmt_tOracleInput_2.close();

					if (conn_tOracleInput_2 != null
							&& !conn_tOracleInput_2.isClosed()) {

						conn_tOracleInput_2.close();

					}

				}

				globalMap.put("tOracleInput_2_NB_LINE", nb_line_tOracleInput_2);

				ok_Hash.put("tOracleInput_2", true);
				end_Hash.put("tOracleInput_2", System.currentTimeMillis());

				/**
				 * [tOracleInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_deter_choices != null) {
					tHash_Lookup_deter_choices.endGet();
				}
				globalMap.remove("tHash_Lookup_deter_choices");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMemorizeRows_2 end ] start
				 */

				currentComponent = "tMemorizeRows_2";

				ok_Hash.put("tMemorizeRows_2", true);
				end_Hash.put("tMemorizeRows_2", System.currentTimeMillis());

				/**
				 * [tMemorizeRows_2 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.exportpath + "/determinations.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, true),
								"UTF-8"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("IDENTIFICATIONID");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("IDENTIFIEDBY");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("DATEIDENTIFIED");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("CREATED");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("MODIFIED");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2
							.write("IDENTIFICATIONVERIFSTATUS");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("IDENTIFICATIONREMARKS");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("IDENTIFICATIONQUALIFIER");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("IDENTIFICATIONREFERENCES");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("TYPESTATUS");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("TAXONID");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("OCCURRENCEID");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("SOURCEFILEID");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("DWCAIDENTIFICATIONID");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE",
						values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row_deter.IDENTIFICATIONID = aggregated_row_tAggregateRow_2.IDENTIFICATIONID;

					row_deter.IDENTIFIEDBY = aggregated_row_tAggregateRow_2.IDENTIFIEDBY;

					row_deter.DATEIDENTIFIED = aggregated_row_tAggregateRow_2.DATEIDENTIFIED;

					row_deter.CREATED = aggregated_row_tAggregateRow_2.CREATED;

					row_deter.MODIFIED = aggregated_row_tAggregateRow_2.MODIFIED;

					row_deter.IDENTIFICATIONVERIFSTATUS = aggregated_row_tAggregateRow_2.IDENTIFICATIONVERIFSTATUS;

					row_deter.IDENTIFICATIONREMARKS = aggregated_row_tAggregateRow_2.IDENTIFICATIONREMARKS;

					row_deter.IDENTIFICATIONQUALIFIER = aggregated_row_tAggregateRow_2.IDENTIFICATIONQUALIFIER;

					row_deter.IDENTIFICATIONREFERENCES = aggregated_row_tAggregateRow_2.IDENTIFICATIONREFERENCES;

					row_deter.TYPESTATUS = aggregated_row_tAggregateRow_2.TYPESTATUS;

					row_deter.TAXONID = aggregated_row_tAggregateRow_2.TAXONID;

					row_deter.OCCURRENCEID = aggregated_row_tAggregateRow_2.OCCURRENCEID;

					row_deter.SOURCEFILEID = aggregated_row_tAggregateRow_2.SOURCEFILEID;

					row_deter.DWCAIDENTIFICATIONID = aggregated_row_tAggregateRow_2.DWCAIDENTIFICATIONID;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					deter_to_csv.IDENTIFICATIONID = row_deter.IDENTIFICATIONID;
					deter_to_csv.IDENTIFIEDBY = row_deter.IDENTIFIEDBY;
					deter_to_csv.DATEIDENTIFIED = row_deter.DATEIDENTIFIED;
					deter_to_csv.CREATED = row_deter.CREATED;
					deter_to_csv.MODIFIED = row_deter.MODIFIED;
					deter_to_csv.IDENTIFICATIONVERIFSTATUS = row_deter.IDENTIFICATIONVERIFSTATUS;
					deter_to_csv.IDENTIFICATIONREMARKS = row_deter.IDENTIFICATIONREMARKS;
					deter_to_csv.IDENTIFICATIONQUALIFIER = row_deter.IDENTIFICATIONQUALIFIER;
					deter_to_csv.IDENTIFICATIONREFERENCES = row_deter.IDENTIFICATIONREFERENCES;
					deter_to_csv.TYPESTATUS = row_deter.TYPESTATUS;
					deter_to_csv.OCCURRENCEID = javax.xml.bind.DatatypeConverter
							.printHexBinary(row_deter.OCCURRENCEID);
					deter_to_csv.SOURCEFILEID = row_deter.SOURCEFILEID;

					if (row_deter.TAXONID != null) {
						deter_to_csv.TAXONID = javax.xml.bind.DatatypeConverter
								.printHexBinary(row_deter.TAXONID);
						globalMap.put("taxonId", deter_to_csv.TAXONID);
					} else {
						globalMap.put("taxonId", null);
					}
					ConversionString.setChoices(deter_to_csv,
							((String[]) globalMap
									.get("tMemorizeRows_2_fieldName")),
							(String[]) globalMap.get("tMemorizeRows_2_data"));

					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (deter_to_csv.IDENTIFICATIONID != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.IDENTIFICATIONID);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.IDENTIFIEDBY != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.IDENTIFIEDBY);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.DATEIDENTIFIED != null) {
						sb_tFileOutputDelimited_2.append(FormatterUtils
								.format_Date(deter_to_csv.DATEIDENTIFIED,
										"dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.CREATED != null) {
						sb_tFileOutputDelimited_2
								.append(FormatterUtils.format_Date(
										deter_to_csv.CREATED, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.MODIFIED != null) {
						sb_tFileOutputDelimited_2.append(FormatterUtils
								.format_Date(deter_to_csv.MODIFIED,
										"dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.IDENTIFICATIONVERIFSTATUS != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.IDENTIFICATIONVERIFSTATUS
										.setScale(0,
												java.math.RoundingMode.HALF_UP)
										.toPlainString());
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.IDENTIFICATIONREMARKS != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.IDENTIFICATIONREMARKS);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.IDENTIFICATIONQUALIFIER != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.IDENTIFICATIONQUALIFIER);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.IDENTIFICATIONREFERENCES != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.IDENTIFICATIONREFERENCES);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.TYPESTATUS != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.TYPESTATUS);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.TAXONID != null) {
						sb_tFileOutputDelimited_2.append(deter_to_csv.TAXONID);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.OCCURRENCEID != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.OCCURRENCEID);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.SOURCEFILEID != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.SOURCEFILEID);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (deter_to_csv.DWCAIDENTIFICATIONID != null) {
						sb_tFileOutputDelimited_2
								.append(deter_to_csv.DWCAIDENTIFICATIONID);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
							.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if ((String) globalMap.get("taxonId") != null) {

					tOracleInput_3Process(globalMap);
				}

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				tOracleInput_4Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_deter_choices");

			try {

				/**
				 * [tOracleInput_2 finally ] start
				 */

				currentComponent = "tOracleInput_2";

				/**
				 * [tOracleInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMemorizeRows_2 finally ] start
				 */

				currentComponent = "tMemorizeRows_2";

				/**
				 * [tMemorizeRows_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}

	public static class biblio_to_csvStruct implements
			routines.system.IPersistableRow<biblio_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String REFERENCEID;

		public String getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.REFERENCEID == null) ? 0 : this.REFERENCEID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final biblio_to_csvStruct other = (biblio_to_csvStruct) obj;

			if (this.REFERENCEID == null) {
				if (other.REFERENCEID != null)
					return false;

			} else if (!this.REFERENCEID.equals(other.REFERENCEID))

				return false;

			return true;
		}

		public void copyDataTo(biblio_to_csvStruct other) {

			other.REFERENCEID = this.REFERENCEID;
			other.IDENTIFIER = this.IDENTIFIER;
			other.BIBLIOGRAPHICCITATION = this.BIBLIOGRAPHICCITATION;
			other.TITLE = this.TITLE;
			other.CREATOR = this.CREATOR;
			other.DATE_PUBLICATION = this.DATE_PUBLICATION;
			other.SOURCE = this.SOURCE;
			other.DESCRIPTION = this.DESCRIPTION;
			other.SUBJECT = this.SUBJECT;
			other.LANGUAGE = this.LANGUAGE;
			other.RIGHTS = this.RIGHTS;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.TYPE = this.TYPE;
			other.OCCURRENCEID = this.OCCURRENCEID;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(biblio_to_csvStruct other) {

			other.REFERENCEID = this.REFERENCEID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readString(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readString(dis);

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + REFERENCEID);
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(biblio_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.REFERENCEID,
					other.REFERENCEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_biblioStruct implements
			routines.system.IPersistableRow<row_biblioStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String REFERENCEID;

		public String getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readString(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + REFERENCEID);
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_biblioStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String REFERENCEID;

		public String getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readString(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + REFERENCEID);
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String REFERENCEID;

		public String getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readString(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + REFERENCEID);
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rows_biblioStruct implements
			routines.system.IPersistableRow<rows_biblioStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String REFERENCEID;

		public String getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String OCCURRENCEID;

		public String getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readString(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + REFERENCEID);
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + OCCURRENCEID);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rows_biblioStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_biblioStruct implements
			routines.system.IPersistableRow<db_biblioStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public byte[] REFERENCEID;

		public byte[] getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readByteArray(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + String.valueOf(REFERENCEID));
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_biblioStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_4Struct implements
			routines.system.IPersistableRow<after_tOracleInput_4Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public byte[] REFERENCEID;

		public byte[] getREFERENCEID() {
			return this.REFERENCEID;
		}

		public String IDENTIFIER;

		public String getIDENTIFIER() {
			return this.IDENTIFIER;
		}

		public String BIBLIOGRAPHICCITATION;

		public String getBIBLIOGRAPHICCITATION() {
			return this.BIBLIOGRAPHICCITATION;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DATE_PUBLICATION;

		public String getDATE_PUBLICATION() {
			return this.DATE_PUBLICATION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String SUBJECT;

		public String getSUBJECT() {
			return this.SUBJECT;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public byte[] OCCURRENCEID;

		public byte[] getOCCURRENCEID() {
			return this.OCCURRENCEID;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.REFERENCEID = readByteArray(dis);

					this.IDENTIFIER = readString(dis);

					this.BIBLIOGRAPHICCITATION = readString(dis);

					this.TITLE = readString(dis);

					this.CREATOR = readString(dis);

					this.DATE_PUBLICATION = readString(dis);

					this.SOURCE = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.SUBJECT = readString(dis);

					this.LANGUAGE = readString(dis);

					this.RIGHTS = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.TYPE = readString(dis);

					this.OCCURRENCEID = readByteArray(dis);

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.REFERENCEID, dos);

				// String

				writeString(this.IDENTIFIER, dos);

				// String

				writeString(this.BIBLIOGRAPHICCITATION, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DATE_PUBLICATION, dos);

				// String

				writeString(this.SOURCE, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.SUBJECT, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.TYPE, dos);

				// byte[]

				writeByteArray(this.OCCURRENCEID, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFERENCEID=" + String.valueOf(REFERENCEID));
			sb.append(",IDENTIFIER=" + IDENTIFIER);
			sb.append(",BIBLIOGRAPHICCITATION=" + BIBLIOGRAPHICCITATION);
			sb.append(",TITLE=" + TITLE);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DATE_PUBLICATION=" + DATE_PUBLICATION);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SUBJECT=" + SUBJECT);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",TYPE=" + TYPE);
			sb.append(",OCCURRENCEID=" + String.valueOf(OCCURRENCEID));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				db_biblioStruct db_biblio = new db_biblioStruct();
				rows_biblioStruct rows_biblio = new rows_biblioStruct();
				rows_biblioStruct row2 = rows_biblio;
				row_biblioStruct row_biblio = new row_biblioStruct();
				biblio_to_csvStruct biblio_to_csv = new biblio_to_csvStruct();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				int tos_count_tAggregateRow_4_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String REFERENCEID;
					String IDENTIFIER;
					String BIBLIOGRAPHICCITATION;
					String TITLE;
					String CREATOR;
					String DATE_PUBLICATION;
					String SOURCE;
					String DESCRIPTION;
					String SUBJECT;
					String LANGUAGE;
					String RIGHTS;
					String TAXONREMARKS;
					String TYPE;
					String OCCURRENCEID;
					String SOURCEFILEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.REFERENCEID == null) ? 0
											: this.REFERENCEID.hashCode());

							result = prime
									* result
									+ ((this.IDENTIFIER == null) ? 0
											: this.IDENTIFIER.hashCode());

							result = prime
									* result
									+ ((this.BIBLIOGRAPHICCITATION == null) ? 0
											: this.BIBLIOGRAPHICCITATION
													.hashCode());

							result = prime
									* result
									+ ((this.TITLE == null) ? 0 : this.TITLE
											.hashCode());

							result = prime
									* result
									+ ((this.CREATOR == null) ? 0
											: this.CREATOR.hashCode());

							result = prime
									* result
									+ ((this.DATE_PUBLICATION == null) ? 0
											: this.DATE_PUBLICATION.hashCode());

							result = prime
									* result
									+ ((this.SOURCE == null) ? 0 : this.SOURCE
											.hashCode());

							result = prime
									* result
									+ ((this.DESCRIPTION == null) ? 0
											: this.DESCRIPTION.hashCode());

							result = prime
									* result
									+ ((this.SUBJECT == null) ? 0
											: this.SUBJECT.hashCode());

							result = prime
									* result
									+ ((this.LANGUAGE == null) ? 0
											: this.LANGUAGE.hashCode());

							result = prime
									* result
									+ ((this.RIGHTS == null) ? 0 : this.RIGHTS
											.hashCode());

							result = prime
									* result
									+ ((this.TAXONREMARKS == null) ? 0
											: this.TAXONREMARKS.hashCode());

							result = prime
									* result
									+ ((this.TYPE == null) ? 0 : this.TYPE
											.hashCode());

							result = prime
									* result
									+ ((this.OCCURRENCEID == null) ? 0
											: this.OCCURRENCEID.hashCode());

							result = prime
									* result
									+ ((this.SOURCEFILEID == null) ? 0
											: this.SOURCEFILEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.REFERENCEID == null) {
							if (other.REFERENCEID != null)
								return false;
						} else if (!this.REFERENCEID.equals(other.REFERENCEID))
							return false;

						if (this.IDENTIFIER == null) {
							if (other.IDENTIFIER != null)
								return false;
						} else if (!this.IDENTIFIER.equals(other.IDENTIFIER))
							return false;

						if (this.BIBLIOGRAPHICCITATION == null) {
							if (other.BIBLIOGRAPHICCITATION != null)
								return false;
						} else if (!this.BIBLIOGRAPHICCITATION
								.equals(other.BIBLIOGRAPHICCITATION))
							return false;

						if (this.TITLE == null) {
							if (other.TITLE != null)
								return false;
						} else if (!this.TITLE.equals(other.TITLE))
							return false;

						if (this.CREATOR == null) {
							if (other.CREATOR != null)
								return false;
						} else if (!this.CREATOR.equals(other.CREATOR))
							return false;

						if (this.DATE_PUBLICATION == null) {
							if (other.DATE_PUBLICATION != null)
								return false;
						} else if (!this.DATE_PUBLICATION
								.equals(other.DATE_PUBLICATION))
							return false;

						if (this.SOURCE == null) {
							if (other.SOURCE != null)
								return false;
						} else if (!this.SOURCE.equals(other.SOURCE))
							return false;

						if (this.DESCRIPTION == null) {
							if (other.DESCRIPTION != null)
								return false;
						} else if (!this.DESCRIPTION.equals(other.DESCRIPTION))
							return false;

						if (this.SUBJECT == null) {
							if (other.SUBJECT != null)
								return false;
						} else if (!this.SUBJECT.equals(other.SUBJECT))
							return false;

						if (this.LANGUAGE == null) {
							if (other.LANGUAGE != null)
								return false;
						} else if (!this.LANGUAGE.equals(other.LANGUAGE))
							return false;

						if (this.RIGHTS == null) {
							if (other.RIGHTS != null)
								return false;
						} else if (!this.RIGHTS.equals(other.RIGHTS))
							return false;

						if (this.TAXONREMARKS == null) {
							if (other.TAXONREMARKS != null)
								return false;
						} else if (!this.TAXONREMARKS
								.equals(other.TAXONREMARKS))
							return false;

						if (this.TYPE == null) {
							if (other.TYPE != null)
								return false;
						} else if (!this.TYPE.equals(other.TYPE))
							return false;

						if (this.OCCURRENCEID == null) {
							if (other.OCCURRENCEID != null)
								return false;
						} else if (!this.OCCURRENCEID
								.equals(other.OCCURRENCEID))
							return false;

						if (this.SOURCEFILEID == null) {
							if (other.SOURCEFILEID != null)
								return false;
						} else if (!this.SOURCEFILEID
								.equals(other.SOURCEFILEID))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tMemorizeRows_4 begin ] start
				 */

				ok_Hash.put("tMemorizeRows_4", false);
				start_Hash.put("tMemorizeRows_4", System.currentTimeMillis());

				currentComponent = "tMemorizeRows_4";

				int tos_count_tMemorizeRows_4 = 0;

				int iRows_tMemorizeRows_4 = 50;
				String[] REFERENCEID_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_REFERENCEID",
						REFERENCEID_tMemorizeRows_4);
				String[] IDENTIFIER_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_IDENTIFIER",
						IDENTIFIER_tMemorizeRows_4);
				String[] BIBLIOGRAPHICCITATION_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_BIBLIOGRAPHICCITATION",
						BIBLIOGRAPHICCITATION_tMemorizeRows_4);
				String[] TITLE_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_TITLE", TITLE_tMemorizeRows_4);
				String[] CREATOR_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_CREATOR",
						CREATOR_tMemorizeRows_4);
				String[] DATE_PUBLICATION_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_DATE_PUBLICATION",
						DATE_PUBLICATION_tMemorizeRows_4);
				String[] SOURCE_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_SOURCE", SOURCE_tMemorizeRows_4);
				String[] DESCRIPTION_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_DESCRIPTION",
						DESCRIPTION_tMemorizeRows_4);
				String[] SUBJECT_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_SUBJECT",
						SUBJECT_tMemorizeRows_4);
				String[] LANGUAGE_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_LANGUAGE",
						LANGUAGE_tMemorizeRows_4);
				String[] RIGHTS_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_RIGHTS", RIGHTS_tMemorizeRows_4);
				String[] TAXONREMARKS_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_TAXONREMARKS",
						TAXONREMARKS_tMemorizeRows_4);
				String[] TYPE_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_TYPE", TYPE_tMemorizeRows_4);
				String[] OCCURRENCEID_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_OCCURRENCEID",
						OCCURRENCEID_tMemorizeRows_4);
				String[] SOURCEFILEID_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_SOURCEFILEID",
						SOURCEFILEID_tMemorizeRows_4);
				String[] fieldName_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_fieldName",
						fieldName_tMemorizeRows_4);
				String[] data_tMemorizeRows_4 = new String[iRows_tMemorizeRows_4];
				globalMap.put("tMemorizeRows_4_data", data_tMemorizeRows_4);
				globalMap.put("tMemorizeRows_4_NB_LINE_ROWS",
						iRows_tMemorizeRows_4);

				/**
				 * [tMemorizeRows_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<biblio_choicesStruct> tHash_Lookup_biblio_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<biblio_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<biblio_choicesStruct>) globalMap
						.get("tHash_Lookup_biblio_choices"));

				biblio_choicesStruct biblio_choicesHashKey = new biblio_choicesStruct();
				biblio_choicesStruct biblio_choicesDefault = new biblio_choicesStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				rows_biblioStruct rows_biblio_tmp = new rows_biblioStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tOracleInput_4 begin ] start
				 */

				ok_Hash.put("tOracleInput_4", false);
				start_Hash.put("tOracleInput_4", System.currentTimeMillis());

				currentComponent = "tOracleInput_4";

				int tos_count_tOracleInput_4 = 0;

				int nb_line_tOracleInput_4 = 0;
				java.sql.Connection conn_tOracleInput_4 = null;
				String driverClass_tOracleInput_4 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_4);

				String url_tOracleInput_4 = null;
				url_tOracleInput_4 = "jdbc:oracle:thin:@"
						+ context.recolnat_Server + ":" + context.recolnat_Port
						+ ":" + context.recolnat_Sid;

				String dbUser_tOracleInput_4 = context.recolnat_Login;

				final String decryptedPassword_tOracleInput_4 = context.recolnat_Password;

				String dbPwd_tOracleInput_4 = decryptedPassword_tOracleInput_4;

				java.util.Properties atnParamsPrope_tOracleInput_4 = new java.util.Properties();
				atnParamsPrope_tOracleInput_4
						.put("user", dbUser_tOracleInput_4);
				atnParamsPrope_tOracleInput_4.put("password",
						dbPwd_tOracleInput_4);
				if (context.recolnat_AdditionalParams != null
						&& !"\"\"".equals(context.recolnat_AdditionalParams)
						&& !"".equals(context.recolnat_AdditionalParams)) {
					atnParamsPrope_tOracleInput_4
							.load(new java.io.ByteArrayInputStream(
									context.recolnat_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}
				conn_tOracleInput_4 = java.sql.DriverManager.getConnection(
						url_tOracleInput_4, atnParamsPrope_tOracleInput_4);
				java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_4 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_4.next()) {
					sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_4)
						.setSessionTimeZone(sessionTimezone_tOracleInput_4);

				java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4
						.createStatement();

				String dbquery_tOracleInput_4 = "SELECT \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.REFERENCEID, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.IDENTIFIER, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.BIBLIOGRAPHICCITATION, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.TITLE, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.CREATOR, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.DATE_PUBLICATION, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.SOURCE, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.DESCRIPTION, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.SUBJECT, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.LANGUAGE, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.RIGHTS, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.TAXONREMARKS, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.TYPE, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.OCCURRENCEID, \n  "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES.SOURCEFILEID\nFROM "
						+ context.recolnat_Schema
						+ ".BIBLIOGRAPHIES\nWHERE OCCURRENCEID='"
						+ ((String) globalMap.get("occurrenceId")) + "'";

				globalMap.put("tOracleInput_4_QUERY", dbquery_tOracleInput_4);

				java.sql.ResultSet rs_tOracleInput_4 = null;
				try {
					rs_tOracleInput_4 = stmt_tOracleInput_4
							.executeQuery(dbquery_tOracleInput_4);
					java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4
							.getMetaData();
					int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4
							.getColumnCount();

					String tmpContent_tOracleInput_4 = null;

					while (rs_tOracleInput_4.next()) {
						nb_line_tOracleInput_4++;

						if (colQtyInRs_tOracleInput_4 < 1) {
							db_biblio.REFERENCEID = null;
						} else {

							if (rs_tOracleInput_4.getObject(1) != null) {
								db_biblio.REFERENCEID = rs_tOracleInput_4
										.getBytes(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_4 < 2) {
							db_biblio.IDENTIFIER = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(2);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.IDENTIFIER = tmpContent_tOracleInput_4;
							} else {
								db_biblio.IDENTIFIER = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 3) {
							db_biblio.BIBLIOGRAPHICCITATION = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(3);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.BIBLIOGRAPHICCITATION = tmpContent_tOracleInput_4;
							} else {
								db_biblio.BIBLIOGRAPHICCITATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 4) {
							db_biblio.TITLE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(4);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.TITLE = tmpContent_tOracleInput_4;
							} else {
								db_biblio.TITLE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 5) {
							db_biblio.CREATOR = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(5);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.CREATOR = tmpContent_tOracleInput_4;
							} else {
								db_biblio.CREATOR = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 6) {
							db_biblio.DATE_PUBLICATION = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(6);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.DATE_PUBLICATION = tmpContent_tOracleInput_4;
							} else {
								db_biblio.DATE_PUBLICATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 7) {
							db_biblio.SOURCE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(7);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.SOURCE = tmpContent_tOracleInput_4;
							} else {
								db_biblio.SOURCE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 8) {
							db_biblio.DESCRIPTION = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(8);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.DESCRIPTION = tmpContent_tOracleInput_4;
							} else {
								db_biblio.DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 9) {
							db_biblio.SUBJECT = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(9);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.SUBJECT = tmpContent_tOracleInput_4;
							} else {
								db_biblio.SUBJECT = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 10) {
							db_biblio.LANGUAGE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(10);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.LANGUAGE = tmpContent_tOracleInput_4;
							} else {
								db_biblio.LANGUAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 11) {
							db_biblio.RIGHTS = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(11);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.RIGHTS = tmpContent_tOracleInput_4;
							} else {
								db_biblio.RIGHTS = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 12) {
							db_biblio.TAXONREMARKS = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(12);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.TAXONREMARKS = tmpContent_tOracleInput_4;
							} else {
								db_biblio.TAXONREMARKS = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 13) {
							db_biblio.TYPE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(13);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.TYPE = tmpContent_tOracleInput_4;
							} else {
								db_biblio.TYPE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 14) {
							db_biblio.OCCURRENCEID = null;
						} else {

							if (rs_tOracleInput_4.getObject(14) != null) {
								db_biblio.OCCURRENCEID = rs_tOracleInput_4
										.getBytes(14);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_4 < 15) {
							db_biblio.SOURCEFILEID = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4
									.getString(15);
							if (tmpContent_tOracleInput_4 != null) {
								db_biblio.SOURCEFILEID = tmpContent_tOracleInput_4;
							} else {
								db_biblio.SOURCEFILEID = null;
							}
						}

						/**
						 * [tOracleInput_4 begin ] stop
						 */

						/**
						 * [tOracleInput_4 main ] start
						 */

						currentComponent = "tOracleInput_4";

						tos_count_tOracleInput_4++;

						/**
						 * [tOracleInput_4 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "biblio_choices"
						// /////////////////////////////////////////////

						boolean forceLoopbiblio_choices = false;

						biblio_choicesStruct biblio_choicesObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							biblio_choicesHashKey.className = "Bibliography";

							biblio_choicesHashKey.relationId = javax.xml.bind.DatatypeConverter
									.printHexBinary(db_biblio.REFERENCEID);

							biblio_choicesHashKey.hashCodeDirty = true;

							tHash_Lookup_biblio_choices
									.lookup(biblio_choicesHashKey);

							if (!tHash_Lookup_biblio_choices.hasNext()) { // G_TM_M_090

								forceLoopbiblio_choices = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLoopbiblio_choices = true;
						} // G 21

						biblio_choicesStruct biblio_choices = null;

						while ((tHash_Lookup_biblio_choices != null && tHash_Lookup_biblio_choices
								.hasNext()) || forceLoopbiblio_choices) { // G_TM_M_043

							// CALL close loop of lookup 'biblio_choices'

							biblio_choicesStruct fromLookup_biblio_choices = null;
							biblio_choices = biblio_choicesDefault;

							if (!forceLoopbiblio_choices) { // G 46

								fromLookup_biblio_choices = tHash_Lookup_biblio_choices
										.next();

								if (fromLookup_biblio_choices != null) {
									biblio_choices = fromLookup_biblio_choices;
								}

							} // G 46

							forceLoopbiblio_choices = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								rows_biblio = null;

								// # Output table : 'rows_biblio'
								rows_biblio_tmp.REFERENCEID = javax.xml.bind.DatatypeConverter
										.printHexBinary(db_biblio.REFERENCEID);
								rows_biblio_tmp.IDENTIFIER = db_biblio.IDENTIFIER;
								rows_biblio_tmp.BIBLIOGRAPHICCITATION = db_biblio.BIBLIOGRAPHICCITATION;
								rows_biblio_tmp.TITLE = db_biblio.TITLE;
								rows_biblio_tmp.CREATOR = db_biblio.CREATOR;
								rows_biblio_tmp.DATE_PUBLICATION = db_biblio.DATE_PUBLICATION;
								rows_biblio_tmp.SOURCE = db_biblio.SOURCE;
								rows_biblio_tmp.DESCRIPTION = db_biblio.DESCRIPTION;
								rows_biblio_tmp.SUBJECT = db_biblio.SUBJECT;
								rows_biblio_tmp.LANGUAGE = db_biblio.LANGUAGE;
								rows_biblio_tmp.RIGHTS = db_biblio.RIGHTS;
								rows_biblio_tmp.TAXONREMARKS = db_biblio.TAXONREMARKS;
								rows_biblio_tmp.TYPE = db_biblio.TYPE;
								rows_biblio_tmp.OCCURRENCEID = javax.xml.bind.DatatypeConverter
										.printHexBinary(db_biblio.OCCURRENCEID);
								rows_biblio_tmp.SOURCEFILEID = db_biblio.SOURCEFILEID;
								rows_biblio_tmp.fieldName = biblio_choices.fieldName;
								rows_biblio_tmp.data = biblio_choices.data;
								rows_biblio = rows_biblio_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "rows_biblio"
							if (rows_biblio != null) {

								/**
								 * [tMemorizeRows_4 main ] start
								 */

								currentComponent = "tMemorizeRows_4";

								for (int i_tMemorizeRows_4 = iRows_tMemorizeRows_4 - 1; i_tMemorizeRows_4 > 0; i_tMemorizeRows_4--) {
									fieldName_tMemorizeRows_4[i_tMemorizeRows_4] = fieldName_tMemorizeRows_4[i_tMemorizeRows_4 - 1];
									data_tMemorizeRows_4[i_tMemorizeRows_4] = data_tMemorizeRows_4[i_tMemorizeRows_4 - 1];
								}
								fieldName_tMemorizeRows_4[0] = rows_biblio.fieldName;
								data_tMemorizeRows_4[0] = rows_biblio.data;

								row2 = rows_biblio;

								tos_count_tMemorizeRows_4++;

								/**
								 * [tMemorizeRows_4 main ] stop
								 */

								/**
								 * [tAggregateRow_4_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								operation_finder_tAggregateRow_4.REFERENCEID = row2.REFERENCEID;
								operation_finder_tAggregateRow_4.IDENTIFIER = row2.IDENTIFIER;
								operation_finder_tAggregateRow_4.BIBLIOGRAPHICCITATION = row2.BIBLIOGRAPHICCITATION;
								operation_finder_tAggregateRow_4.TITLE = row2.TITLE;
								operation_finder_tAggregateRow_4.CREATOR = row2.CREATOR;
								operation_finder_tAggregateRow_4.DATE_PUBLICATION = row2.DATE_PUBLICATION;
								operation_finder_tAggregateRow_4.SOURCE = row2.SOURCE;
								operation_finder_tAggregateRow_4.DESCRIPTION = row2.DESCRIPTION;
								operation_finder_tAggregateRow_4.SUBJECT = row2.SUBJECT;
								operation_finder_tAggregateRow_4.LANGUAGE = row2.LANGUAGE;
								operation_finder_tAggregateRow_4.RIGHTS = row2.RIGHTS;
								operation_finder_tAggregateRow_4.TAXONREMARKS = row2.TAXONREMARKS;
								operation_finder_tAggregateRow_4.TYPE = row2.TYPE;
								operation_finder_tAggregateRow_4.OCCURRENCEID = row2.OCCURRENCEID;
								operation_finder_tAggregateRow_4.SOURCEFILEID = row2.SOURCEFILEID;

								operation_finder_tAggregateRow_4.hashCodeDirty = true;

								operation_result_tAggregateRow_4 = hash_tAggregateRow_4
										.get(operation_finder_tAggregateRow_4);

								if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

									operation_result_tAggregateRow_4.REFERENCEID = operation_finder_tAggregateRow_4.REFERENCEID;
									operation_result_tAggregateRow_4.IDENTIFIER = operation_finder_tAggregateRow_4.IDENTIFIER;
									operation_result_tAggregateRow_4.BIBLIOGRAPHICCITATION = operation_finder_tAggregateRow_4.BIBLIOGRAPHICCITATION;
									operation_result_tAggregateRow_4.TITLE = operation_finder_tAggregateRow_4.TITLE;
									operation_result_tAggregateRow_4.CREATOR = operation_finder_tAggregateRow_4.CREATOR;
									operation_result_tAggregateRow_4.DATE_PUBLICATION = operation_finder_tAggregateRow_4.DATE_PUBLICATION;
									operation_result_tAggregateRow_4.SOURCE = operation_finder_tAggregateRow_4.SOURCE;
									operation_result_tAggregateRow_4.DESCRIPTION = operation_finder_tAggregateRow_4.DESCRIPTION;
									operation_result_tAggregateRow_4.SUBJECT = operation_finder_tAggregateRow_4.SUBJECT;
									operation_result_tAggregateRow_4.LANGUAGE = operation_finder_tAggregateRow_4.LANGUAGE;
									operation_result_tAggregateRow_4.RIGHTS = operation_finder_tAggregateRow_4.RIGHTS;
									operation_result_tAggregateRow_4.TAXONREMARKS = operation_finder_tAggregateRow_4.TAXONREMARKS;
									operation_result_tAggregateRow_4.TYPE = operation_finder_tAggregateRow_4.TYPE;
									operation_result_tAggregateRow_4.OCCURRENCEID = operation_finder_tAggregateRow_4.OCCURRENCEID;
									operation_result_tAggregateRow_4.SOURCEFILEID = operation_finder_tAggregateRow_4.SOURCEFILEID;

									hash_tAggregateRow_4.put(
											operation_result_tAggregateRow_4,
											operation_result_tAggregateRow_4);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_4_AGGOUT++;

								/**
								 * [tAggregateRow_4_AGGOUT main ] stop
								 */

							} // End of branch "rows_biblio"

						} // close loop of lookup 'biblio_choices' // G_TM_M_043

						/**
						 * [tOracleInput_4 end ] start
						 */

						currentComponent = "tOracleInput_4";

					}
				} finally {
					stmt_tOracleInput_4.close();

					if (conn_tOracleInput_4 != null
							&& !conn_tOracleInput_4.isClosed()) {

						conn_tOracleInput_4.close();

					}

				}

				globalMap.put("tOracleInput_4_NB_LINE", nb_line_tOracleInput_4);

				ok_Hash.put("tOracleInput_4", true);
				end_Hash.put("tOracleInput_4", System.currentTimeMillis());

				/**
				 * [tOracleInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_biblio_choices != null) {
					tHash_Lookup_biblio_choices.endGet();
				}
				globalMap.remove("tHash_Lookup_biblio_choices");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMemorizeRows_4 end ] start
				 */

				currentComponent = "tMemorizeRows_4";

				ok_Hash.put("tMemorizeRows_4", true);
				end_Hash.put("tMemorizeRows_4", System.currentTimeMillis());

				/**
				 * [tMemorizeRows_4 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.exportpath + "/bibliographies.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					isFileGenerated_tFileOutputDelimited_4 = false;
				}
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				outtFileOutputDelimited_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_4, true),
								"UTF-8"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("REFERENCEID");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("IDENTIFIER");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("BIBLIOGRAPHICCITATION");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TITLE");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CREATOR");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DATE_PUBLICATION");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SOURCE");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DESCRIPTION");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SUBJECT");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("LANGUAGE");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("RIGHTS");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TAXONREMARKS");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TYPE");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("OCCURRENCEID");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SOURCEFILEID");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4",
						outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE",
						values_tAggregateRow_4.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					row_biblio.REFERENCEID = aggregated_row_tAggregateRow_4.REFERENCEID;

					row_biblio.IDENTIFIER = aggregated_row_tAggregateRow_4.IDENTIFIER;

					row_biblio.BIBLIOGRAPHICCITATION = aggregated_row_tAggregateRow_4.BIBLIOGRAPHICCITATION;

					row_biblio.TITLE = aggregated_row_tAggregateRow_4.TITLE;

					row_biblio.CREATOR = aggregated_row_tAggregateRow_4.CREATOR;

					row_biblio.DATE_PUBLICATION = aggregated_row_tAggregateRow_4.DATE_PUBLICATION;

					row_biblio.SOURCE = aggregated_row_tAggregateRow_4.SOURCE;

					row_biblio.DESCRIPTION = aggregated_row_tAggregateRow_4.DESCRIPTION;

					row_biblio.SUBJECT = aggregated_row_tAggregateRow_4.SUBJECT;

					row_biblio.LANGUAGE = aggregated_row_tAggregateRow_4.LANGUAGE;

					row_biblio.RIGHTS = aggregated_row_tAggregateRow_4.RIGHTS;

					row_biblio.TAXONREMARKS = aggregated_row_tAggregateRow_4.TAXONREMARKS;

					row_biblio.TYPE = aggregated_row_tAggregateRow_4.TYPE;

					row_biblio.OCCURRENCEID = aggregated_row_tAggregateRow_4.OCCURRENCEID;

					row_biblio.SOURCEFILEID = aggregated_row_tAggregateRow_4.SOURCEFILEID;

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tJavaRow_4 main ] start
					 */

					currentComponent = "tJavaRow_4";

					// Code généré selon le schémas d'entrée et de sortie
					biblio_to_csv.REFERENCEID = row_biblio.REFERENCEID;
					biblio_to_csv.IDENTIFIER = row_biblio.IDENTIFIER;
					biblio_to_csv.BIBLIOGRAPHICCITATION = row_biblio.BIBLIOGRAPHICCITATION;
					biblio_to_csv.TITLE = row_biblio.TITLE;
					biblio_to_csv.CREATOR = row_biblio.CREATOR;
					biblio_to_csv.DATE_PUBLICATION = row_biblio.DATE_PUBLICATION;
					biblio_to_csv.SOURCE = row_biblio.SOURCE;
					biblio_to_csv.DESCRIPTION = row_biblio.DESCRIPTION;
					biblio_to_csv.SUBJECT = row_biblio.SUBJECT;
					biblio_to_csv.LANGUAGE = row_biblio.LANGUAGE;
					biblio_to_csv.RIGHTS = row_biblio.RIGHTS;
					biblio_to_csv.TAXONREMARKS = row_biblio.TAXONREMARKS;
					biblio_to_csv.TYPE = row_biblio.TYPE;
					biblio_to_csv.OCCURRENCEID = row_biblio.OCCURRENCEID;
					biblio_to_csv.SOURCEFILEID = row_biblio.SOURCEFILEID;
					biblio_to_csv.SOURCEFILEID = row_biblio.fieldName;
					biblio_to_csv.SOURCEFILEID = row_biblio.data;

					ConversionString.setChoices(biblio_to_csv,
							((String[]) globalMap
									.get("tMemorizeRows_4_fieldName")),
							(String[]) globalMap.get("tMemorizeRows_4_data"));

					nb_line_tJavaRow_4++;

					tos_count_tJavaRow_4++;

					/**
					 * [tJavaRow_4 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 main ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
					if (biblio_to_csv.REFERENCEID != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.REFERENCEID);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.IDENTIFIER != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.IDENTIFIER);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.BIBLIOGRAPHICCITATION != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.BIBLIOGRAPHICCITATION);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.TITLE != null) {
						sb_tFileOutputDelimited_4.append(biblio_to_csv.TITLE);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.CREATOR != null) {
						sb_tFileOutputDelimited_4.append(biblio_to_csv.CREATOR);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.DATE_PUBLICATION != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.DATE_PUBLICATION);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.SOURCE != null) {
						sb_tFileOutputDelimited_4.append(biblio_to_csv.SOURCE);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.DESCRIPTION != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.DESCRIPTION);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.SUBJECT != null) {
						sb_tFileOutputDelimited_4.append(biblio_to_csv.SUBJECT);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.LANGUAGE != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.LANGUAGE);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.RIGHTS != null) {
						sb_tFileOutputDelimited_4.append(biblio_to_csv.RIGHTS);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.TAXONREMARKS != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.TAXONREMARKS);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.TYPE != null) {
						sb_tFileOutputDelimited_4.append(biblio_to_csv.TYPE);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.OCCURRENCEID != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.OCCURRENCEID);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_tFileOutputDelimited_4);
					if (biblio_to_csv.SOURCEFILEID != null) {
						sb_tFileOutputDelimited_4
								.append(biblio_to_csv.SOURCEFILEID);
					}
					sb_tFileOutputDelimited_4
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

					nb_line_tFileOutputDelimited_4++;
					resourceMap.put("nb_line_tFileOutputDelimited_4",
							nb_line_tFileOutputDelimited_4);

					outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4
							.toString());

					tos_count_tFileOutputDelimited_4++;

					/**
					 * [tFileOutputDelimited_4 main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				tOracleInput_5Process(globalMap);

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.remove("tAggregateRow_4");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_biblio_choices");

			try {

				/**
				 * [tOracleInput_4 finally ] start
				 */

				currentComponent = "tOracleInput_4";

				/**
				 * [tOracleInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMemorizeRows_4 finally ] start
				 */

				currentComponent = "tMemorizeRows_4";

				/**
				 * [tMemorizeRows_4 finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				/**
				 * [tAggregateRow_4_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				/**
				 * [tAggregateRow_4_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}

	public static class strati_to_csvStruct implements
			routines.system.IPersistableRow<strati_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GEOLOGICALCONTEXTID == null) ? 0
								: this.GEOLOGICALCONTEXTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final strati_to_csvStruct other = (strati_to_csvStruct) obj;

			if (this.GEOLOGICALCONTEXTID == null) {
				if (other.GEOLOGICALCONTEXTID != null)
					return false;

			} else if (!this.GEOLOGICALCONTEXTID
					.equals(other.GEOLOGICALCONTEXTID))

				return false;

			return true;
		}

		public void copyDataTo(strati_to_csvStruct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EARLIESTEONORLOWESTEONOTHEM = this.EARLIESTEONORLOWESTEONOTHEM;
			other.LATESTEONORHIGHESTEONOTHEM = this.LATESTEONORHIGHESTEONOTHEM;
			other.EARLIESTERAORLOWESTERATHEM = this.EARLIESTERAORLOWESTERATHEM;
			other.LATESTERAORHIGHESTERATHEM = this.LATESTERAORHIGHESTERATHEM;
			other.EARLIESTPERIODORLOWESTSYSTEM = this.EARLIESTPERIODORLOWESTSYSTEM;
			other.LATESTPERIODORHIGHESTSYSTEM = this.LATESTPERIODORHIGHESTSYSTEM;
			other.EARLIESTEPOCHORLOWESTSERIES = this.EARLIESTEPOCHORLOWESTSERIES;
			other.LATESTEPOCHORHIGHESTSERIES = this.LATESTEPOCHORHIGHESTSERIES;
			other.EARLIESTAGEORLOWESTSTAGE = this.EARLIESTAGEORLOWESTSTAGE;
			other.LATESTAGEORHIGHESTSTAGE = this.LATESTAGEORHIGHESTSTAGE;
			other.LOWESTBIOSTRATIGRAPHICZONE = this.LOWESTBIOSTRATIGRAPHICZONE;
			other.HIGHESTBIOSTRATIGRAPHICZONE = this.HIGHESTBIOSTRATIGRAPHICZONE;
			other.MEMBER = this.MEMBER;
			other.GROUP_ = this.GROUP_;
			other.BED = this.BED;
			other.FORMATION = this.FORMATION;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(strati_to_csvStruct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(strati_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.GEOLOGICALCONTEXTID,
					other.GEOLOGICALCONTEXTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_stratiStruct implements
			routines.system.IPersistableRow<row_stratiStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GEOLOGICALCONTEXTID == null) ? 0
								: this.GEOLOGICALCONTEXTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_stratiStruct other = (row_stratiStruct) obj;

			if (this.GEOLOGICALCONTEXTID == null) {
				if (other.GEOLOGICALCONTEXTID != null)
					return false;

			} else if (!this.GEOLOGICALCONTEXTID
					.equals(other.GEOLOGICALCONTEXTID))

				return false;

			return true;
		}

		public void copyDataTo(row_stratiStruct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EARLIESTEONORLOWESTEONOTHEM = this.EARLIESTEONORLOWESTEONOTHEM;
			other.LATESTEONORHIGHESTEONOTHEM = this.LATESTEONORHIGHESTEONOTHEM;
			other.EARLIESTERAORLOWESTERATHEM = this.EARLIESTERAORLOWESTERATHEM;
			other.LATESTERAORHIGHESTERATHEM = this.LATESTERAORHIGHESTERATHEM;
			other.EARLIESTPERIODORLOWESTSYSTEM = this.EARLIESTPERIODORLOWESTSYSTEM;
			other.LATESTPERIODORHIGHESTSYSTEM = this.LATESTPERIODORHIGHESTSYSTEM;
			other.EARLIESTEPOCHORLOWESTSERIES = this.EARLIESTEPOCHORLOWESTSERIES;
			other.LATESTEPOCHORHIGHESTSERIES = this.LATESTEPOCHORHIGHESTSERIES;
			other.EARLIESTAGEORLOWESTSTAGE = this.EARLIESTAGEORLOWESTSTAGE;
			other.LATESTAGEORHIGHESTSTAGE = this.LATESTAGEORHIGHESTSTAGE;
			other.LOWESTBIOSTRATIGRAPHICZONE = this.LOWESTBIOSTRATIGRAPHICZONE;
			other.HIGHESTBIOSTRATIGRAPHICZONE = this.HIGHESTBIOSTRATIGRAPHICZONE;
			other.MEMBER = this.MEMBER;
			other.GROUP_ = this.GROUP_;
			other.BED = this.BED;
			other.FORMATION = this.FORMATION;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row_stratiStruct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_stratiStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.GEOLOGICALCONTEXTID,
					other.GEOLOGICALCONTEXTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GEOLOGICALCONTEXTID == null) ? 0
								: this.GEOLOGICALCONTEXTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_5 other = (OnRowsEndStructtAggregateRow_5) obj;

			if (this.GEOLOGICALCONTEXTID == null) {
				if (other.GEOLOGICALCONTEXTID != null)
					return false;

			} else if (!this.GEOLOGICALCONTEXTID
					.equals(other.GEOLOGICALCONTEXTID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_5 other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EARLIESTEONORLOWESTEONOTHEM = this.EARLIESTEONORLOWESTEONOTHEM;
			other.LATESTEONORHIGHESTEONOTHEM = this.LATESTEONORHIGHESTEONOTHEM;
			other.EARLIESTERAORLOWESTERATHEM = this.EARLIESTERAORLOWESTERATHEM;
			other.LATESTERAORHIGHESTERATHEM = this.LATESTERAORHIGHESTERATHEM;
			other.EARLIESTPERIODORLOWESTSYSTEM = this.EARLIESTPERIODORLOWESTSYSTEM;
			other.LATESTPERIODORHIGHESTSYSTEM = this.LATESTPERIODORHIGHESTSYSTEM;
			other.EARLIESTEPOCHORLOWESTSERIES = this.EARLIESTEPOCHORLOWESTSERIES;
			other.LATESTEPOCHORHIGHESTSERIES = this.LATESTEPOCHORHIGHESTSERIES;
			other.EARLIESTAGEORLOWESTSTAGE = this.EARLIESTAGEORLOWESTSTAGE;
			other.LATESTAGEORHIGHESTSTAGE = this.LATESTAGEORHIGHESTSTAGE;
			other.LOWESTBIOSTRATIGRAPHICZONE = this.LOWESTBIOSTRATIGRAPHICZONE;
			other.HIGHESTBIOSTRATIGRAPHICZONE = this.HIGHESTBIOSTRATIGRAPHICZONE;
			other.MEMBER = this.MEMBER;
			other.GROUP_ = this.GROUP_;
			other.BED = this.BED;
			other.FORMATION = this.FORMATION;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_5 other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.GEOLOGICALCONTEXTID,
					other.GEOLOGICALCONTEXTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GEOLOGICALCONTEXTID == null) ? 0
								: this.GEOLOGICALCONTEXTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.GEOLOGICALCONTEXTID == null) {
				if (other.GEOLOGICALCONTEXTID != null)
					return false;

			} else if (!this.GEOLOGICALCONTEXTID
					.equals(other.GEOLOGICALCONTEXTID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EARLIESTEONORLOWESTEONOTHEM = this.EARLIESTEONORLOWESTEONOTHEM;
			other.LATESTEONORHIGHESTEONOTHEM = this.LATESTEONORHIGHESTEONOTHEM;
			other.EARLIESTERAORLOWESTERATHEM = this.EARLIESTERAORLOWESTERATHEM;
			other.LATESTERAORHIGHESTERATHEM = this.LATESTERAORHIGHESTERATHEM;
			other.EARLIESTPERIODORLOWESTSYSTEM = this.EARLIESTPERIODORLOWESTSYSTEM;
			other.LATESTPERIODORHIGHESTSYSTEM = this.LATESTPERIODORHIGHESTSYSTEM;
			other.EARLIESTEPOCHORLOWESTSERIES = this.EARLIESTEPOCHORLOWESTSERIES;
			other.LATESTEPOCHORHIGHESTSERIES = this.LATESTEPOCHORHIGHESTSERIES;
			other.EARLIESTAGEORLOWESTSTAGE = this.EARLIESTAGEORLOWESTSTAGE;
			other.LATESTAGEORHIGHESTSTAGE = this.LATESTAGEORHIGHESTSTAGE;
			other.LOWESTBIOSTRATIGRAPHICZONE = this.LOWESTBIOSTRATIGRAPHICZONE;
			other.HIGHESTBIOSTRATIGRAPHICZONE = this.HIGHESTBIOSTRATIGRAPHICZONE;
			other.MEMBER = this.MEMBER;
			other.GROUP_ = this.GROUP_;
			other.BED = this.BED;
			other.FORMATION = this.FORMATION;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.GEOLOGICALCONTEXTID,
					other.GEOLOGICALCONTEXTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rows_stratiStruct implements
			routines.system.IPersistableRow<rows_stratiStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GEOLOGICALCONTEXTID == null) ? 0
								: this.GEOLOGICALCONTEXTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rows_stratiStruct other = (rows_stratiStruct) obj;

			if (this.GEOLOGICALCONTEXTID == null) {
				if (other.GEOLOGICALCONTEXTID != null)
					return false;

			} else if (!this.GEOLOGICALCONTEXTID
					.equals(other.GEOLOGICALCONTEXTID))

				return false;

			return true;
		}

		public void copyDataTo(rows_stratiStruct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EARLIESTEONORLOWESTEONOTHEM = this.EARLIESTEONORLOWESTEONOTHEM;
			other.LATESTEONORHIGHESTEONOTHEM = this.LATESTEONORHIGHESTEONOTHEM;
			other.EARLIESTERAORLOWESTERATHEM = this.EARLIESTERAORLOWESTERATHEM;
			other.LATESTERAORHIGHESTERATHEM = this.LATESTERAORHIGHESTERATHEM;
			other.EARLIESTPERIODORLOWESTSYSTEM = this.EARLIESTPERIODORLOWESTSYSTEM;
			other.LATESTPERIODORHIGHESTSYSTEM = this.LATESTPERIODORHIGHESTSYSTEM;
			other.EARLIESTEPOCHORLOWESTSERIES = this.EARLIESTEPOCHORLOWESTSERIES;
			other.LATESTEPOCHORHIGHESTSERIES = this.LATESTEPOCHORHIGHESTSERIES;
			other.EARLIESTAGEORLOWESTSTAGE = this.EARLIESTAGEORLOWESTSTAGE;
			other.LATESTAGEORHIGHESTSTAGE = this.LATESTAGEORHIGHESTSTAGE;
			other.LOWESTBIOSTRATIGRAPHICZONE = this.LOWESTBIOSTRATIGRAPHICZONE;
			other.HIGHESTBIOSTRATIGRAPHICZONE = this.HIGHESTBIOSTRATIGRAPHICZONE;
			other.MEMBER = this.MEMBER;
			other.GROUP_ = this.GROUP_;
			other.BED = this.BED;
			other.FORMATION = this.FORMATION;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(rows_stratiStruct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rows_stratiStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.GEOLOGICALCONTEXTID,
					other.GEOLOGICALCONTEXTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_stratiStruct implements
			routines.system.IPersistableRow<db_stratiStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_stratiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_5Struct implements
			routines.system.IPersistableRow<after_tOracleInput_5Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal GEOLOGICALCONTEXTID;

		public BigDecimal getGEOLOGICALCONTEXTID() {
			return this.GEOLOGICALCONTEXTID;
		}

		public String EARLIESTEONORLOWESTEONOTHEM;

		public String getEARLIESTEONORLOWESTEONOTHEM() {
			return this.EARLIESTEONORLOWESTEONOTHEM;
		}

		public String LATESTEONORHIGHESTEONOTHEM;

		public String getLATESTEONORHIGHESTEONOTHEM() {
			return this.LATESTEONORHIGHESTEONOTHEM;
		}

		public String EARLIESTERAORLOWESTERATHEM;

		public String getEARLIESTERAORLOWESTERATHEM() {
			return this.EARLIESTERAORLOWESTERATHEM;
		}

		public String LATESTERAORHIGHESTERATHEM;

		public String getLATESTERAORHIGHESTERATHEM() {
			return this.LATESTERAORHIGHESTERATHEM;
		}

		public String EARLIESTPERIODORLOWESTSYSTEM;

		public String getEARLIESTPERIODORLOWESTSYSTEM() {
			return this.EARLIESTPERIODORLOWESTSYSTEM;
		}

		public String LATESTPERIODORHIGHESTSYSTEM;

		public String getLATESTPERIODORHIGHESTSYSTEM() {
			return this.LATESTPERIODORHIGHESTSYSTEM;
		}

		public String EARLIESTEPOCHORLOWESTSERIES;

		public String getEARLIESTEPOCHORLOWESTSERIES() {
			return this.EARLIESTEPOCHORLOWESTSERIES;
		}

		public String LATESTEPOCHORHIGHESTSERIES;

		public String getLATESTEPOCHORHIGHESTSERIES() {
			return this.LATESTEPOCHORHIGHESTSERIES;
		}

		public String EARLIESTAGEORLOWESTSTAGE;

		public String getEARLIESTAGEORLOWESTSTAGE() {
			return this.EARLIESTAGEORLOWESTSTAGE;
		}

		public String LATESTAGEORHIGHESTSTAGE;

		public String getLATESTAGEORHIGHESTSTAGE() {
			return this.LATESTAGEORHIGHESTSTAGE;
		}

		public String LOWESTBIOSTRATIGRAPHICZONE;

		public String getLOWESTBIOSTRATIGRAPHICZONE() {
			return this.LOWESTBIOSTRATIGRAPHICZONE;
		}

		public String HIGHESTBIOSTRATIGRAPHICZONE;

		public String getHIGHESTBIOSTRATIGRAPHICZONE() {
			return this.HIGHESTBIOSTRATIGRAPHICZONE;
		}

		public String MEMBER;

		public String getMEMBER() {
			return this.MEMBER;
		}

		public String GROUP_;

		public String getGROUP_() {
			return this.GROUP_;
		}

		public String BED;

		public String getBED() {
			return this.BED;
		}

		public String FORMATION;

		public String getFORMATION() {
			return this.FORMATION;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GEOLOGICALCONTEXTID == null) ? 0
								: this.GEOLOGICALCONTEXTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tOracleInput_5Struct other = (after_tOracleInput_5Struct) obj;

			if (this.GEOLOGICALCONTEXTID == null) {
				if (other.GEOLOGICALCONTEXTID != null)
					return false;

			} else if (!this.GEOLOGICALCONTEXTID
					.equals(other.GEOLOGICALCONTEXTID))

				return false;

			return true;
		}

		public void copyDataTo(after_tOracleInput_5Struct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;
			other.EARLIESTEONORLOWESTEONOTHEM = this.EARLIESTEONORLOWESTEONOTHEM;
			other.LATESTEONORHIGHESTEONOTHEM = this.LATESTEONORHIGHESTEONOTHEM;
			other.EARLIESTERAORLOWESTERATHEM = this.EARLIESTERAORLOWESTERATHEM;
			other.LATESTERAORHIGHESTERATHEM = this.LATESTERAORHIGHESTERATHEM;
			other.EARLIESTPERIODORLOWESTSYSTEM = this.EARLIESTPERIODORLOWESTSYSTEM;
			other.LATESTPERIODORHIGHESTSYSTEM = this.LATESTPERIODORHIGHESTSYSTEM;
			other.EARLIESTEPOCHORLOWESTSERIES = this.EARLIESTEPOCHORLOWESTSERIES;
			other.LATESTEPOCHORHIGHESTSERIES = this.LATESTEPOCHORHIGHESTSERIES;
			other.EARLIESTAGEORLOWESTSTAGE = this.EARLIESTAGEORLOWESTSTAGE;
			other.LATESTAGEORHIGHESTSTAGE = this.LATESTAGEORHIGHESTSTAGE;
			other.LOWESTBIOSTRATIGRAPHICZONE = this.LOWESTBIOSTRATIGRAPHICZONE;
			other.HIGHESTBIOSTRATIGRAPHICZONE = this.HIGHESTBIOSTRATIGRAPHICZONE;
			other.MEMBER = this.MEMBER;
			other.GROUP_ = this.GROUP_;
			other.BED = this.BED;
			other.FORMATION = this.FORMATION;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(after_tOracleInput_5Struct other) {

			other.GEOLOGICALCONTEXTID = this.GEOLOGICALCONTEXTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.GEOLOGICALCONTEXTID = (BigDecimal) dis.readObject();

					this.EARLIESTEONORLOWESTEONOTHEM = readString(dis);

					this.LATESTEONORHIGHESTEONOTHEM = readString(dis);

					this.EARLIESTERAORLOWESTERATHEM = readString(dis);

					this.LATESTERAORHIGHESTERATHEM = readString(dis);

					this.EARLIESTPERIODORLOWESTSYSTEM = readString(dis);

					this.LATESTPERIODORHIGHESTSYSTEM = readString(dis);

					this.EARLIESTEPOCHORLOWESTSERIES = readString(dis);

					this.LATESTEPOCHORHIGHESTSERIES = readString(dis);

					this.EARLIESTAGEORLOWESTSTAGE = readString(dis);

					this.LATESTAGEORHIGHESTSTAGE = readString(dis);

					this.LOWESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.HIGHESTBIOSTRATIGRAPHICZONE = readString(dis);

					this.MEMBER = readString(dis);

					this.GROUP_ = readString(dis);

					this.BED = readString(dis);

					this.FORMATION = readString(dis);

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.GEOLOGICALCONTEXTID);

				// String

				writeString(this.EARLIESTEONORLOWESTEONOTHEM, dos);

				// String

				writeString(this.LATESTEONORHIGHESTEONOTHEM, dos);

				// String

				writeString(this.EARLIESTERAORLOWESTERATHEM, dos);

				// String

				writeString(this.LATESTERAORHIGHESTERATHEM, dos);

				// String

				writeString(this.EARLIESTPERIODORLOWESTSYSTEM, dos);

				// String

				writeString(this.LATESTPERIODORHIGHESTSYSTEM, dos);

				// String

				writeString(this.EARLIESTEPOCHORLOWESTSERIES, dos);

				// String

				writeString(this.LATESTEPOCHORHIGHESTSERIES, dos);

				// String

				writeString(this.EARLIESTAGEORLOWESTSTAGE, dos);

				// String

				writeString(this.LATESTAGEORHIGHESTSTAGE, dos);

				// String

				writeString(this.LOWESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.HIGHESTBIOSTRATIGRAPHICZONE, dos);

				// String

				writeString(this.MEMBER, dos);

				// String

				writeString(this.GROUP_, dos);

				// String

				writeString(this.BED, dos);

				// String

				writeString(this.FORMATION, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GEOLOGICALCONTEXTID="
					+ String.valueOf(GEOLOGICALCONTEXTID));
			sb.append(",EARLIESTEONORLOWESTEONOTHEM="
					+ EARLIESTEONORLOWESTEONOTHEM);
			sb.append(",LATESTEONORHIGHESTEONOTHEM="
					+ LATESTEONORHIGHESTEONOTHEM);
			sb.append(",EARLIESTERAORLOWESTERATHEM="
					+ EARLIESTERAORLOWESTERATHEM);
			sb.append(",LATESTERAORHIGHESTERATHEM=" + LATESTERAORHIGHESTERATHEM);
			sb.append(",EARLIESTPERIODORLOWESTSYSTEM="
					+ EARLIESTPERIODORLOWESTSYSTEM);
			sb.append(",LATESTPERIODORHIGHESTSYSTEM="
					+ LATESTPERIODORHIGHESTSYSTEM);
			sb.append(",EARLIESTEPOCHORLOWESTSERIES="
					+ EARLIESTEPOCHORLOWESTSERIES);
			sb.append(",LATESTEPOCHORHIGHESTSERIES="
					+ LATESTEPOCHORHIGHESTSERIES);
			sb.append(",EARLIESTAGEORLOWESTSTAGE=" + EARLIESTAGEORLOWESTSTAGE);
			sb.append(",LATESTAGEORHIGHESTSTAGE=" + LATESTAGEORHIGHESTSTAGE);
			sb.append(",LOWESTBIOSTRATIGRAPHICZONE="
					+ LOWESTBIOSTRATIGRAPHICZONE);
			sb.append(",HIGHESTBIOSTRATIGRAPHICZONE="
					+ HIGHESTBIOSTRATIGRAPHICZONE);
			sb.append(",MEMBER=" + MEMBER);
			sb.append(",GROUP_=" + GROUP_);
			sb.append(",BED=" + BED);
			sb.append(",FORMATION=" + FORMATION);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.GEOLOGICALCONTEXTID,
					other.GEOLOGICALCONTEXTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				db_stratiStruct db_strati = new db_stratiStruct();
				rows_stratiStruct rows_strati = new rows_stratiStruct();
				rows_stratiStruct row3 = rows_strati;
				row_stratiStruct row_strati = new row_stratiStruct();
				strati_to_csvStruct strati_to_csv = new strati_to_csvStruct();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				int tos_count_tAggregateRow_5_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal GEOLOGICALCONTEXTID;
					String EARLIESTEONORLOWESTEONOTHEM;
					String LATESTEONORHIGHESTEONOTHEM;
					String EARLIESTERAORLOWESTERATHEM;
					String LATESTERAORHIGHESTERATHEM;
					String EARLIESTPERIODORLOWESTSYSTEM;
					String LATESTPERIODORHIGHESTSYSTEM;
					String EARLIESTEPOCHORLOWESTSERIES;
					String LATESTEPOCHORHIGHESTSERIES;
					String EARLIESTAGEORLOWESTSTAGE;
					String LATESTAGEORHIGHESTSTAGE;
					String LOWESTBIOSTRATIGRAPHICZONE;
					String HIGHESTBIOSTRATIGRAPHICZONE;
					String MEMBER;
					String GROUP_;
					String BED;
					String FORMATION;
					String SOURCEFILEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.GEOLOGICALCONTEXTID == null) ? 0
											: this.GEOLOGICALCONTEXTID
													.hashCode());

							result = prime
									* result
									+ ((this.EARLIESTEONORLOWESTEONOTHEM == null) ? 0
											: this.EARLIESTEONORLOWESTEONOTHEM
													.hashCode());

							result = prime
									* result
									+ ((this.LATESTEONORHIGHESTEONOTHEM == null) ? 0
											: this.LATESTEONORHIGHESTEONOTHEM
													.hashCode());

							result = prime
									* result
									+ ((this.EARLIESTERAORLOWESTERATHEM == null) ? 0
											: this.EARLIESTERAORLOWESTERATHEM
													.hashCode());

							result = prime
									* result
									+ ((this.LATESTERAORHIGHESTERATHEM == null) ? 0
											: this.LATESTERAORHIGHESTERATHEM
													.hashCode());

							result = prime
									* result
									+ ((this.EARLIESTPERIODORLOWESTSYSTEM == null) ? 0
											: this.EARLIESTPERIODORLOWESTSYSTEM
													.hashCode());

							result = prime
									* result
									+ ((this.LATESTPERIODORHIGHESTSYSTEM == null) ? 0
											: this.LATESTPERIODORHIGHESTSYSTEM
													.hashCode());

							result = prime
									* result
									+ ((this.EARLIESTEPOCHORLOWESTSERIES == null) ? 0
											: this.EARLIESTEPOCHORLOWESTSERIES
													.hashCode());

							result = prime
									* result
									+ ((this.LATESTEPOCHORHIGHESTSERIES == null) ? 0
											: this.LATESTEPOCHORHIGHESTSERIES
													.hashCode());

							result = prime
									* result
									+ ((this.EARLIESTAGEORLOWESTSTAGE == null) ? 0
											: this.EARLIESTAGEORLOWESTSTAGE
													.hashCode());

							result = prime
									* result
									+ ((this.LATESTAGEORHIGHESTSTAGE == null) ? 0
											: this.LATESTAGEORHIGHESTSTAGE
													.hashCode());

							result = prime
									* result
									+ ((this.LOWESTBIOSTRATIGRAPHICZONE == null) ? 0
											: this.LOWESTBIOSTRATIGRAPHICZONE
													.hashCode());

							result = prime
									* result
									+ ((this.HIGHESTBIOSTRATIGRAPHICZONE == null) ? 0
											: this.HIGHESTBIOSTRATIGRAPHICZONE
													.hashCode());

							result = prime
									* result
									+ ((this.MEMBER == null) ? 0 : this.MEMBER
											.hashCode());

							result = prime
									* result
									+ ((this.GROUP_ == null) ? 0 : this.GROUP_
											.hashCode());

							result = prime
									* result
									+ ((this.BED == null) ? 0 : this.BED
											.hashCode());

							result = prime
									* result
									+ ((this.FORMATION == null) ? 0
											: this.FORMATION.hashCode());

							result = prime
									* result
									+ ((this.SOURCEFILEID == null) ? 0
											: this.SOURCEFILEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.GEOLOGICALCONTEXTID == null) {
							if (other.GEOLOGICALCONTEXTID != null)
								return false;
						} else if (!this.GEOLOGICALCONTEXTID
								.equals(other.GEOLOGICALCONTEXTID))
							return false;

						if (this.EARLIESTEONORLOWESTEONOTHEM == null) {
							if (other.EARLIESTEONORLOWESTEONOTHEM != null)
								return false;
						} else if (!this.EARLIESTEONORLOWESTEONOTHEM
								.equals(other.EARLIESTEONORLOWESTEONOTHEM))
							return false;

						if (this.LATESTEONORHIGHESTEONOTHEM == null) {
							if (other.LATESTEONORHIGHESTEONOTHEM != null)
								return false;
						} else if (!this.LATESTEONORHIGHESTEONOTHEM
								.equals(other.LATESTEONORHIGHESTEONOTHEM))
							return false;

						if (this.EARLIESTERAORLOWESTERATHEM == null) {
							if (other.EARLIESTERAORLOWESTERATHEM != null)
								return false;
						} else if (!this.EARLIESTERAORLOWESTERATHEM
								.equals(other.EARLIESTERAORLOWESTERATHEM))
							return false;

						if (this.LATESTERAORHIGHESTERATHEM == null) {
							if (other.LATESTERAORHIGHESTERATHEM != null)
								return false;
						} else if (!this.LATESTERAORHIGHESTERATHEM
								.equals(other.LATESTERAORHIGHESTERATHEM))
							return false;

						if (this.EARLIESTPERIODORLOWESTSYSTEM == null) {
							if (other.EARLIESTPERIODORLOWESTSYSTEM != null)
								return false;
						} else if (!this.EARLIESTPERIODORLOWESTSYSTEM
								.equals(other.EARLIESTPERIODORLOWESTSYSTEM))
							return false;

						if (this.LATESTPERIODORHIGHESTSYSTEM == null) {
							if (other.LATESTPERIODORHIGHESTSYSTEM != null)
								return false;
						} else if (!this.LATESTPERIODORHIGHESTSYSTEM
								.equals(other.LATESTPERIODORHIGHESTSYSTEM))
							return false;

						if (this.EARLIESTEPOCHORLOWESTSERIES == null) {
							if (other.EARLIESTEPOCHORLOWESTSERIES != null)
								return false;
						} else if (!this.EARLIESTEPOCHORLOWESTSERIES
								.equals(other.EARLIESTEPOCHORLOWESTSERIES))
							return false;

						if (this.LATESTEPOCHORHIGHESTSERIES == null) {
							if (other.LATESTEPOCHORHIGHESTSERIES != null)
								return false;
						} else if (!this.LATESTEPOCHORHIGHESTSERIES
								.equals(other.LATESTEPOCHORHIGHESTSERIES))
							return false;

						if (this.EARLIESTAGEORLOWESTSTAGE == null) {
							if (other.EARLIESTAGEORLOWESTSTAGE != null)
								return false;
						} else if (!this.EARLIESTAGEORLOWESTSTAGE
								.equals(other.EARLIESTAGEORLOWESTSTAGE))
							return false;

						if (this.LATESTAGEORHIGHESTSTAGE == null) {
							if (other.LATESTAGEORHIGHESTSTAGE != null)
								return false;
						} else if (!this.LATESTAGEORHIGHESTSTAGE
								.equals(other.LATESTAGEORHIGHESTSTAGE))
							return false;

						if (this.LOWESTBIOSTRATIGRAPHICZONE == null) {
							if (other.LOWESTBIOSTRATIGRAPHICZONE != null)
								return false;
						} else if (!this.LOWESTBIOSTRATIGRAPHICZONE
								.equals(other.LOWESTBIOSTRATIGRAPHICZONE))
							return false;

						if (this.HIGHESTBIOSTRATIGRAPHICZONE == null) {
							if (other.HIGHESTBIOSTRATIGRAPHICZONE != null)
								return false;
						} else if (!this.HIGHESTBIOSTRATIGRAPHICZONE
								.equals(other.HIGHESTBIOSTRATIGRAPHICZONE))
							return false;

						if (this.MEMBER == null) {
							if (other.MEMBER != null)
								return false;
						} else if (!this.MEMBER.equals(other.MEMBER))
							return false;

						if (this.GROUP_ == null) {
							if (other.GROUP_ != null)
								return false;
						} else if (!this.GROUP_.equals(other.GROUP_))
							return false;

						if (this.BED == null) {
							if (other.BED != null)
								return false;
						} else if (!this.BED.equals(other.BED))
							return false;

						if (this.FORMATION == null) {
							if (other.FORMATION != null)
								return false;
						} else if (!this.FORMATION.equals(other.FORMATION))
							return false;

						if (this.SOURCEFILEID == null) {
							if (other.SOURCEFILEID != null)
								return false;
						} else if (!this.SOURCEFILEID
								.equals(other.SOURCEFILEID))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tMemorizeRows_5 begin ] start
				 */

				ok_Hash.put("tMemorizeRows_5", false);
				start_Hash.put("tMemorizeRows_5", System.currentTimeMillis());

				currentComponent = "tMemorizeRows_5";

				int tos_count_tMemorizeRows_5 = 0;

				int iRows_tMemorizeRows_5 = 50;
				BigDecimal[] GEOLOGICALCONTEXTID_tMemorizeRows_5 = new BigDecimal[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_GEOLOGICALCONTEXTID",
						GEOLOGICALCONTEXTID_tMemorizeRows_5);
				String[] EARLIESTEONORLOWESTEONOTHEM_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_EARLIESTEONORLOWESTEONOTHEM",
						EARLIESTEONORLOWESTEONOTHEM_tMemorizeRows_5);
				String[] LATESTEONORHIGHESTEONOTHEM_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_LATESTEONORHIGHESTEONOTHEM",
						LATESTEONORHIGHESTEONOTHEM_tMemorizeRows_5);
				String[] EARLIESTERAORLOWESTERATHEM_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_EARLIESTERAORLOWESTERATHEM",
						EARLIESTERAORLOWESTERATHEM_tMemorizeRows_5);
				String[] LATESTERAORHIGHESTERATHEM_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_LATESTERAORHIGHESTERATHEM",
						LATESTERAORHIGHESTERATHEM_tMemorizeRows_5);
				String[] EARLIESTPERIODORLOWESTSYSTEM_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_EARLIESTPERIODORLOWESTSYSTEM",
						EARLIESTPERIODORLOWESTSYSTEM_tMemorizeRows_5);
				String[] LATESTPERIODORHIGHESTSYSTEM_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_LATESTPERIODORHIGHESTSYSTEM",
						LATESTPERIODORHIGHESTSYSTEM_tMemorizeRows_5);
				String[] EARLIESTEPOCHORLOWESTSERIES_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_EARLIESTEPOCHORLOWESTSERIES",
						EARLIESTEPOCHORLOWESTSERIES_tMemorizeRows_5);
				String[] LATESTEPOCHORHIGHESTSERIES_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_LATESTEPOCHORHIGHESTSERIES",
						LATESTEPOCHORHIGHESTSERIES_tMemorizeRows_5);
				String[] EARLIESTAGEORLOWESTSTAGE_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_EARLIESTAGEORLOWESTSTAGE",
						EARLIESTAGEORLOWESTSTAGE_tMemorizeRows_5);
				String[] LATESTAGEORHIGHESTSTAGE_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_LATESTAGEORHIGHESTSTAGE",
						LATESTAGEORHIGHESTSTAGE_tMemorizeRows_5);
				String[] LOWESTBIOSTRATIGRAPHICZONE_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_LOWESTBIOSTRATIGRAPHICZONE",
						LOWESTBIOSTRATIGRAPHICZONE_tMemorizeRows_5);
				String[] HIGHESTBIOSTRATIGRAPHICZONE_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_HIGHESTBIOSTRATIGRAPHICZONE",
						HIGHESTBIOSTRATIGRAPHICZONE_tMemorizeRows_5);
				String[] MEMBER_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_MEMBER", MEMBER_tMemorizeRows_5);
				String[] GROUP__tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_GROUP_", GROUP__tMemorizeRows_5);
				String[] BED_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_BED", BED_tMemorizeRows_5);
				String[] FORMATION_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_FORMATION",
						FORMATION_tMemorizeRows_5);
				String[] SOURCEFILEID_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_SOURCEFILEID",
						SOURCEFILEID_tMemorizeRows_5);
				String[] fieldName_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_fieldName",
						fieldName_tMemorizeRows_5);
				String[] data_tMemorizeRows_5 = new String[iRows_tMemorizeRows_5];
				globalMap.put("tMemorizeRows_5_data", data_tMemorizeRows_5);
				globalMap.put("tMemorizeRows_5_NB_LINE_ROWS",
						iRows_tMemorizeRows_5);

				/**
				 * [tMemorizeRows_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<strati_choicesStruct> tHash_Lookup_strati_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<strati_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<strati_choicesStruct>) globalMap
						.get("tHash_Lookup_strati_choices"));

				strati_choicesStruct strati_choicesHashKey = new strati_choicesStruct();
				strati_choicesStruct strati_choicesDefault = new strati_choicesStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				rows_stratiStruct rows_strati_tmp = new rows_stratiStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tOracleInput_5 begin ] start
				 */

				ok_Hash.put("tOracleInput_5", false);
				start_Hash.put("tOracleInput_5", System.currentTimeMillis());

				currentComponent = "tOracleInput_5";

				int tos_count_tOracleInput_5 = 0;

				int nb_line_tOracleInput_5 = 0;
				java.sql.Connection conn_tOracleInput_5 = null;
				String driverClass_tOracleInput_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_5);

				String url_tOracleInput_5 = null;
				url_tOracleInput_5 = "jdbc:oracle:thin:@"
						+ context.recolnat_Server + ":" + context.recolnat_Port
						+ ":" + context.recolnat_Sid;

				String dbUser_tOracleInput_5 = context.recolnat_Login;

				final String decryptedPassword_tOracleInput_5 = context.recolnat_Password;

				String dbPwd_tOracleInput_5 = decryptedPassword_tOracleInput_5;

				java.util.Properties atnParamsPrope_tOracleInput_5 = new java.util.Properties();
				atnParamsPrope_tOracleInput_5
						.put("user", dbUser_tOracleInput_5);
				atnParamsPrope_tOracleInput_5.put("password",
						dbPwd_tOracleInput_5);
				if (context.recolnat_AdditionalParams != null
						&& !"\"\"".equals(context.recolnat_AdditionalParams)
						&& !"".equals(context.recolnat_AdditionalParams)) {
					atnParamsPrope_tOracleInput_5
							.load(new java.io.ByteArrayInputStream(
									context.recolnat_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}
				conn_tOracleInput_5 = java.sql.DriverManager.getConnection(
						url_tOracleInput_5, atnParamsPrope_tOracleInput_5);
				java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_5 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_5.next()) {
					sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_5)
						.setSessionTimeZone(sessionTimezone_tOracleInput_5);

				java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5
						.createStatement();

				String dbquery_tOracleInput_5 = "SELECT \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.GEOLOGICALCONTEXTID, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.EARLIESTEONORLOWESTEONOTHEM, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.LATESTEONORHIGHESTEONOTHEM, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.EARLIESTERAORLOWESTERATHEM, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.LATESTERAORHIGHESTERATHEM, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.EARLIESTPERIODORLOWESTSYSTEM, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.LATESTPERIODORHIGHESTSYSTEM, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.EARLIESTEPOCHORLOWESTSERIES, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.LATESTEPOCHORHIGHESTSERIES, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.EARLIESTAGEORLOWESTSTAGE, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.LATESTAGEORHIGHESTSTAGE, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.LOWESTBIOSTRATIGRAPHICZONE, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.HIGHESTBIOSTRATIGRAPHICZONE, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.MEMBER, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.GROUP_, \n  "
						+ context.recolnat_Schema + ".STRATIGRAPHIES.BED, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.FORMATION, \n  "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES.SOURCEFILEID\nFROM "
						+ context.recolnat_Schema
						+ ".STRATIGRAPHIES\nWHERE GEOLOGICALCONTEXTID="
						+ ((BigDecimal) globalMap.get("geologicalContextId"));

				globalMap.put("tOracleInput_5_QUERY", dbquery_tOracleInput_5);

				java.sql.ResultSet rs_tOracleInput_5 = null;
				try {
					rs_tOracleInput_5 = stmt_tOracleInput_5
							.executeQuery(dbquery_tOracleInput_5);
					java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5
							.getMetaData();
					int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5
							.getColumnCount();

					String tmpContent_tOracleInput_5 = null;

					while (rs_tOracleInput_5.next()) {
						nb_line_tOracleInput_5++;

						if (colQtyInRs_tOracleInput_5 < 1) {
							db_strati.GEOLOGICALCONTEXTID = null;
						} else {

							if (rs_tOracleInput_5.getObject(1) != null) {
								db_strati.GEOLOGICALCONTEXTID = rs_tOracleInput_5
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_5 < 2) {
							db_strati.EARLIESTEONORLOWESTEONOTHEM = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(2);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.EARLIESTEONORLOWESTEONOTHEM = tmpContent_tOracleInput_5;
							} else {
								db_strati.EARLIESTEONORLOWESTEONOTHEM = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 3) {
							db_strati.LATESTEONORHIGHESTEONOTHEM = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(3);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.LATESTEONORHIGHESTEONOTHEM = tmpContent_tOracleInput_5;
							} else {
								db_strati.LATESTEONORHIGHESTEONOTHEM = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 4) {
							db_strati.EARLIESTERAORLOWESTERATHEM = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(4);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.EARLIESTERAORLOWESTERATHEM = tmpContent_tOracleInput_5;
							} else {
								db_strati.EARLIESTERAORLOWESTERATHEM = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 5) {
							db_strati.LATESTERAORHIGHESTERATHEM = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(5);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.LATESTERAORHIGHESTERATHEM = tmpContent_tOracleInput_5;
							} else {
								db_strati.LATESTERAORHIGHESTERATHEM = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 6) {
							db_strati.EARLIESTPERIODORLOWESTSYSTEM = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(6);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.EARLIESTPERIODORLOWESTSYSTEM = tmpContent_tOracleInput_5;
							} else {
								db_strati.EARLIESTPERIODORLOWESTSYSTEM = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 7) {
							db_strati.LATESTPERIODORHIGHESTSYSTEM = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(7);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.LATESTPERIODORHIGHESTSYSTEM = tmpContent_tOracleInput_5;
							} else {
								db_strati.LATESTPERIODORHIGHESTSYSTEM = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 8) {
							db_strati.EARLIESTEPOCHORLOWESTSERIES = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(8);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.EARLIESTEPOCHORLOWESTSERIES = tmpContent_tOracleInput_5;
							} else {
								db_strati.EARLIESTEPOCHORLOWESTSERIES = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 9) {
							db_strati.LATESTEPOCHORHIGHESTSERIES = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(9);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.LATESTEPOCHORHIGHESTSERIES = tmpContent_tOracleInput_5;
							} else {
								db_strati.LATESTEPOCHORHIGHESTSERIES = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 10) {
							db_strati.EARLIESTAGEORLOWESTSTAGE = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(10);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.EARLIESTAGEORLOWESTSTAGE = tmpContent_tOracleInput_5;
							} else {
								db_strati.EARLIESTAGEORLOWESTSTAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 11) {
							db_strati.LATESTAGEORHIGHESTSTAGE = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(11);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.LATESTAGEORHIGHESTSTAGE = tmpContent_tOracleInput_5;
							} else {
								db_strati.LATESTAGEORHIGHESTSTAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 12) {
							db_strati.LOWESTBIOSTRATIGRAPHICZONE = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(12);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.LOWESTBIOSTRATIGRAPHICZONE = tmpContent_tOracleInput_5;
							} else {
								db_strati.LOWESTBIOSTRATIGRAPHICZONE = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 13) {
							db_strati.HIGHESTBIOSTRATIGRAPHICZONE = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(13);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.HIGHESTBIOSTRATIGRAPHICZONE = tmpContent_tOracleInput_5;
							} else {
								db_strati.HIGHESTBIOSTRATIGRAPHICZONE = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 14) {
							db_strati.MEMBER = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(14);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.MEMBER = tmpContent_tOracleInput_5;
							} else {
								db_strati.MEMBER = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 15) {
							db_strati.GROUP_ = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(15);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.GROUP_ = tmpContent_tOracleInput_5;
							} else {
								db_strati.GROUP_ = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 16) {
							db_strati.BED = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(16);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.BED = tmpContent_tOracleInput_5;
							} else {
								db_strati.BED = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 17) {
							db_strati.FORMATION = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(17);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.FORMATION = tmpContent_tOracleInput_5;
							} else {
								db_strati.FORMATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_5 < 18) {
							db_strati.SOURCEFILEID = null;
						} else {

							tmpContent_tOracleInput_5 = rs_tOracleInput_5
									.getString(18);
							if (tmpContent_tOracleInput_5 != null) {
								db_strati.SOURCEFILEID = tmpContent_tOracleInput_5;
							} else {
								db_strati.SOURCEFILEID = null;
							}
						}

						/**
						 * [tOracleInput_5 begin ] stop
						 */

						/**
						 * [tOracleInput_5 main ] start
						 */

						currentComponent = "tOracleInput_5";

						tos_count_tOracleInput_5++;

						/**
						 * [tOracleInput_5 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "strati_choices"
						// /////////////////////////////////////////////

						boolean forceLoopstrati_choices = false;

						strati_choicesStruct strati_choicesObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							strati_choicesHashKey.className = "Stratigraphy";

							strati_choicesHashKey.relationId = db_strati.GEOLOGICALCONTEXTID
									.toString();

							strati_choicesHashKey.hashCodeDirty = true;

							tHash_Lookup_strati_choices
									.lookup(strati_choicesHashKey);

							if (!tHash_Lookup_strati_choices.hasNext()) { // G_TM_M_090

								forceLoopstrati_choices = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLoopstrati_choices = true;
						} // G 21

						strati_choicesStruct strati_choices = null;

						while ((tHash_Lookup_strati_choices != null && tHash_Lookup_strati_choices
								.hasNext()) || forceLoopstrati_choices) { // G_TM_M_043

							// CALL close loop of lookup 'strati_choices'

							strati_choicesStruct fromLookup_strati_choices = null;
							strati_choices = strati_choicesDefault;

							if (!forceLoopstrati_choices) { // G 46

								fromLookup_strati_choices = tHash_Lookup_strati_choices
										.next();

								if (fromLookup_strati_choices != null) {
									strati_choices = fromLookup_strati_choices;
								}

							} // G 46

							forceLoopstrati_choices = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								rows_strati = null;

								// # Output table : 'rows_strati'
								rows_strati_tmp.GEOLOGICALCONTEXTID = db_strati.GEOLOGICALCONTEXTID;
								rows_strati_tmp.EARLIESTEONORLOWESTEONOTHEM = db_strati.EARLIESTEONORLOWESTEONOTHEM;
								rows_strati_tmp.LATESTEONORHIGHESTEONOTHEM = db_strati.LATESTEONORHIGHESTEONOTHEM;
								rows_strati_tmp.EARLIESTERAORLOWESTERATHEM = db_strati.EARLIESTERAORLOWESTERATHEM;
								rows_strati_tmp.LATESTERAORHIGHESTERATHEM = db_strati.LATESTERAORHIGHESTERATHEM;
								rows_strati_tmp.EARLIESTPERIODORLOWESTSYSTEM = db_strati.EARLIESTPERIODORLOWESTSYSTEM;
								rows_strati_tmp.LATESTPERIODORHIGHESTSYSTEM = db_strati.LATESTPERIODORHIGHESTSYSTEM;
								rows_strati_tmp.EARLIESTEPOCHORLOWESTSERIES = db_strati.EARLIESTEPOCHORLOWESTSERIES;
								rows_strati_tmp.LATESTEPOCHORHIGHESTSERIES = db_strati.LATESTEPOCHORHIGHESTSERIES;
								rows_strati_tmp.EARLIESTAGEORLOWESTSTAGE = db_strati.EARLIESTAGEORLOWESTSTAGE;
								rows_strati_tmp.LATESTAGEORHIGHESTSTAGE = db_strati.LATESTAGEORHIGHESTSTAGE;
								rows_strati_tmp.LOWESTBIOSTRATIGRAPHICZONE = db_strati.LOWESTBIOSTRATIGRAPHICZONE;
								rows_strati_tmp.HIGHESTBIOSTRATIGRAPHICZONE = db_strati.HIGHESTBIOSTRATIGRAPHICZONE;
								rows_strati_tmp.MEMBER = db_strati.MEMBER;
								rows_strati_tmp.GROUP_ = db_strati.GROUP_;
								rows_strati_tmp.BED = db_strati.BED;
								rows_strati_tmp.FORMATION = db_strati.FORMATION;
								rows_strati_tmp.SOURCEFILEID = db_strati.SOURCEFILEID;
								rows_strati_tmp.fieldName = strati_choices.fieldName;
								rows_strati_tmp.data = strati_choices.data;
								rows_strati = rows_strati_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */
							// Start of branch "rows_strati"
							if (rows_strati != null) {

								/**
								 * [tMemorizeRows_5 main ] start
								 */

								currentComponent = "tMemorizeRows_5";

								for (int i_tMemorizeRows_5 = iRows_tMemorizeRows_5 - 1; i_tMemorizeRows_5 > 0; i_tMemorizeRows_5--) {
									fieldName_tMemorizeRows_5[i_tMemorizeRows_5] = fieldName_tMemorizeRows_5[i_tMemorizeRows_5 - 1];
									data_tMemorizeRows_5[i_tMemorizeRows_5] = data_tMemorizeRows_5[i_tMemorizeRows_5 - 1];
								}
								fieldName_tMemorizeRows_5[0] = rows_strati.fieldName;
								data_tMemorizeRows_5[0] = rows_strati.data;

								row3 = rows_strati;

								tos_count_tMemorizeRows_5++;

								/**
								 * [tMemorizeRows_5 main ] stop
								 */

								/**
								 * [tAggregateRow_5_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_5";

								currentComponent = "tAggregateRow_5_AGGOUT";

								operation_finder_tAggregateRow_5.GEOLOGICALCONTEXTID = row3.GEOLOGICALCONTEXTID;
								operation_finder_tAggregateRow_5.EARLIESTEONORLOWESTEONOTHEM = row3.EARLIESTEONORLOWESTEONOTHEM;
								operation_finder_tAggregateRow_5.LATESTEONORHIGHESTEONOTHEM = row3.LATESTEONORHIGHESTEONOTHEM;
								operation_finder_tAggregateRow_5.EARLIESTERAORLOWESTERATHEM = row3.EARLIESTERAORLOWESTERATHEM;
								operation_finder_tAggregateRow_5.LATESTERAORHIGHESTERATHEM = row3.LATESTERAORHIGHESTERATHEM;
								operation_finder_tAggregateRow_5.EARLIESTPERIODORLOWESTSYSTEM = row3.EARLIESTPERIODORLOWESTSYSTEM;
								operation_finder_tAggregateRow_5.LATESTPERIODORHIGHESTSYSTEM = row3.LATESTPERIODORHIGHESTSYSTEM;
								operation_finder_tAggregateRow_5.EARLIESTEPOCHORLOWESTSERIES = row3.EARLIESTEPOCHORLOWESTSERIES;
								operation_finder_tAggregateRow_5.LATESTEPOCHORHIGHESTSERIES = row3.LATESTEPOCHORHIGHESTSERIES;
								operation_finder_tAggregateRow_5.EARLIESTAGEORLOWESTSTAGE = row3.EARLIESTAGEORLOWESTSTAGE;
								operation_finder_tAggregateRow_5.LATESTAGEORHIGHESTSTAGE = row3.LATESTAGEORHIGHESTSTAGE;
								operation_finder_tAggregateRow_5.LOWESTBIOSTRATIGRAPHICZONE = row3.LOWESTBIOSTRATIGRAPHICZONE;
								operation_finder_tAggregateRow_5.HIGHESTBIOSTRATIGRAPHICZONE = row3.HIGHESTBIOSTRATIGRAPHICZONE;
								operation_finder_tAggregateRow_5.MEMBER = row3.MEMBER;
								operation_finder_tAggregateRow_5.GROUP_ = row3.GROUP_;
								operation_finder_tAggregateRow_5.BED = row3.BED;
								operation_finder_tAggregateRow_5.FORMATION = row3.FORMATION;
								operation_finder_tAggregateRow_5.SOURCEFILEID = row3.SOURCEFILEID;

								operation_finder_tAggregateRow_5.hashCodeDirty = true;

								operation_result_tAggregateRow_5 = hash_tAggregateRow_5
										.get(operation_finder_tAggregateRow_5);

								if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

									operation_result_tAggregateRow_5.GEOLOGICALCONTEXTID = operation_finder_tAggregateRow_5.GEOLOGICALCONTEXTID;
									operation_result_tAggregateRow_5.EARLIESTEONORLOWESTEONOTHEM = operation_finder_tAggregateRow_5.EARLIESTEONORLOWESTEONOTHEM;
									operation_result_tAggregateRow_5.LATESTEONORHIGHESTEONOTHEM = operation_finder_tAggregateRow_5.LATESTEONORHIGHESTEONOTHEM;
									operation_result_tAggregateRow_5.EARLIESTERAORLOWESTERATHEM = operation_finder_tAggregateRow_5.EARLIESTERAORLOWESTERATHEM;
									operation_result_tAggregateRow_5.LATESTERAORHIGHESTERATHEM = operation_finder_tAggregateRow_5.LATESTERAORHIGHESTERATHEM;
									operation_result_tAggregateRow_5.EARLIESTPERIODORLOWESTSYSTEM = operation_finder_tAggregateRow_5.EARLIESTPERIODORLOWESTSYSTEM;
									operation_result_tAggregateRow_5.LATESTPERIODORHIGHESTSYSTEM = operation_finder_tAggregateRow_5.LATESTPERIODORHIGHESTSYSTEM;
									operation_result_tAggregateRow_5.EARLIESTEPOCHORLOWESTSERIES = operation_finder_tAggregateRow_5.EARLIESTEPOCHORLOWESTSERIES;
									operation_result_tAggregateRow_5.LATESTEPOCHORHIGHESTSERIES = operation_finder_tAggregateRow_5.LATESTEPOCHORHIGHESTSERIES;
									operation_result_tAggregateRow_5.EARLIESTAGEORLOWESTSTAGE = operation_finder_tAggregateRow_5.EARLIESTAGEORLOWESTSTAGE;
									operation_result_tAggregateRow_5.LATESTAGEORHIGHESTSTAGE = operation_finder_tAggregateRow_5.LATESTAGEORHIGHESTSTAGE;
									operation_result_tAggregateRow_5.LOWESTBIOSTRATIGRAPHICZONE = operation_finder_tAggregateRow_5.LOWESTBIOSTRATIGRAPHICZONE;
									operation_result_tAggregateRow_5.HIGHESTBIOSTRATIGRAPHICZONE = operation_finder_tAggregateRow_5.HIGHESTBIOSTRATIGRAPHICZONE;
									operation_result_tAggregateRow_5.MEMBER = operation_finder_tAggregateRow_5.MEMBER;
									operation_result_tAggregateRow_5.GROUP_ = operation_finder_tAggregateRow_5.GROUP_;
									operation_result_tAggregateRow_5.BED = operation_finder_tAggregateRow_5.BED;
									operation_result_tAggregateRow_5.FORMATION = operation_finder_tAggregateRow_5.FORMATION;
									operation_result_tAggregateRow_5.SOURCEFILEID = operation_finder_tAggregateRow_5.SOURCEFILEID;

									hash_tAggregateRow_5.put(
											operation_result_tAggregateRow_5,
											operation_result_tAggregateRow_5);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_5_AGGOUT++;

								/**
								 * [tAggregateRow_5_AGGOUT main ] stop
								 */

							} // End of branch "rows_strati"

						} // close loop of lookup 'strati_choices' // G_TM_M_043

						/**
						 * [tOracleInput_5 end ] start
						 */

						currentComponent = "tOracleInput_5";

					}
				} finally {
					stmt_tOracleInput_5.close();

					if (conn_tOracleInput_5 != null
							&& !conn_tOracleInput_5.isClosed()) {

						conn_tOracleInput_5.close();

					}

				}

				globalMap.put("tOracleInput_5_NB_LINE", nb_line_tOracleInput_5);

				ok_Hash.put("tOracleInput_5", true);
				end_Hash.put("tOracleInput_5", System.currentTimeMillis());

				/**
				 * [tOracleInput_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_strati_choices != null) {
					tHash_Lookup_strati_choices.endGet();
				}
				globalMap.remove("tHash_Lookup_strati_choices");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMemorizeRows_5 end ] start
				 */

				currentComponent = "tMemorizeRows_5";

				ok_Hash.put("tMemorizeRows_5", true);
				end_Hash.put("tMemorizeRows_5", System.currentTimeMillis());

				/**
				 * [tMemorizeRows_5 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.exportpath + "/stratigraphies.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);
				if (filetFileOutputDelimited_5.exists()) {
					isFileGenerated_tFileOutputDelimited_5 = false;
				}
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /**
				 * Start field
				 * tFileOutputDelimited_5:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
				 * Start
				 * field tFileOutputDelimited_5:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				outtFileOutputDelimited_5 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_5, true),
								"UTF-8"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("GEOLOGICALCONTEXTID");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("EARLIESTEONORLOWESTEONOTHEM");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("LATESTEONORHIGHESTEONOTHEM");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("EARLIESTERAORLOWESTERATHEM");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("LATESTERAORHIGHESTERATHEM");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("EARLIESTPERIODORLOWESTSYSTEM");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("LATESTPERIODORHIGHESTSYSTEM");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("EARLIESTEPOCHORLOWESTSERIES");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("LATESTEPOCHORHIGHESTSERIES");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("EARLIESTAGEORLOWESTSTAGE");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("LATESTAGEORHIGHESTSTAGE");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("LOWESTBIOSTRATIGRAPHICZONE");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5
							.write("HIGHESTBIOSTRATIGRAPHICZONE");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("MEMBER");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("GROUP_");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("BED");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("FORMATION");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("SOURCEFILEID");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5",
						outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5",
						nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE",
						values_tAggregateRow_5.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					row_strati.GEOLOGICALCONTEXTID = aggregated_row_tAggregateRow_5.GEOLOGICALCONTEXTID;

					row_strati.EARLIESTEONORLOWESTEONOTHEM = aggregated_row_tAggregateRow_5.EARLIESTEONORLOWESTEONOTHEM;

					row_strati.LATESTEONORHIGHESTEONOTHEM = aggregated_row_tAggregateRow_5.LATESTEONORHIGHESTEONOTHEM;

					row_strati.EARLIESTERAORLOWESTERATHEM = aggregated_row_tAggregateRow_5.EARLIESTERAORLOWESTERATHEM;

					row_strati.LATESTERAORHIGHESTERATHEM = aggregated_row_tAggregateRow_5.LATESTERAORHIGHESTERATHEM;

					row_strati.EARLIESTPERIODORLOWESTSYSTEM = aggregated_row_tAggregateRow_5.EARLIESTPERIODORLOWESTSYSTEM;

					row_strati.LATESTPERIODORHIGHESTSYSTEM = aggregated_row_tAggregateRow_5.LATESTPERIODORHIGHESTSYSTEM;

					row_strati.EARLIESTEPOCHORLOWESTSERIES = aggregated_row_tAggregateRow_5.EARLIESTEPOCHORLOWESTSERIES;

					row_strati.LATESTEPOCHORHIGHESTSERIES = aggregated_row_tAggregateRow_5.LATESTEPOCHORHIGHESTSERIES;

					row_strati.EARLIESTAGEORLOWESTSTAGE = aggregated_row_tAggregateRow_5.EARLIESTAGEORLOWESTSTAGE;

					row_strati.LATESTAGEORHIGHESTSTAGE = aggregated_row_tAggregateRow_5.LATESTAGEORHIGHESTSTAGE;

					row_strati.LOWESTBIOSTRATIGRAPHICZONE = aggregated_row_tAggregateRow_5.LOWESTBIOSTRATIGRAPHICZONE;

					row_strati.HIGHESTBIOSTRATIGRAPHICZONE = aggregated_row_tAggregateRow_5.HIGHESTBIOSTRATIGRAPHICZONE;

					row_strati.MEMBER = aggregated_row_tAggregateRow_5.MEMBER;

					row_strati.GROUP_ = aggregated_row_tAggregateRow_5.GROUP_;

					row_strati.BED = aggregated_row_tAggregateRow_5.BED;

					row_strati.FORMATION = aggregated_row_tAggregateRow_5.FORMATION;

					row_strati.SOURCEFILEID = aggregated_row_tAggregateRow_5.SOURCEFILEID;

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tJavaRow_5 main ] start
					 */

					currentComponent = "tJavaRow_5";

					// Code généré selon le schémas d'entrée et de sortie
					strati_to_csv.GEOLOGICALCONTEXTID = row_strati.GEOLOGICALCONTEXTID;
					strati_to_csv.EARLIESTEONORLOWESTEONOTHEM = row_strati.EARLIESTEONORLOWESTEONOTHEM;
					strati_to_csv.LATESTEONORHIGHESTEONOTHEM = row_strati.LATESTEONORHIGHESTEONOTHEM;
					strati_to_csv.EARLIESTERAORLOWESTERATHEM = row_strati.EARLIESTERAORLOWESTERATHEM;
					strati_to_csv.LATESTERAORHIGHESTERATHEM = row_strati.LATESTERAORHIGHESTERATHEM;
					strati_to_csv.EARLIESTPERIODORLOWESTSYSTEM = row_strati.EARLIESTPERIODORLOWESTSYSTEM;
					strati_to_csv.LATESTPERIODORHIGHESTSYSTEM = row_strati.LATESTPERIODORHIGHESTSYSTEM;
					strati_to_csv.EARLIESTEPOCHORLOWESTSERIES = row_strati.EARLIESTEPOCHORLOWESTSERIES;
					strati_to_csv.LATESTEPOCHORHIGHESTSERIES = row_strati.LATESTEPOCHORHIGHESTSERIES;
					strati_to_csv.EARLIESTAGEORLOWESTSTAGE = row_strati.EARLIESTAGEORLOWESTSTAGE;
					strati_to_csv.LATESTAGEORHIGHESTSTAGE = row_strati.LATESTAGEORHIGHESTSTAGE;
					strati_to_csv.LOWESTBIOSTRATIGRAPHICZONE = row_strati.LOWESTBIOSTRATIGRAPHICZONE;
					strati_to_csv.HIGHESTBIOSTRATIGRAPHICZONE = row_strati.HIGHESTBIOSTRATIGRAPHICZONE;
					strati_to_csv.MEMBER = row_strati.MEMBER;
					strati_to_csv.GROUP_ = row_strati.GROUP_;
					strati_to_csv.BED = row_strati.BED;
					strati_to_csv.FORMATION = row_strati.FORMATION;
					strati_to_csv.SOURCEFILEID = row_strati.SOURCEFILEID;
					strati_to_csv.SOURCEFILEID = row_strati.fieldName;
					strati_to_csv.SOURCEFILEID = row_strati.data;

					ConversionString.setChoices(strati_to_csv,
							((String[]) globalMap
									.get("tMemorizeRows_5_fieldName")),
							(String[]) globalMap.get("tMemorizeRows_5_data"));

					nb_line_tJavaRow_5++;

					tos_count_tJavaRow_5++;

					/**
					 * [tJavaRow_5 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 main ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
					if (strati_to_csv.GEOLOGICALCONTEXTID != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.GEOLOGICALCONTEXTID
										.setScale(0,
												java.math.RoundingMode.HALF_UP)
										.toPlainString());
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.EARLIESTEONORLOWESTEONOTHEM != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.EARLIESTEONORLOWESTEONOTHEM);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.LATESTEONORHIGHESTEONOTHEM != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.LATESTEONORHIGHESTEONOTHEM);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.EARLIESTERAORLOWESTERATHEM != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.EARLIESTERAORLOWESTERATHEM);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.LATESTERAORHIGHESTERATHEM != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.LATESTERAORHIGHESTERATHEM);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.EARLIESTPERIODORLOWESTSYSTEM != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.EARLIESTPERIODORLOWESTSYSTEM);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.LATESTPERIODORHIGHESTSYSTEM != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.LATESTPERIODORHIGHESTSYSTEM);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.EARLIESTEPOCHORLOWESTSERIES != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.EARLIESTEPOCHORLOWESTSERIES);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.LATESTEPOCHORHIGHESTSERIES != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.LATESTEPOCHORHIGHESTSERIES);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.EARLIESTAGEORLOWESTSTAGE != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.EARLIESTAGEORLOWESTSTAGE);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.LATESTAGEORHIGHESTSTAGE != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.LATESTAGEORHIGHESTSTAGE);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.LOWESTBIOSTRATIGRAPHICZONE != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.LOWESTBIOSTRATIGRAPHICZONE);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.HIGHESTBIOSTRATIGRAPHICZONE != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.HIGHESTBIOSTRATIGRAPHICZONE);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.MEMBER != null) {
						sb_tFileOutputDelimited_5.append(strati_to_csv.MEMBER);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.GROUP_ != null) {
						sb_tFileOutputDelimited_5.append(strati_to_csv.GROUP_);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.BED != null) {
						sb_tFileOutputDelimited_5.append(strati_to_csv.BED);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.FORMATION != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.FORMATION);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_tFileOutputDelimited_5);
					if (strati_to_csv.SOURCEFILEID != null) {
						sb_tFileOutputDelimited_5
								.append(strati_to_csv.SOURCEFILEID);
					}
					sb_tFileOutputDelimited_5
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

					nb_line_tFileOutputDelimited_5++;
					resourceMap.put("nb_line_tFileOutputDelimited_5",
							nb_line_tFileOutputDelimited_5);

					outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5
							.toString());

					tos_count_tFileOutputDelimited_5++;

					/**
					 * [tFileOutputDelimited_5 main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE",
						nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				tOracleInput_6Process(globalMap);

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_strati_choices");

			try {

				/**
				 * [tOracleInput_5 finally ] start
				 */

				currentComponent = "tOracleInput_5";

				/**
				 * [tOracleInput_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMemorizeRows_5 finally ] start
				 */

				currentComponent = "tMemorizeRows_5";

				/**
				 * [tMemorizeRows_5 finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				/**
				 * [tAggregateRow_5_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				/**
				 * [tAggregateRow_5_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}

	public static class recolte_to_csvStruct implements
			routines.system.IPersistableRow<recolte_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EVENTID == null) ? 0 : this.EVENTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final recolte_to_csvStruct other = (recolte_to_csvStruct) obj;

			if (this.EVENTID == null) {
				if (other.EVENTID != null)
					return false;

			} else if (!this.EVENTID.equals(other.EVENTID))

				return false;

			return true;
		}

		public void copyDataTo(recolte_to_csvStruct other) {

			other.EVENTID = this.EVENTID;
			other.RECORDEDBY = this.RECORDEDBY;
			other.EVENTDATE = this.EVENTDATE;
			other.EVENTREMARKS = this.EVENTREMARKS;
			other.VERBATIMEVENTDATE = this.VERBATIMEVENTDATE;
			other.EDAY = this.EDAY;
			other.EMONTH = this.EMONTH;
			other.EYEAR = this.EYEAR;
			other.SDAY = this.SDAY;
			other.SMONTH = this.SMONTH;
			other.SYEAR = this.SYEAR;
			other.DECADE = this.DECADE;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.LOCATIONID = this.LOCATIONID;
			other.HABITAT = this.HABITAT;
			other.FIELDNUMBER = this.FIELDNUMBER;
			other.FIELDNOTES = this.FIELDNOTES;

		}

		public void copyKeysDataTo(recolte_to_csvStruct other) {

			other.EVENTID = this.EVENTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readString(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + EVENTID);
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(recolte_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EVENTID, other.EVENTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_recolteStruct implements
			routines.system.IPersistableRow<row_recolteStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EVENTID == null) ? 0 : this.EVENTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_recolteStruct other = (row_recolteStruct) obj;

			if (this.EVENTID == null) {
				if (other.EVENTID != null)
					return false;

			} else if (!this.EVENTID.equals(other.EVENTID))

				return false;

			return true;
		}

		public void copyDataTo(row_recolteStruct other) {

			other.EVENTID = this.EVENTID;
			other.RECORDEDBY = this.RECORDEDBY;
			other.EVENTDATE = this.EVENTDATE;
			other.EVENTREMARKS = this.EVENTREMARKS;
			other.VERBATIMEVENTDATE = this.VERBATIMEVENTDATE;
			other.EDAY = this.EDAY;
			other.EMONTH = this.EMONTH;
			other.EYEAR = this.EYEAR;
			other.SDAY = this.SDAY;
			other.SMONTH = this.SMONTH;
			other.SYEAR = this.SYEAR;
			other.DECADE = this.DECADE;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.LOCATIONID = this.LOCATIONID;
			other.HABITAT = this.HABITAT;
			other.FIELDNUMBER = this.FIELDNUMBER;
			other.FIELDNOTES = this.FIELDNOTES;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row_recolteStruct other) {

			other.EVENTID = this.EVENTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readString(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + EVENTID);
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_recolteStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EVENTID, other.EVENTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_6 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EVENTID == null) ? 0 : this.EVENTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_6 other = (OnRowsEndStructtAggregateRow_6) obj;

			if (this.EVENTID == null) {
				if (other.EVENTID != null)
					return false;

			} else if (!this.EVENTID.equals(other.EVENTID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_6 other) {

			other.EVENTID = this.EVENTID;
			other.RECORDEDBY = this.RECORDEDBY;
			other.EVENTDATE = this.EVENTDATE;
			other.EVENTREMARKS = this.EVENTREMARKS;
			other.VERBATIMEVENTDATE = this.VERBATIMEVENTDATE;
			other.EDAY = this.EDAY;
			other.EMONTH = this.EMONTH;
			other.EYEAR = this.EYEAR;
			other.SDAY = this.SDAY;
			other.SMONTH = this.SMONTH;
			other.SYEAR = this.SYEAR;
			other.DECADE = this.DECADE;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.LOCATIONID = this.LOCATIONID;
			other.HABITAT = this.HABITAT;
			other.FIELDNUMBER = this.FIELDNUMBER;
			other.FIELDNOTES = this.FIELDNOTES;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_6 other) {

			other.EVENTID = this.EVENTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readString(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + EVENTID);
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EVENTID, other.EVENTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EVENTID == null) ? 0 : this.EVENTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.EVENTID == null) {
				if (other.EVENTID != null)
					return false;

			} else if (!this.EVENTID.equals(other.EVENTID))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.EVENTID = this.EVENTID;
			other.RECORDEDBY = this.RECORDEDBY;
			other.EVENTDATE = this.EVENTDATE;
			other.EVENTREMARKS = this.EVENTREMARKS;
			other.VERBATIMEVENTDATE = this.VERBATIMEVENTDATE;
			other.EDAY = this.EDAY;
			other.EMONTH = this.EMONTH;
			other.EYEAR = this.EYEAR;
			other.SDAY = this.SDAY;
			other.SMONTH = this.SMONTH;
			other.SYEAR = this.SYEAR;
			other.DECADE = this.DECADE;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.LOCATIONID = this.LOCATIONID;
			other.HABITAT = this.HABITAT;
			other.FIELDNUMBER = this.FIELDNUMBER;
			other.FIELDNOTES = this.FIELDNOTES;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.EVENTID = this.EVENTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readString(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + EVENTID);
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EVENTID, other.EVENTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rows_recolteStruct implements
			routines.system.IPersistableRow<rows_recolteStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EVENTID;

		public String getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EVENTID == null) ? 0 : this.EVENTID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rows_recolteStruct other = (rows_recolteStruct) obj;

			if (this.EVENTID == null) {
				if (other.EVENTID != null)
					return false;

			} else if (!this.EVENTID.equals(other.EVENTID))

				return false;

			return true;
		}

		public void copyDataTo(rows_recolteStruct other) {

			other.EVENTID = this.EVENTID;
			other.RECORDEDBY = this.RECORDEDBY;
			other.EVENTDATE = this.EVENTDATE;
			other.EVENTREMARKS = this.EVENTREMARKS;
			other.VERBATIMEVENTDATE = this.VERBATIMEVENTDATE;
			other.EDAY = this.EDAY;
			other.EMONTH = this.EMONTH;
			other.EYEAR = this.EYEAR;
			other.SDAY = this.SDAY;
			other.SMONTH = this.SMONTH;
			other.SYEAR = this.SYEAR;
			other.DECADE = this.DECADE;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.LOCATIONID = this.LOCATIONID;
			other.HABITAT = this.HABITAT;
			other.FIELDNUMBER = this.FIELDNUMBER;
			other.FIELDNOTES = this.FIELDNOTES;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(rows_recolteStruct other) {

			other.EVENTID = this.EVENTID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readString(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + EVENTID);
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rows_recolteStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EVENTID, other.EVENTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_recolteStruct implements
			routines.system.IPersistableRow<db_recolteStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public byte[] EVENTID;

		public byte[] getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readByteArray(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + String.valueOf(EVENTID));
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_recolteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_6Struct implements
			routines.system.IPersistableRow<after_tOracleInput_6Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public byte[] EVENTID;

		public byte[] getEVENTID() {
			return this.EVENTID;
		}

		public String RECORDEDBY;

		public String getRECORDEDBY() {
			return this.RECORDEDBY;
		}

		public java.util.Date EVENTDATE;

		public java.util.Date getEVENTDATE() {
			return this.EVENTDATE;
		}

		public String EVENTREMARKS;

		public String getEVENTREMARKS() {
			return this.EVENTREMARKS;
		}

		public java.util.Date VERBATIMEVENTDATE;

		public java.util.Date getVERBATIMEVENTDATE() {
			return this.VERBATIMEVENTDATE;
		}

		public Integer EDAY;

		public Integer getEDAY() {
			return this.EDAY;
		}

		public Integer EMONTH;

		public Integer getEMONTH() {
			return this.EMONTH;
		}

		public Integer EYEAR;

		public Integer getEYEAR() {
			return this.EYEAR;
		}

		public Integer SDAY;

		public Integer getSDAY() {
			return this.SDAY;
		}

		public Integer SMONTH;

		public Integer getSMONTH() {
			return this.SMONTH;
		}

		public Integer SYEAR;

		public Integer getSYEAR() {
			return this.SYEAR;
		}

		public Integer DECADE;

		public Integer getDECADE() {
			return this.DECADE;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public Integer LOCATIONID;

		public Integer getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String HABITAT;

		public String getHABITAT() {
			return this.HABITAT;
		}

		public String FIELDNUMBER;

		public String getFIELDNUMBER() {
			return this.FIELDNUMBER;
		}

		public String FIELDNOTES;

		public String getFIELDNOTES() {
			return this.FIELDNOTES;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ java.util.Arrays.hashCode(this.EVENTID);

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tOracleInput_6Struct other = (after_tOracleInput_6Struct) obj;

			if (!java.util.Arrays.equals(this.EVENTID, other.EVENTID)) {
				return false;
			}

			return true;
		}

		public void copyDataTo(after_tOracleInput_6Struct other) {

			other.EVENTID = this.EVENTID;
			other.RECORDEDBY = this.RECORDEDBY;
			other.EVENTDATE = this.EVENTDATE;
			other.EVENTREMARKS = this.EVENTREMARKS;
			other.VERBATIMEVENTDATE = this.VERBATIMEVENTDATE;
			other.EDAY = this.EDAY;
			other.EMONTH = this.EMONTH;
			other.EYEAR = this.EYEAR;
			other.SDAY = this.SDAY;
			other.SMONTH = this.SMONTH;
			other.SYEAR = this.SYEAR;
			other.DECADE = this.DECADE;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.LOCATIONID = this.LOCATIONID;
			other.HABITAT = this.HABITAT;
			other.FIELDNUMBER = this.FIELDNUMBER;
			other.FIELDNOTES = this.FIELDNOTES;

		}

		public void copyKeysDataTo(after_tOracleInput_6Struct other) {

			other.EVENTID = this.EVENTID;

		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.EVENTID = readByteArray(dis);

					this.RECORDEDBY = readString(dis);

					this.EVENTDATE = readDate(dis);

					this.EVENTREMARKS = readString(dis);

					this.VERBATIMEVENTDATE = readDate(dis);

					this.EDAY = readInteger(dis);

					this.EMONTH = readInteger(dis);

					this.EYEAR = readInteger(dis);

					this.SDAY = readInteger(dis);

					this.SMONTH = readInteger(dis);

					this.SYEAR = readInteger(dis);

					this.DECADE = readInteger(dis);

					this.SOURCEFILEID = readString(dis);

					this.LOCATIONID = readInteger(dis);

					this.HABITAT = readString(dis);

					this.FIELDNUMBER = readString(dis);

					this.FIELDNOTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.EVENTID, dos);

				// String

				writeString(this.RECORDEDBY, dos);

				// java.util.Date

				writeDate(this.EVENTDATE, dos);

				// String

				writeString(this.EVENTREMARKS, dos);

				// java.util.Date

				writeDate(this.VERBATIMEVENTDATE, dos);

				// Integer

				writeInteger(this.EDAY, dos);

				// Integer

				writeInteger(this.EMONTH, dos);

				// Integer

				writeInteger(this.EYEAR, dos);

				// Integer

				writeInteger(this.SDAY, dos);

				// Integer

				writeInteger(this.SMONTH, dos);

				// Integer

				writeInteger(this.SYEAR, dos);

				// Integer

				writeInteger(this.DECADE, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// Integer

				writeInteger(this.LOCATIONID, dos);

				// String

				writeString(this.HABITAT, dos);

				// String

				writeString(this.FIELDNUMBER, dos);

				// String

				writeString(this.FIELDNOTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EVENTID=" + String.valueOf(EVENTID));
			sb.append(",RECORDEDBY=" + RECORDEDBY);
			sb.append(",EVENTDATE=" + String.valueOf(EVENTDATE));
			sb.append(",EVENTREMARKS=" + EVENTREMARKS);
			sb.append(",VERBATIMEVENTDATE=" + String.valueOf(VERBATIMEVENTDATE));
			sb.append(",EDAY=" + String.valueOf(EDAY));
			sb.append(",EMONTH=" + String.valueOf(EMONTH));
			sb.append(",EYEAR=" + String.valueOf(EYEAR));
			sb.append(",SDAY=" + String.valueOf(SDAY));
			sb.append(",SMONTH=" + String.valueOf(SMONTH));
			sb.append(",SYEAR=" + String.valueOf(SYEAR));
			sb.append(",DECADE=" + String.valueOf(DECADE));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",HABITAT=" + HABITAT);
			sb.append(",FIELDNUMBER=" + FIELDNUMBER);
			sb.append(",FIELDNOTES=" + FIELDNOTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EVENTID, other.EVENTID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				db_recolteStruct db_recolte = new db_recolteStruct();
				rows_recolteStruct rows_recolte = new rows_recolteStruct();
				rows_recolteStruct row4 = rows_recolte;
				row_recolteStruct row_recolte = new row_recolteStruct();
				recolte_to_csvStruct recolte_to_csv = new recolte_to_csvStruct();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGOUT", false);
				start_Hash.put("tAggregateRow_6_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGOUT";

				int tos_count_tAggregateRow_6_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String EVENTID;
					String RECORDEDBY;
					java.util.Date EVENTDATE;
					String EVENTREMARKS;
					java.util.Date VERBATIMEVENTDATE;
					Integer EDAY;
					Integer EMONTH;
					Integer EYEAR;
					Integer SDAY;
					Integer SMONTH;
					Integer SYEAR;
					Integer DECADE;
					String SOURCEFILEID;
					Integer LOCATIONID;
					String HABITAT;
					String FIELDNUMBER;
					String FIELDNOTES;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.EVENTID == null) ? 0
											: this.EVENTID.hashCode());

							result = prime
									* result
									+ ((this.RECORDEDBY == null) ? 0
											: this.RECORDEDBY.hashCode());

							result = prime
									* result
									+ ((this.EVENTDATE == null) ? 0
											: this.EVENTDATE.hashCode());

							result = prime
									* result
									+ ((this.EVENTREMARKS == null) ? 0
											: this.EVENTREMARKS.hashCode());

							result = prime
									* result
									+ ((this.VERBATIMEVENTDATE == null) ? 0
											: this.VERBATIMEVENTDATE.hashCode());

							result = prime
									* result
									+ ((this.EDAY == null) ? 0 : this.EDAY
											.hashCode());

							result = prime
									* result
									+ ((this.EMONTH == null) ? 0 : this.EMONTH
											.hashCode());

							result = prime
									* result
									+ ((this.EYEAR == null) ? 0 : this.EYEAR
											.hashCode());

							result = prime
									* result
									+ ((this.SDAY == null) ? 0 : this.SDAY
											.hashCode());

							result = prime
									* result
									+ ((this.SMONTH == null) ? 0 : this.SMONTH
											.hashCode());

							result = prime
									* result
									+ ((this.SYEAR == null) ? 0 : this.SYEAR
											.hashCode());

							result = prime
									* result
									+ ((this.DECADE == null) ? 0 : this.DECADE
											.hashCode());

							result = prime
									* result
									+ ((this.SOURCEFILEID == null) ? 0
											: this.SOURCEFILEID.hashCode());

							result = prime
									* result
									+ ((this.LOCATIONID == null) ? 0
											: this.LOCATIONID.hashCode());

							result = prime
									* result
									+ ((this.HABITAT == null) ? 0
											: this.HABITAT.hashCode());

							result = prime
									* result
									+ ((this.FIELDNUMBER == null) ? 0
											: this.FIELDNUMBER.hashCode());

							result = prime
									* result
									+ ((this.FIELDNOTES == null) ? 0
											: this.FIELDNOTES.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;

						if (this.EVENTID == null) {
							if (other.EVENTID != null)
								return false;
						} else if (!this.EVENTID.equals(other.EVENTID))
							return false;

						if (this.RECORDEDBY == null) {
							if (other.RECORDEDBY != null)
								return false;
						} else if (!this.RECORDEDBY.equals(other.RECORDEDBY))
							return false;

						if (this.EVENTDATE == null) {
							if (other.EVENTDATE != null)
								return false;
						} else if (!this.EVENTDATE.equals(other.EVENTDATE))
							return false;

						if (this.EVENTREMARKS == null) {
							if (other.EVENTREMARKS != null)
								return false;
						} else if (!this.EVENTREMARKS
								.equals(other.EVENTREMARKS))
							return false;

						if (this.VERBATIMEVENTDATE == null) {
							if (other.VERBATIMEVENTDATE != null)
								return false;
						} else if (!this.VERBATIMEVENTDATE
								.equals(other.VERBATIMEVENTDATE))
							return false;

						if (this.EDAY == null) {
							if (other.EDAY != null)
								return false;
						} else if (!this.EDAY.equals(other.EDAY))
							return false;

						if (this.EMONTH == null) {
							if (other.EMONTH != null)
								return false;
						} else if (!this.EMONTH.equals(other.EMONTH))
							return false;

						if (this.EYEAR == null) {
							if (other.EYEAR != null)
								return false;
						} else if (!this.EYEAR.equals(other.EYEAR))
							return false;

						if (this.SDAY == null) {
							if (other.SDAY != null)
								return false;
						} else if (!this.SDAY.equals(other.SDAY))
							return false;

						if (this.SMONTH == null) {
							if (other.SMONTH != null)
								return false;
						} else if (!this.SMONTH.equals(other.SMONTH))
							return false;

						if (this.SYEAR == null) {
							if (other.SYEAR != null)
								return false;
						} else if (!this.SYEAR.equals(other.SYEAR))
							return false;

						if (this.DECADE == null) {
							if (other.DECADE != null)
								return false;
						} else if (!this.DECADE.equals(other.DECADE))
							return false;

						if (this.SOURCEFILEID == null) {
							if (other.SOURCEFILEID != null)
								return false;
						} else if (!this.SOURCEFILEID
								.equals(other.SOURCEFILEID))
							return false;

						if (this.LOCATIONID == null) {
							if (other.LOCATIONID != null)
								return false;
						} else if (!this.LOCATIONID.equals(other.LOCATIONID))
							return false;

						if (this.HABITAT == null) {
							if (other.HABITAT != null)
								return false;
						} else if (!this.HABITAT.equals(other.HABITAT))
							return false;

						if (this.FIELDNUMBER == null) {
							if (other.FIELDNUMBER != null)
								return false;
						} else if (!this.FIELDNUMBER.equals(other.FIELDNUMBER))
							return false;

						if (this.FIELDNOTES == null) {
							if (other.FIELDNOTES != null)
								return false;
						} else if (!this.FIELDNOTES.equals(other.FIELDNOTES))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
				AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
				java.util.Map<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6>();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] stop
				 */

				/**
				 * [tMemorizeRows_6 begin ] start
				 */

				ok_Hash.put("tMemorizeRows_6", false);
				start_Hash.put("tMemorizeRows_6", System.currentTimeMillis());

				currentComponent = "tMemorizeRows_6";

				int tos_count_tMemorizeRows_6 = 0;

				int iRows_tMemorizeRows_6 = 50;
				String[] EVENTID_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_EVENTID",
						EVENTID_tMemorizeRows_6);
				String[] RECORDEDBY_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_RECORDEDBY",
						RECORDEDBY_tMemorizeRows_6);
				java.util.Date[] EVENTDATE_tMemorizeRows_6 = new java.util.Date[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_EVENTDATE",
						EVENTDATE_tMemorizeRows_6);
				String[] EVENTREMARKS_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_EVENTREMARKS",
						EVENTREMARKS_tMemorizeRows_6);
				java.util.Date[] VERBATIMEVENTDATE_tMemorizeRows_6 = new java.util.Date[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_VERBATIMEVENTDATE",
						VERBATIMEVENTDATE_tMemorizeRows_6);
				Integer[] EDAY_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_EDAY", EDAY_tMemorizeRows_6);
				Integer[] EMONTH_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_EMONTH", EMONTH_tMemorizeRows_6);
				Integer[] EYEAR_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_EYEAR", EYEAR_tMemorizeRows_6);
				Integer[] SDAY_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_SDAY", SDAY_tMemorizeRows_6);
				Integer[] SMONTH_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_SMONTH", SMONTH_tMemorizeRows_6);
				Integer[] SYEAR_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_SYEAR", SYEAR_tMemorizeRows_6);
				Integer[] DECADE_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_DECADE", DECADE_tMemorizeRows_6);
				String[] SOURCEFILEID_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_SOURCEFILEID",
						SOURCEFILEID_tMemorizeRows_6);
				Integer[] LOCATIONID_tMemorizeRows_6 = new Integer[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_LOCATIONID",
						LOCATIONID_tMemorizeRows_6);
				String[] HABITAT_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_HABITAT",
						HABITAT_tMemorizeRows_6);
				String[] FIELDNUMBER_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_FIELDNUMBER",
						FIELDNUMBER_tMemorizeRows_6);
				String[] FIELDNOTES_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_FIELDNOTES",
						FIELDNOTES_tMemorizeRows_6);
				String[] fieldName_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_fieldName",
						fieldName_tMemorizeRows_6);
				String[] data_tMemorizeRows_6 = new String[iRows_tMemorizeRows_6];
				globalMap.put("tMemorizeRows_6_data", data_tMemorizeRows_6);
				globalMap.put("tMemorizeRows_6_NB_LINE_ROWS",
						iRows_tMemorizeRows_6);

				/**
				 * [tMemorizeRows_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<recolte_choicesStruct> tHash_Lookup_recolte_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<recolte_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<recolte_choicesStruct>) globalMap
						.get("tHash_Lookup_recolte_choices"));

				recolte_choicesStruct recolte_choicesHashKey = new recolte_choicesStruct();
				recolte_choicesStruct recolte_choicesDefault = new recolte_choicesStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				rows_recolteStruct rows_recolte_tmp = new rows_recolteStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tOracleInput_6 begin ] start
				 */

				ok_Hash.put("tOracleInput_6", false);
				start_Hash.put("tOracleInput_6", System.currentTimeMillis());

				currentComponent = "tOracleInput_6";

				int tos_count_tOracleInput_6 = 0;

				int nb_line_tOracleInput_6 = 0;
				java.sql.Connection conn_tOracleInput_6 = null;
				String driverClass_tOracleInput_6 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_6);

				String url_tOracleInput_6 = null;
				url_tOracleInput_6 = "jdbc:oracle:thin:@"
						+ context.recolnat_Server + ":" + context.recolnat_Port
						+ ":" + context.recolnat_Sid;

				String dbUser_tOracleInput_6 = context.recolnat_Login;

				final String decryptedPassword_tOracleInput_6 = context.recolnat_Password;

				String dbPwd_tOracleInput_6 = decryptedPassword_tOracleInput_6;

				java.util.Properties atnParamsPrope_tOracleInput_6 = new java.util.Properties();
				atnParamsPrope_tOracleInput_6
						.put("user", dbUser_tOracleInput_6);
				atnParamsPrope_tOracleInput_6.put("password",
						dbPwd_tOracleInput_6);
				if (context.recolnat_AdditionalParams != null
						&& !"\"\"".equals(context.recolnat_AdditionalParams)
						&& !"".equals(context.recolnat_AdditionalParams)) {
					atnParamsPrope_tOracleInput_6
							.load(new java.io.ByteArrayInputStream(
									context.recolnat_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}
				conn_tOracleInput_6 = java.sql.DriverManager.getConnection(
						url_tOracleInput_6, atnParamsPrope_tOracleInput_6);
				java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_6 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_6.next()) {
					sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_6)
						.setSessionTimeZone(sessionTimezone_tOracleInput_6);

				java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6
						.createStatement();

				String dbquery_tOracleInput_6 = "SELECT \n  "
						+ context.recolnat_Schema + ".RECOLTES.EVENTID, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.RECORDEDBY, \n  "
						+ context.recolnat_Schema + ".RECOLTES.EVENTDATE, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.EVENTREMARKS, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.VERBATIMEVENTDATE, \n  "
						+ context.recolnat_Schema + ".RECOLTES.EDAY, \n  "
						+ context.recolnat_Schema + ".RECOLTES.EMONTH, \n  "
						+ context.recolnat_Schema + ".RECOLTES.EYEAR, \n  "
						+ context.recolnat_Schema + ".RECOLTES.SDAY, \n  "
						+ context.recolnat_Schema + ".RECOLTES.SMONTH, \n  "
						+ context.recolnat_Schema + ".RECOLTES.SYEAR, \n  "
						+ context.recolnat_Schema + ".RECOLTES.DECADE, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.SOURCEFILEID, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.LOCATIONID, \n  "
						+ context.recolnat_Schema + ".RECOLTES.HABITAT, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.FIELDNUMBER, \n  "
						+ context.recolnat_Schema
						+ ".RECOLTES.FIELDNOTES\nFROM "
						+ context.recolnat_Schema
						+ ".RECOLTES\nWHERE EVENTID = '"
						+ ((String) globalMap.get("eventId")) + "'";

				globalMap.put("tOracleInput_6_QUERY", dbquery_tOracleInput_6);

				java.sql.ResultSet rs_tOracleInput_6 = null;
				try {
					rs_tOracleInput_6 = stmt_tOracleInput_6
							.executeQuery(dbquery_tOracleInput_6);
					java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6
							.getMetaData();
					int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6
							.getColumnCount();

					String tmpContent_tOracleInput_6 = null;

					while (rs_tOracleInput_6.next()) {
						nb_line_tOracleInput_6++;

						if (colQtyInRs_tOracleInput_6 < 1) {
							db_recolte.EVENTID = null;
						} else {

							if (rs_tOracleInput_6.getObject(1) != null) {
								db_recolte.EVENTID = rs_tOracleInput_6
										.getBytes(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_6 < 2) {
							db_recolte.RECORDEDBY = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(2);
							if (tmpContent_tOracleInput_6 != null) {
								db_recolte.RECORDEDBY = tmpContent_tOracleInput_6;
							} else {
								db_recolte.RECORDEDBY = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 3) {
							db_recolte.EVENTDATE = null;
						} else {

							if (rs_tOracleInput_6.getTimestamp(3) != null) {
								db_recolte.EVENTDATE = new java.util.Date(
										rs_tOracleInput_6.getTimestamp(3)
												.getTime());
							} else {
								db_recolte.EVENTDATE = null;
							}

						}
						if (colQtyInRs_tOracleInput_6 < 4) {
							db_recolte.EVENTREMARKS = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(4);
							if (tmpContent_tOracleInput_6 != null) {
								db_recolte.EVENTREMARKS = tmpContent_tOracleInput_6;
							} else {
								db_recolte.EVENTREMARKS = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 5) {
							db_recolte.VERBATIMEVENTDATE = null;
						} else {

							if (rs_tOracleInput_6.getTimestamp(5) != null) {
								db_recolte.VERBATIMEVENTDATE = new java.util.Date(
										rs_tOracleInput_6.getTimestamp(5)
												.getTime());
							} else {
								db_recolte.VERBATIMEVENTDATE = null;
							}

						}
						if (colQtyInRs_tOracleInput_6 < 6) {
							db_recolte.EDAY = null;
						} else {

							if (rs_tOracleInput_6.getObject(6) != null) {
								db_recolte.EDAY = rs_tOracleInput_6.getInt(6);
							} else {

								db_recolte.EDAY = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 7) {
							db_recolte.EMONTH = null;
						} else {

							if (rs_tOracleInput_6.getObject(7) != null) {
								db_recolte.EMONTH = rs_tOracleInput_6.getInt(7);
							} else {

								db_recolte.EMONTH = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 8) {
							db_recolte.EYEAR = null;
						} else {

							if (rs_tOracleInput_6.getObject(8) != null) {
								db_recolte.EYEAR = rs_tOracleInput_6.getInt(8);
							} else {

								db_recolte.EYEAR = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 9) {
							db_recolte.SDAY = null;
						} else {

							if (rs_tOracleInput_6.getObject(9) != null) {
								db_recolte.SDAY = rs_tOracleInput_6.getInt(9);
							} else {

								db_recolte.SDAY = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 10) {
							db_recolte.SMONTH = null;
						} else {

							if (rs_tOracleInput_6.getObject(10) != null) {
								db_recolte.SMONTH = rs_tOracleInput_6
										.getInt(10);
							} else {

								db_recolte.SMONTH = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 11) {
							db_recolte.SYEAR = null;
						} else {

							if (rs_tOracleInput_6.getObject(11) != null) {
								db_recolte.SYEAR = rs_tOracleInput_6.getInt(11);
							} else {

								db_recolte.SYEAR = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 12) {
							db_recolte.DECADE = null;
						} else {

							if (rs_tOracleInput_6.getObject(12) != null) {
								db_recolte.DECADE = rs_tOracleInput_6
										.getInt(12);
							} else {

								db_recolte.DECADE = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 13) {
							db_recolte.SOURCEFILEID = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(13);
							if (tmpContent_tOracleInput_6 != null) {
								db_recolte.SOURCEFILEID = tmpContent_tOracleInput_6;
							} else {
								db_recolte.SOURCEFILEID = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 14) {
							db_recolte.LOCATIONID = null;
						} else {

							if (rs_tOracleInput_6.getObject(14) != null) {
								db_recolte.LOCATIONID = rs_tOracleInput_6
										.getInt(14);
							} else {

								db_recolte.LOCATIONID = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 15) {
							db_recolte.HABITAT = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(15);
							if (tmpContent_tOracleInput_6 != null) {
								db_recolte.HABITAT = tmpContent_tOracleInput_6;
							} else {
								db_recolte.HABITAT = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 16) {
							db_recolte.FIELDNUMBER = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(16);
							if (tmpContent_tOracleInput_6 != null) {
								db_recolte.FIELDNUMBER = tmpContent_tOracleInput_6;
							} else {
								db_recolte.FIELDNUMBER = null;
							}
						}
						if (colQtyInRs_tOracleInput_6 < 17) {
							db_recolte.FIELDNOTES = null;
						} else {

							tmpContent_tOracleInput_6 = rs_tOracleInput_6
									.getString(17);
							if (tmpContent_tOracleInput_6 != null) {
								db_recolte.FIELDNOTES = tmpContent_tOracleInput_6;
							} else {
								db_recolte.FIELDNOTES = null;
							}
						}

						/**
						 * [tOracleInput_6 begin ] stop
						 */

						/**
						 * [tOracleInput_6 main ] start
						 */

						currentComponent = "tOracleInput_6";

						tos_count_tOracleInput_6++;

						/**
						 * [tOracleInput_6 main ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "recolte_choices"
						// /////////////////////////////////////////////

						boolean forceLooprecolte_choices = false;

						recolte_choicesStruct recolte_choicesObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_6 = false;

							recolte_choicesHashKey.className = "Recolte";

							recolte_choicesHashKey.relationId = javax.xml.bind.DatatypeConverter
									.printHexBinary(db_recolte.EVENTID);

							recolte_choicesHashKey.hashCodeDirty = true;

							tHash_Lookup_recolte_choices
									.lookup(recolte_choicesHashKey);

							if (!tHash_Lookup_recolte_choices.hasNext()) { // G_TM_M_090

								forceLooprecolte_choices = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprecolte_choices = true;
						} // G 21

						recolte_choicesStruct recolte_choices = null;

						while ((tHash_Lookup_recolte_choices != null && tHash_Lookup_recolte_choices
								.hasNext()) || forceLooprecolte_choices) { // G_TM_M_043

							// CALL close loop of lookup 'recolte_choices'

							recolte_choicesStruct fromLookup_recolte_choices = null;
							recolte_choices = recolte_choicesDefault;

							if (!forceLooprecolte_choices) { // G 46

								fromLookup_recolte_choices = tHash_Lookup_recolte_choices
										.next();

								if (fromLookup_recolte_choices != null) {
									recolte_choices = fromLookup_recolte_choices;
								}

							} // G 46

							forceLooprecolte_choices = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								rows_recolte = null;

								// # Output table : 'rows_recolte'
								rows_recolte_tmp.EVENTID = javax.xml.bind.DatatypeConverter
										.printHexBinary(db_recolte.EVENTID);
								rows_recolte_tmp.RECORDEDBY = db_recolte.RECORDEDBY;
								rows_recolte_tmp.EVENTDATE = db_recolte.EVENTDATE;
								rows_recolte_tmp.EVENTREMARKS = db_recolte.EVENTREMARKS;
								rows_recolte_tmp.VERBATIMEVENTDATE = db_recolte.VERBATIMEVENTDATE;
								rows_recolte_tmp.EDAY = db_recolte.EDAY;
								rows_recolte_tmp.EMONTH = db_recolte.EMONTH;
								rows_recolte_tmp.EYEAR = db_recolte.EYEAR;
								rows_recolte_tmp.SDAY = db_recolte.SDAY;
								rows_recolte_tmp.SMONTH = db_recolte.SMONTH;
								rows_recolte_tmp.SYEAR = db_recolte.SYEAR;
								rows_recolte_tmp.DECADE = db_recolte.DECADE;
								rows_recolte_tmp.SOURCEFILEID = db_recolte.SOURCEFILEID;
								rows_recolte_tmp.LOCATIONID = db_recolte.LOCATIONID;
								rows_recolte_tmp.HABITAT = db_recolte.HABITAT;
								rows_recolte_tmp.FIELDNUMBER = db_recolte.FIELDNUMBER;
								rows_recolte_tmp.FIELDNOTES = db_recolte.FIELDNOTES;
								rows_recolte_tmp.fieldName = recolte_choices.fieldName;
								rows_recolte_tmp.data = recolte_choices.data;
								rows_recolte = rows_recolte_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "rows_recolte"
							if (rows_recolte != null) {

								/**
								 * [tMemorizeRows_6 main ] start
								 */

								currentComponent = "tMemorizeRows_6";

								for (int i_tMemorizeRows_6 = iRows_tMemorizeRows_6 - 1; i_tMemorizeRows_6 > 0; i_tMemorizeRows_6--) {
									fieldName_tMemorizeRows_6[i_tMemorizeRows_6] = fieldName_tMemorizeRows_6[i_tMemorizeRows_6 - 1];
									data_tMemorizeRows_6[i_tMemorizeRows_6] = data_tMemorizeRows_6[i_tMemorizeRows_6 - 1];
								}
								fieldName_tMemorizeRows_6[0] = rows_recolte.fieldName;
								data_tMemorizeRows_6[0] = rows_recolte.data;

								row4 = rows_recolte;

								tos_count_tMemorizeRows_6++;

								/**
								 * [tMemorizeRows_6 main ] stop
								 */

								/**
								 * [tAggregateRow_6_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_6";

								currentComponent = "tAggregateRow_6_AGGOUT";

								operation_finder_tAggregateRow_6.EVENTID = row4.EVENTID;
								operation_finder_tAggregateRow_6.RECORDEDBY = row4.RECORDEDBY;
								operation_finder_tAggregateRow_6.EVENTDATE = row4.EVENTDATE;
								operation_finder_tAggregateRow_6.EVENTREMARKS = row4.EVENTREMARKS;
								operation_finder_tAggregateRow_6.VERBATIMEVENTDATE = row4.VERBATIMEVENTDATE;
								operation_finder_tAggregateRow_6.EDAY = row4.EDAY;
								operation_finder_tAggregateRow_6.EMONTH = row4.EMONTH;
								operation_finder_tAggregateRow_6.EYEAR = row4.EYEAR;
								operation_finder_tAggregateRow_6.SDAY = row4.SDAY;
								operation_finder_tAggregateRow_6.SMONTH = row4.SMONTH;
								operation_finder_tAggregateRow_6.SYEAR = row4.SYEAR;
								operation_finder_tAggregateRow_6.DECADE = row4.DECADE;
								operation_finder_tAggregateRow_6.SOURCEFILEID = row4.SOURCEFILEID;
								operation_finder_tAggregateRow_6.LOCATIONID = row4.LOCATIONID;
								operation_finder_tAggregateRow_6.HABITAT = row4.HABITAT;
								operation_finder_tAggregateRow_6.FIELDNUMBER = row4.FIELDNUMBER;
								operation_finder_tAggregateRow_6.FIELDNOTES = row4.FIELDNOTES;

								operation_finder_tAggregateRow_6.hashCodeDirty = true;

								operation_result_tAggregateRow_6 = hash_tAggregateRow_6
										.get(operation_finder_tAggregateRow_6);

								if (operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

									operation_result_tAggregateRow_6.EVENTID = operation_finder_tAggregateRow_6.EVENTID;
									operation_result_tAggregateRow_6.RECORDEDBY = operation_finder_tAggregateRow_6.RECORDEDBY;
									operation_result_tAggregateRow_6.EVENTDATE = operation_finder_tAggregateRow_6.EVENTDATE;
									operation_result_tAggregateRow_6.EVENTREMARKS = operation_finder_tAggregateRow_6.EVENTREMARKS;
									operation_result_tAggregateRow_6.VERBATIMEVENTDATE = operation_finder_tAggregateRow_6.VERBATIMEVENTDATE;
									operation_result_tAggregateRow_6.EDAY = operation_finder_tAggregateRow_6.EDAY;
									operation_result_tAggregateRow_6.EMONTH = operation_finder_tAggregateRow_6.EMONTH;
									operation_result_tAggregateRow_6.EYEAR = operation_finder_tAggregateRow_6.EYEAR;
									operation_result_tAggregateRow_6.SDAY = operation_finder_tAggregateRow_6.SDAY;
									operation_result_tAggregateRow_6.SMONTH = operation_finder_tAggregateRow_6.SMONTH;
									operation_result_tAggregateRow_6.SYEAR = operation_finder_tAggregateRow_6.SYEAR;
									operation_result_tAggregateRow_6.DECADE = operation_finder_tAggregateRow_6.DECADE;
									operation_result_tAggregateRow_6.SOURCEFILEID = operation_finder_tAggregateRow_6.SOURCEFILEID;
									operation_result_tAggregateRow_6.LOCATIONID = operation_finder_tAggregateRow_6.LOCATIONID;
									operation_result_tAggregateRow_6.HABITAT = operation_finder_tAggregateRow_6.HABITAT;
									operation_result_tAggregateRow_6.FIELDNUMBER = operation_finder_tAggregateRow_6.FIELDNUMBER;
									operation_result_tAggregateRow_6.FIELDNOTES = operation_finder_tAggregateRow_6.FIELDNOTES;

									hash_tAggregateRow_6.put(
											operation_result_tAggregateRow_6,
											operation_result_tAggregateRow_6);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_6_AGGOUT++;

								/**
								 * [tAggregateRow_6_AGGOUT main ] stop
								 */

							} // End of branch "rows_recolte"

						} // close loop of lookup 'recolte_choices' //
							// G_TM_M_043

						/**
						 * [tOracleInput_6 end ] start
						 */

						currentComponent = "tOracleInput_6";

					}
				} finally {
					stmt_tOracleInput_6.close();

					if (conn_tOracleInput_6 != null
							&& !conn_tOracleInput_6.isClosed()) {

						conn_tOracleInput_6.close();

					}

				}

				globalMap.put("tOracleInput_6_NB_LINE", nb_line_tOracleInput_6);

				ok_Hash.put("tOracleInput_6", true);
				end_Hash.put("tOracleInput_6", System.currentTimeMillis());

				/**
				 * [tOracleInput_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_recolte_choices != null) {
					tHash_Lookup_recolte_choices.endGet();
				}
				globalMap.remove("tHash_Lookup_recolte_choices");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMemorizeRows_6 end ] start
				 */

				currentComponent = "tMemorizeRows_6";

				ok_Hash.put("tMemorizeRows_6", true);
				end_Hash.put("tMemorizeRows_6", System.currentTimeMillis());

				/**
				 * [tMemorizeRows_6 end ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGOUT";

				ok_Hash.put("tAggregateRow_6_AGGOUT", true);
				end_Hash.put("tAggregateRow_6_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.exportpath + "/recoltes.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);
				if (filetFileOutputDelimited_6.exists()) {
					isFileGenerated_tFileOutputDelimited_6 = false;
				}
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				outtFileOutputDelimited_6 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_6, true),
								"UTF-8"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("EVENTID");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("RECORDEDBY");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("EVENTDATE");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("EVENTREMARKS");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("VERBATIMEVENTDATE");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("EDAY");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("EMONTH");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("EYEAR");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("SDAY");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("SMONTH");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("SYEAR");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("DECADE");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("SOURCEFILEID");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("LOCATIONID");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("HABITAT");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("FIELDNUMBER");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("FIELDNOTES");
					outtFileOutputDelimited_6
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6",
						outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGIN", false);
				start_Hash.put("tAggregateRow_6_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGIN";

				int tos_count_tAggregateRow_6_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6
						.values();

				globalMap.put("tAggregateRow_6_NB_LINE",
						values_tAggregateRow_6.size());

				for (AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600

					/**
					 * [tAggregateRow_6_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_6";

					currentComponent = "tAggregateRow_6_AGGIN";

					row_recolte.EVENTID = aggregated_row_tAggregateRow_6.EVENTID;

					row_recolte.RECORDEDBY = aggregated_row_tAggregateRow_6.RECORDEDBY;

					row_recolte.EVENTDATE = aggregated_row_tAggregateRow_6.EVENTDATE;

					row_recolte.EVENTREMARKS = aggregated_row_tAggregateRow_6.EVENTREMARKS;

					row_recolte.VERBATIMEVENTDATE = aggregated_row_tAggregateRow_6.VERBATIMEVENTDATE;

					row_recolte.EDAY = aggregated_row_tAggregateRow_6.EDAY;

					row_recolte.EMONTH = aggregated_row_tAggregateRow_6.EMONTH;

					row_recolte.EYEAR = aggregated_row_tAggregateRow_6.EYEAR;

					row_recolte.SDAY = aggregated_row_tAggregateRow_6.SDAY;

					row_recolte.SMONTH = aggregated_row_tAggregateRow_6.SMONTH;

					row_recolte.SYEAR = aggregated_row_tAggregateRow_6.SYEAR;

					row_recolte.DECADE = aggregated_row_tAggregateRow_6.DECADE;

					row_recolte.SOURCEFILEID = aggregated_row_tAggregateRow_6.SOURCEFILEID;

					row_recolte.LOCATIONID = aggregated_row_tAggregateRow_6.LOCATIONID;

					row_recolte.HABITAT = aggregated_row_tAggregateRow_6.HABITAT;

					row_recolte.FIELDNUMBER = aggregated_row_tAggregateRow_6.FIELDNUMBER;

					row_recolte.FIELDNOTES = aggregated_row_tAggregateRow_6.FIELDNOTES;

					tos_count_tAggregateRow_6_AGGIN++;

					/**
					 * [tAggregateRow_6_AGGIN main ] stop
					 */

					/**
					 * [tJavaRow_6 main ] start
					 */

					currentComponent = "tJavaRow_6";

					recolte_to_csv.EVENTID = row_recolte.EVENTID;
					recolte_to_csv.RECORDEDBY = row_recolte.RECORDEDBY;
					recolte_to_csv.EVENTDATE = row_recolte.EVENTDATE;
					recolte_to_csv.EVENTREMARKS = row_recolte.EVENTREMARKS;
					recolte_to_csv.VERBATIMEVENTDATE = row_recolte.VERBATIMEVENTDATE;
					recolte_to_csv.EDAY = row_recolte.EDAY;
					recolte_to_csv.EMONTH = row_recolte.EMONTH;
					recolte_to_csv.EYEAR = row_recolte.EYEAR;
					recolte_to_csv.SDAY = row_recolte.SDAY;
					recolte_to_csv.SMONTH = row_recolte.SMONTH;
					recolte_to_csv.SYEAR = row_recolte.SYEAR;
					recolte_to_csv.DECADE = row_recolte.DECADE;
					recolte_to_csv.SOURCEFILEID = row_recolte.SOURCEFILEID;
					recolte_to_csv.LOCATIONID = row_recolte.LOCATIONID;
					recolte_to_csv.HABITAT = row_recolte.HABITAT;
					recolte_to_csv.FIELDNUMBER = row_recolte.FIELDNUMBER;
					recolte_to_csv.FIELDNOTES = row_recolte.FIELDNOTES;

					if (row_recolte.LOCATIONID != null) {
						globalMap.put("locationId", row_recolte.LOCATIONID);
					} else {
						globalMap.put("locationId", null);
					}

					ConversionString.setChoices(recolte_to_csv,
							((String[]) globalMap
									.get("tMemorizeRows_6_fieldName")),
							(String[]) globalMap.get("tMemorizeRows_6_data"));

					nb_line_tJavaRow_6++;

					tos_count_tJavaRow_6++;

					/**
					 * [tJavaRow_6 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 main ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

					StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
					if (recolte_to_csv.EVENTID != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.EVENTID);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.RECORDEDBY != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.RECORDEDBY);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.EVENTDATE != null) {
						sb_tFileOutputDelimited_6.append(FormatterUtils
								.format_Date(recolte_to_csv.EVENTDATE,
										"dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.EVENTREMARKS != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.EVENTREMARKS);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.VERBATIMEVENTDATE != null) {
						sb_tFileOutputDelimited_6.append(FormatterUtils
								.format_Date(recolte_to_csv.VERBATIMEVENTDATE,
										"dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.EDAY != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.EDAY);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.EMONTH != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.EMONTH);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.EYEAR != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.EYEAR);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.SDAY != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.SDAY);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.SMONTH != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.SMONTH);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.SYEAR != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.SYEAR);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.DECADE != null) {
						sb_tFileOutputDelimited_6.append(recolte_to_csv.DECADE);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.SOURCEFILEID != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.SOURCEFILEID);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.LOCATIONID != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.LOCATIONID);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.HABITAT != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.HABITAT);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.FIELDNUMBER != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.FIELDNUMBER);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_tFileOutputDelimited_6);
					if (recolte_to_csv.FIELDNOTES != null) {
						sb_tFileOutputDelimited_6
								.append(recolte_to_csv.FIELDNOTES);
					}
					sb_tFileOutputDelimited_6
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

					nb_line_tFileOutputDelimited_6++;
					resourceMap.put("nb_line_tFileOutputDelimited_6",
							nb_line_tFileOutputDelimited_6);

					outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6
							.toString());

					tos_count_tFileOutputDelimited_6++;

					/**
					 * [tFileOutputDelimited_6 main ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_6";

					currentComponent = "tAggregateRow_6_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_6_AGGIN", true);
				end_Hash.put("tAggregateRow_6_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				if ((Integer) globalMap.get("locationId") != null) {

					tOracleInput_7Process(globalMap);
				}

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE",
						nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_6_AGGIN"
			globalMap.remove("tAggregateRow_6");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_recolte_choices");

			try {

				/**
				 * [tOracleInput_6 finally ] start
				 */

				currentComponent = "tOracleInput_6";

				/**
				 * [tOracleInput_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMemorizeRows_6 finally ] start
				 */

				currentComponent = "tMemorizeRows_6";

				/**
				 * [tMemorizeRows_6 finally ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGOUT";

				/**
				 * [tAggregateRow_6_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGIN";

				/**
				 * [tAggregateRow_6_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}

	public static class local_to_csvStruct implements
			routines.system.IPersistableRow<local_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.LOCATIONID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final local_to_csvStruct other = (local_to_csvStruct) obj;

			if (this.LOCATIONID != other.LOCATIONID)
				return false;

			return true;
		}

		public void copyDataTo(local_to_csvStruct other) {

			other.LOCATIONID = this.LOCATIONID;
			other.CONTINENT = this.CONTINENT;
			other.COUNTRY = this.COUNTRY;
			other.COUNTRYCODE = this.COUNTRYCODE;
			other.COUNTY = this.COUNTY;
			other.STATEPROVINCE = this.STATEPROVINCE;
			other.MUNICIPALITY = this.MUNICIPALITY;
			other.LOCALITY = this.LOCALITY;
			other.LOCATIONREMARKS = this.LOCATIONREMARKS;
			other.MINIMUMELEVATIONINMETERS = this.MINIMUMELEVATIONINMETERS;
			other.MAXIMUMELEVATIONINMETERS = this.MAXIMUMELEVATIONINMETERS;
			other.MINIMUMDEPTHINMETERS = this.MINIMUMDEPTHINMETERS;
			other.MAXIMUMDEPTHINMETERS = this.MAXIMUMDEPTHINMETERS;
			other.GEODETICDATUM = this.GEODETICDATUM;
			other.DECIMALLATITUDE = this.DECIMALLATITUDE;
			other.DECIMALLONGITUDE = this.DECIMALLONGITUDE;
			other.VERBATIMELEVATION = this.VERBATIMELEVATION;
			other.VERBATIMLOCALITY = this.VERBATIMLOCALITY;
			other.VERBATIMCOUNTRY = this.VERBATIMCOUNTRY;
			other.GEOREFERENCESOURCES = this.GEOREFERENCESOURCES;
			other.AVERAGEALTITUDEROUNDED = this.AVERAGEALTITUDEROUNDED;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(local_to_csvStruct other) {

			other.LOCATIONID = this.LOCATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(local_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATIONID,
					other.LOCATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_localStruct implements
			routines.system.IPersistableRow<row_localStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.LOCATIONID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_localStruct other = (row_localStruct) obj;

			if (this.LOCATIONID != other.LOCATIONID)
				return false;

			return true;
		}

		public void copyDataTo(row_localStruct other) {

			other.LOCATIONID = this.LOCATIONID;
			other.CONTINENT = this.CONTINENT;
			other.COUNTRY = this.COUNTRY;
			other.COUNTRYCODE = this.COUNTRYCODE;
			other.COUNTY = this.COUNTY;
			other.STATEPROVINCE = this.STATEPROVINCE;
			other.MUNICIPALITY = this.MUNICIPALITY;
			other.LOCALITY = this.LOCALITY;
			other.LOCATIONREMARKS = this.LOCATIONREMARKS;
			other.MINIMUMELEVATIONINMETERS = this.MINIMUMELEVATIONINMETERS;
			other.MAXIMUMELEVATIONINMETERS = this.MAXIMUMELEVATIONINMETERS;
			other.MINIMUMDEPTHINMETERS = this.MINIMUMDEPTHINMETERS;
			other.MAXIMUMDEPTHINMETERS = this.MAXIMUMDEPTHINMETERS;
			other.GEODETICDATUM = this.GEODETICDATUM;
			other.DECIMALLATITUDE = this.DECIMALLATITUDE;
			other.DECIMALLONGITUDE = this.DECIMALLONGITUDE;
			other.VERBATIMELEVATION = this.VERBATIMELEVATION;
			other.VERBATIMLOCALITY = this.VERBATIMLOCALITY;
			other.VERBATIMCOUNTRY = this.VERBATIMCOUNTRY;
			other.GEOREFERENCESOURCES = this.GEOREFERENCESOURCES;
			other.AVERAGEALTITUDEROUNDED = this.AVERAGEALTITUDEROUNDED;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(row_localStruct other) {

			other.LOCATIONID = this.LOCATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_localStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATIONID,
					other.LOCATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_7 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.LOCATIONID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_7 other = (OnRowsEndStructtAggregateRow_7) obj;

			if (this.LOCATIONID != other.LOCATIONID)
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_7 other) {

			other.LOCATIONID = this.LOCATIONID;
			other.CONTINENT = this.CONTINENT;
			other.COUNTRY = this.COUNTRY;
			other.COUNTRYCODE = this.COUNTRYCODE;
			other.COUNTY = this.COUNTY;
			other.STATEPROVINCE = this.STATEPROVINCE;
			other.MUNICIPALITY = this.MUNICIPALITY;
			other.LOCALITY = this.LOCALITY;
			other.LOCATIONREMARKS = this.LOCATIONREMARKS;
			other.MINIMUMELEVATIONINMETERS = this.MINIMUMELEVATIONINMETERS;
			other.MAXIMUMELEVATIONINMETERS = this.MAXIMUMELEVATIONINMETERS;
			other.MINIMUMDEPTHINMETERS = this.MINIMUMDEPTHINMETERS;
			other.MAXIMUMDEPTHINMETERS = this.MAXIMUMDEPTHINMETERS;
			other.GEODETICDATUM = this.GEODETICDATUM;
			other.DECIMALLATITUDE = this.DECIMALLATITUDE;
			other.DECIMALLONGITUDE = this.DECIMALLONGITUDE;
			other.VERBATIMELEVATION = this.VERBATIMELEVATION;
			other.VERBATIMLOCALITY = this.VERBATIMLOCALITY;
			other.VERBATIMCOUNTRY = this.VERBATIMCOUNTRY;
			other.GEOREFERENCESOURCES = this.GEOREFERENCESOURCES;
			other.AVERAGEALTITUDEROUNDED = this.AVERAGEALTITUDEROUNDED;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_7 other) {

			other.LOCATIONID = this.LOCATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATIONID,
					other.LOCATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.LOCATIONID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.LOCATIONID != other.LOCATIONID)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.LOCATIONID = this.LOCATIONID;
			other.CONTINENT = this.CONTINENT;
			other.COUNTRY = this.COUNTRY;
			other.COUNTRYCODE = this.COUNTRYCODE;
			other.COUNTY = this.COUNTY;
			other.STATEPROVINCE = this.STATEPROVINCE;
			other.MUNICIPALITY = this.MUNICIPALITY;
			other.LOCALITY = this.LOCALITY;
			other.LOCATIONREMARKS = this.LOCATIONREMARKS;
			other.MINIMUMELEVATIONINMETERS = this.MINIMUMELEVATIONINMETERS;
			other.MAXIMUMELEVATIONINMETERS = this.MAXIMUMELEVATIONINMETERS;
			other.MINIMUMDEPTHINMETERS = this.MINIMUMDEPTHINMETERS;
			other.MAXIMUMDEPTHINMETERS = this.MAXIMUMDEPTHINMETERS;
			other.GEODETICDATUM = this.GEODETICDATUM;
			other.DECIMALLATITUDE = this.DECIMALLATITUDE;
			other.DECIMALLONGITUDE = this.DECIMALLONGITUDE;
			other.VERBATIMELEVATION = this.VERBATIMELEVATION;
			other.VERBATIMLOCALITY = this.VERBATIMLOCALITY;
			other.VERBATIMCOUNTRY = this.VERBATIMCOUNTRY;
			other.GEOREFERENCESOURCES = this.GEOREFERENCESOURCES;
			other.AVERAGEALTITUDEROUNDED = this.AVERAGEALTITUDEROUNDED;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.LOCATIONID = this.LOCATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATIONID,
					other.LOCATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rows_localisationsStruct implements
			routines.system.IPersistableRow<rows_localisationsStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.LOCATIONID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rows_localisationsStruct other = (rows_localisationsStruct) obj;

			if (this.LOCATIONID != other.LOCATIONID)
				return false;

			return true;
		}

		public void copyDataTo(rows_localisationsStruct other) {

			other.LOCATIONID = this.LOCATIONID;
			other.CONTINENT = this.CONTINENT;
			other.COUNTRY = this.COUNTRY;
			other.COUNTRYCODE = this.COUNTRYCODE;
			other.COUNTY = this.COUNTY;
			other.STATEPROVINCE = this.STATEPROVINCE;
			other.MUNICIPALITY = this.MUNICIPALITY;
			other.LOCALITY = this.LOCALITY;
			other.LOCATIONREMARKS = this.LOCATIONREMARKS;
			other.MINIMUMELEVATIONINMETERS = this.MINIMUMELEVATIONINMETERS;
			other.MAXIMUMELEVATIONINMETERS = this.MAXIMUMELEVATIONINMETERS;
			other.MINIMUMDEPTHINMETERS = this.MINIMUMDEPTHINMETERS;
			other.MAXIMUMDEPTHINMETERS = this.MAXIMUMDEPTHINMETERS;
			other.GEODETICDATUM = this.GEODETICDATUM;
			other.DECIMALLATITUDE = this.DECIMALLATITUDE;
			other.DECIMALLONGITUDE = this.DECIMALLONGITUDE;
			other.VERBATIMELEVATION = this.VERBATIMELEVATION;
			other.VERBATIMLOCALITY = this.VERBATIMLOCALITY;
			other.VERBATIMCOUNTRY = this.VERBATIMCOUNTRY;
			other.GEOREFERENCESOURCES = this.GEOREFERENCESOURCES;
			other.AVERAGEALTITUDEROUNDED = this.AVERAGEALTITUDEROUNDED;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(rows_localisationsStruct other) {

			other.LOCATIONID = this.LOCATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rows_localisationsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATIONID,
					other.LOCATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_localisationsStruct implements
			routines.system.IPersistableRow<db_localisationsStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_localisationsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_7Struct implements
			routines.system.IPersistableRow<after_tOracleInput_7Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int LOCATIONID;

		public int getLOCATIONID() {
			return this.LOCATIONID;
		}

		public String CONTINENT;

		public String getCONTINENT() {
			return this.CONTINENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COUNTRYCODE;

		public String getCOUNTRYCODE() {
			return this.COUNTRYCODE;
		}

		public String COUNTY;

		public String getCOUNTY() {
			return this.COUNTY;
		}

		public String STATEPROVINCE;

		public String getSTATEPROVINCE() {
			return this.STATEPROVINCE;
		}

		public String MUNICIPALITY;

		public String getMUNICIPALITY() {
			return this.MUNICIPALITY;
		}

		public String LOCALITY;

		public String getLOCALITY() {
			return this.LOCALITY;
		}

		public String LOCATIONREMARKS;

		public String getLOCATIONREMARKS() {
			return this.LOCATIONREMARKS;
		}

		public Float MINIMUMELEVATIONINMETERS;

		public Float getMINIMUMELEVATIONINMETERS() {
			return this.MINIMUMELEVATIONINMETERS;
		}

		public Float MAXIMUMELEVATIONINMETERS;

		public Float getMAXIMUMELEVATIONINMETERS() {
			return this.MAXIMUMELEVATIONINMETERS;
		}

		public Float MINIMUMDEPTHINMETERS;

		public Float getMINIMUMDEPTHINMETERS() {
			return this.MINIMUMDEPTHINMETERS;
		}

		public Float MAXIMUMDEPTHINMETERS;

		public Float getMAXIMUMDEPTHINMETERS() {
			return this.MAXIMUMDEPTHINMETERS;
		}

		public String GEODETICDATUM;

		public String getGEODETICDATUM() {
			return this.GEODETICDATUM;
		}

		public Float DECIMALLATITUDE;

		public Float getDECIMALLATITUDE() {
			return this.DECIMALLATITUDE;
		}

		public Float DECIMALLONGITUDE;

		public Float getDECIMALLONGITUDE() {
			return this.DECIMALLONGITUDE;
		}

		public String VERBATIMELEVATION;

		public String getVERBATIMELEVATION() {
			return this.VERBATIMELEVATION;
		}

		public String VERBATIMLOCALITY;

		public String getVERBATIMLOCALITY() {
			return this.VERBATIMLOCALITY;
		}

		public String VERBATIMCOUNTRY;

		public String getVERBATIMCOUNTRY() {
			return this.VERBATIMCOUNTRY;
		}

		public String GEOREFERENCESOURCES;

		public String getGEOREFERENCESOURCES() {
			return this.GEOREFERENCESOURCES;
		}

		public Float AVERAGEALTITUDEROUNDED;

		public Float getAVERAGEALTITUDEROUNDED() {
			return this.AVERAGEALTITUDEROUNDED;
		}

		public Boolean HASCOORDINATES;

		public Boolean getHASCOORDINATES() {
			return this.HASCOORDINATES;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.LOCATIONID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tOracleInput_7Struct other = (after_tOracleInput_7Struct) obj;

			if (this.LOCATIONID != other.LOCATIONID)
				return false;

			return true;
		}

		public void copyDataTo(after_tOracleInput_7Struct other) {

			other.LOCATIONID = this.LOCATIONID;
			other.CONTINENT = this.CONTINENT;
			other.COUNTRY = this.COUNTRY;
			other.COUNTRYCODE = this.COUNTRYCODE;
			other.COUNTY = this.COUNTY;
			other.STATEPROVINCE = this.STATEPROVINCE;
			other.MUNICIPALITY = this.MUNICIPALITY;
			other.LOCALITY = this.LOCALITY;
			other.LOCATIONREMARKS = this.LOCATIONREMARKS;
			other.MINIMUMELEVATIONINMETERS = this.MINIMUMELEVATIONINMETERS;
			other.MAXIMUMELEVATIONINMETERS = this.MAXIMUMELEVATIONINMETERS;
			other.MINIMUMDEPTHINMETERS = this.MINIMUMDEPTHINMETERS;
			other.MAXIMUMDEPTHINMETERS = this.MAXIMUMDEPTHINMETERS;
			other.GEODETICDATUM = this.GEODETICDATUM;
			other.DECIMALLATITUDE = this.DECIMALLATITUDE;
			other.DECIMALLONGITUDE = this.DECIMALLONGITUDE;
			other.VERBATIMELEVATION = this.VERBATIMELEVATION;
			other.VERBATIMLOCALITY = this.VERBATIMLOCALITY;
			other.VERBATIMCOUNTRY = this.VERBATIMCOUNTRY;
			other.GEOREFERENCESOURCES = this.GEOREFERENCESOURCES;
			other.AVERAGEALTITUDEROUNDED = this.AVERAGEALTITUDEROUNDED;
			other.HASCOORDINATES = this.HASCOORDINATES;
			other.SOURCEFILEID = this.SOURCEFILEID;

		}

		public void copyKeysDataTo(after_tOracleInput_7Struct other) {

			other.LOCATIONID = this.LOCATIONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.LOCATIONID = dis.readInt();

					this.CONTINENT = readString(dis);

					this.COUNTRY = readString(dis);

					this.COUNTRYCODE = readString(dis);

					this.COUNTY = readString(dis);

					this.STATEPROVINCE = readString(dis);

					this.MUNICIPALITY = readString(dis);

					this.LOCALITY = readString(dis);

					this.LOCATIONREMARKS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMELEVATIONINMETERS = null;
					} else {
						this.MINIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMELEVATIONINMETERS = null;
					} else {
						this.MAXIMUMELEVATIONINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MINIMUMDEPTHINMETERS = null;
					} else {
						this.MINIMUMDEPTHINMETERS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MAXIMUMDEPTHINMETERS = null;
					} else {
						this.MAXIMUMDEPTHINMETERS = dis.readFloat();
					}

					this.GEODETICDATUM = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLATITUDE = null;
					} else {
						this.DECIMALLATITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECIMALLONGITUDE = null;
					} else {
						this.DECIMALLONGITUDE = dis.readFloat();
					}

					this.VERBATIMELEVATION = readString(dis);

					this.VERBATIMLOCALITY = readString(dis);

					this.VERBATIMCOUNTRY = readString(dis);

					this.GEOREFERENCESOURCES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AVERAGEALTITUDEROUNDED = null;
					} else {
						this.AVERAGEALTITUDEROUNDED = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HASCOORDINATES = null;
					} else {
						this.HASCOORDINATES = dis.readBoolean();
					}

					this.SOURCEFILEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.LOCATIONID);

				// String

				writeString(this.CONTINENT, dos);

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.COUNTRYCODE, dos);

				// String

				writeString(this.COUNTY, dos);

				// String

				writeString(this.STATEPROVINCE, dos);

				// String

				writeString(this.MUNICIPALITY, dos);

				// String

				writeString(this.LOCALITY, dos);

				// String

				writeString(this.LOCATIONREMARKS, dos);

				// Float

				if (this.MINIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MAXIMUMELEVATIONINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMELEVATIONINMETERS);
				}

				// Float

				if (this.MINIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MINIMUMDEPTHINMETERS);
				}

				// Float

				if (this.MAXIMUMDEPTHINMETERS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MAXIMUMDEPTHINMETERS);
				}

				// String

				writeString(this.GEODETICDATUM, dos);

				// Float

				if (this.DECIMALLATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLATITUDE);
				}

				// Float

				if (this.DECIMALLONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DECIMALLONGITUDE);
				}

				// String

				writeString(this.VERBATIMELEVATION, dos);

				// String

				writeString(this.VERBATIMLOCALITY, dos);

				// String

				writeString(this.VERBATIMCOUNTRY, dos);

				// String

				writeString(this.GEOREFERENCESOURCES, dos);

				// Float

				if (this.AVERAGEALTITUDEROUNDED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVERAGEALTITUDEROUNDED);
				}

				// Boolean

				if (this.HASCOORDINATES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HASCOORDINATES);
				}

				// String

				writeString(this.SOURCEFILEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATIONID=" + String.valueOf(LOCATIONID));
			sb.append(",CONTINENT=" + CONTINENT);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",COUNTRYCODE=" + COUNTRYCODE);
			sb.append(",COUNTY=" + COUNTY);
			sb.append(",STATEPROVINCE=" + STATEPROVINCE);
			sb.append(",MUNICIPALITY=" + MUNICIPALITY);
			sb.append(",LOCALITY=" + LOCALITY);
			sb.append(",LOCATIONREMARKS=" + LOCATIONREMARKS);
			sb.append(",MINIMUMELEVATIONINMETERS="
					+ String.valueOf(MINIMUMELEVATIONINMETERS));
			sb.append(",MAXIMUMELEVATIONINMETERS="
					+ String.valueOf(MAXIMUMELEVATIONINMETERS));
			sb.append(",MINIMUMDEPTHINMETERS="
					+ String.valueOf(MINIMUMDEPTHINMETERS));
			sb.append(",MAXIMUMDEPTHINMETERS="
					+ String.valueOf(MAXIMUMDEPTHINMETERS));
			sb.append(",GEODETICDATUM=" + GEODETICDATUM);
			sb.append(",DECIMALLATITUDE=" + String.valueOf(DECIMALLATITUDE));
			sb.append(",DECIMALLONGITUDE=" + String.valueOf(DECIMALLONGITUDE));
			sb.append(",VERBATIMELEVATION=" + VERBATIMELEVATION);
			sb.append(",VERBATIMLOCALITY=" + VERBATIMLOCALITY);
			sb.append(",VERBATIMCOUNTRY=" + VERBATIMCOUNTRY);
			sb.append(",GEOREFERENCESOURCES=" + GEOREFERENCESOURCES);
			sb.append(",AVERAGEALTITUDEROUNDED="
					+ String.valueOf(AVERAGEALTITUDEROUNDED));
			sb.append(",HASCOORDINATES=" + String.valueOf(HASCOORDINATES));
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATIONID,
					other.LOCATIONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				db_localisationsStruct db_localisations = new db_localisationsStruct();
				rows_localisationsStruct rows_localisations = new rows_localisationsStruct();
				rows_localisationsStruct row5 = rows_localisations;
				row_localStruct row_local = new row_localStruct();
				local_to_csvStruct local_to_csv = new local_to_csvStruct();

				/**
				 * [tAggregateRow_7_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_7_AGGOUT", false);
				start_Hash.put("tAggregateRow_7_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGOUT";

				int tos_count_tAggregateRow_7_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int LOCATIONID;
					String CONTINENT;
					String COUNTRY;
					String COUNTRYCODE;
					String COUNTY;
					String STATEPROVINCE;
					String MUNICIPALITY;
					String LOCALITY;
					String LOCATIONREMARKS;
					Float MINIMUMELEVATIONINMETERS;
					Float MAXIMUMELEVATIONINMETERS;
					Float MINIMUMDEPTHINMETERS;
					Float MAXIMUMDEPTHINMETERS;
					String GEODETICDATUM;
					Float DECIMALLATITUDE;
					Float DECIMALLONGITUDE;
					String VERBATIMELEVATION;
					String VERBATIMLOCALITY;
					String VERBATIMCOUNTRY;
					String GEOREFERENCESOURCES;
					Float AVERAGEALTITUDEROUNDED;
					Boolean HASCOORDINATES;
					String SOURCEFILEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.LOCATIONID;

							result = prime
									* result
									+ ((this.CONTINENT == null) ? 0
											: this.CONTINENT.hashCode());

							result = prime
									* result
									+ ((this.COUNTRY == null) ? 0
											: this.COUNTRY.hashCode());

							result = prime
									* result
									+ ((this.COUNTRYCODE == null) ? 0
											: this.COUNTRYCODE.hashCode());

							result = prime
									* result
									+ ((this.COUNTY == null) ? 0 : this.COUNTY
											.hashCode());

							result = prime
									* result
									+ ((this.STATEPROVINCE == null) ? 0
											: this.STATEPROVINCE.hashCode());

							result = prime
									* result
									+ ((this.MUNICIPALITY == null) ? 0
											: this.MUNICIPALITY.hashCode());

							result = prime
									* result
									+ ((this.LOCALITY == null) ? 0
											: this.LOCALITY.hashCode());

							result = prime
									* result
									+ ((this.LOCATIONREMARKS == null) ? 0
											: this.LOCATIONREMARKS.hashCode());

							result = prime
									* result
									+ ((this.MINIMUMELEVATIONINMETERS == null) ? 0
											: this.MINIMUMELEVATIONINMETERS
													.hashCode());

							result = prime
									* result
									+ ((this.MAXIMUMELEVATIONINMETERS == null) ? 0
											: this.MAXIMUMELEVATIONINMETERS
													.hashCode());

							result = prime
									* result
									+ ((this.MINIMUMDEPTHINMETERS == null) ? 0
											: this.MINIMUMDEPTHINMETERS
													.hashCode());

							result = prime
									* result
									+ ((this.MAXIMUMDEPTHINMETERS == null) ? 0
											: this.MAXIMUMDEPTHINMETERS
													.hashCode());

							result = prime
									* result
									+ ((this.GEODETICDATUM == null) ? 0
											: this.GEODETICDATUM.hashCode());

							result = prime
									* result
									+ ((this.DECIMALLATITUDE == null) ? 0
											: this.DECIMALLATITUDE.hashCode());

							result = prime
									* result
									+ ((this.DECIMALLONGITUDE == null) ? 0
											: this.DECIMALLONGITUDE.hashCode());

							result = prime
									* result
									+ ((this.VERBATIMELEVATION == null) ? 0
											: this.VERBATIMELEVATION.hashCode());

							result = prime
									* result
									+ ((this.VERBATIMLOCALITY == null) ? 0
											: this.VERBATIMLOCALITY.hashCode());

							result = prime
									* result
									+ ((this.VERBATIMCOUNTRY == null) ? 0
											: this.VERBATIMCOUNTRY.hashCode());

							result = prime
									* result
									+ ((this.GEOREFERENCESOURCES == null) ? 0
											: this.GEOREFERENCESOURCES
													.hashCode());

							result = prime
									* result
									+ ((this.AVERAGEALTITUDEROUNDED == null) ? 0
											: this.AVERAGEALTITUDEROUNDED
													.hashCode());

							result = prime
									* result
									+ ((this.HASCOORDINATES == null) ? 0
											: this.HASCOORDINATES.hashCode());

							result = prime
									* result
									+ ((this.SOURCEFILEID == null) ? 0
											: this.SOURCEFILEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;

						if (this.LOCATIONID != other.LOCATIONID)
							return false;

						if (this.CONTINENT == null) {
							if (other.CONTINENT != null)
								return false;
						} else if (!this.CONTINENT.equals(other.CONTINENT))
							return false;

						if (this.COUNTRY == null) {
							if (other.COUNTRY != null)
								return false;
						} else if (!this.COUNTRY.equals(other.COUNTRY))
							return false;

						if (this.COUNTRYCODE == null) {
							if (other.COUNTRYCODE != null)
								return false;
						} else if (!this.COUNTRYCODE.equals(other.COUNTRYCODE))
							return false;

						if (this.COUNTY == null) {
							if (other.COUNTY != null)
								return false;
						} else if (!this.COUNTY.equals(other.COUNTY))
							return false;

						if (this.STATEPROVINCE == null) {
							if (other.STATEPROVINCE != null)
								return false;
						} else if (!this.STATEPROVINCE
								.equals(other.STATEPROVINCE))
							return false;

						if (this.MUNICIPALITY == null) {
							if (other.MUNICIPALITY != null)
								return false;
						} else if (!this.MUNICIPALITY
								.equals(other.MUNICIPALITY))
							return false;

						if (this.LOCALITY == null) {
							if (other.LOCALITY != null)
								return false;
						} else if (!this.LOCALITY.equals(other.LOCALITY))
							return false;

						if (this.LOCATIONREMARKS == null) {
							if (other.LOCATIONREMARKS != null)
								return false;
						} else if (!this.LOCATIONREMARKS
								.equals(other.LOCATIONREMARKS))
							return false;

						if (this.MINIMUMELEVATIONINMETERS == null) {
							if (other.MINIMUMELEVATIONINMETERS != null)
								return false;
						} else if (!this.MINIMUMELEVATIONINMETERS
								.equals(other.MINIMUMELEVATIONINMETERS))
							return false;

						if (this.MAXIMUMELEVATIONINMETERS == null) {
							if (other.MAXIMUMELEVATIONINMETERS != null)
								return false;
						} else if (!this.MAXIMUMELEVATIONINMETERS
								.equals(other.MAXIMUMELEVATIONINMETERS))
							return false;

						if (this.MINIMUMDEPTHINMETERS == null) {
							if (other.MINIMUMDEPTHINMETERS != null)
								return false;
						} else if (!this.MINIMUMDEPTHINMETERS
								.equals(other.MINIMUMDEPTHINMETERS))
							return false;

						if (this.MAXIMUMDEPTHINMETERS == null) {
							if (other.MAXIMUMDEPTHINMETERS != null)
								return false;
						} else if (!this.MAXIMUMDEPTHINMETERS
								.equals(other.MAXIMUMDEPTHINMETERS))
							return false;

						if (this.GEODETICDATUM == null) {
							if (other.GEODETICDATUM != null)
								return false;
						} else if (!this.GEODETICDATUM
								.equals(other.GEODETICDATUM))
							return false;

						if (this.DECIMALLATITUDE == null) {
							if (other.DECIMALLATITUDE != null)
								return false;
						} else if (!this.DECIMALLATITUDE
								.equals(other.DECIMALLATITUDE))
							return false;

						if (this.DECIMALLONGITUDE == null) {
							if (other.DECIMALLONGITUDE != null)
								return false;
						} else if (!this.DECIMALLONGITUDE
								.equals(other.DECIMALLONGITUDE))
							return false;

						if (this.VERBATIMELEVATION == null) {
							if (other.VERBATIMELEVATION != null)
								return false;
						} else if (!this.VERBATIMELEVATION
								.equals(other.VERBATIMELEVATION))
							return false;

						if (this.VERBATIMLOCALITY == null) {
							if (other.VERBATIMLOCALITY != null)
								return false;
						} else if (!this.VERBATIMLOCALITY
								.equals(other.VERBATIMLOCALITY))
							return false;

						if (this.VERBATIMCOUNTRY == null) {
							if (other.VERBATIMCOUNTRY != null)
								return false;
						} else if (!this.VERBATIMCOUNTRY
								.equals(other.VERBATIMCOUNTRY))
							return false;

						if (this.GEOREFERENCESOURCES == null) {
							if (other.GEOREFERENCESOURCES != null)
								return false;
						} else if (!this.GEOREFERENCESOURCES
								.equals(other.GEOREFERENCESOURCES))
							return false;

						if (this.AVERAGEALTITUDEROUNDED == null) {
							if (other.AVERAGEALTITUDEROUNDED != null)
								return false;
						} else if (!this.AVERAGEALTITUDEROUNDED
								.equals(other.AVERAGEALTITUDEROUNDED))
							return false;

						if (this.HASCOORDINATES == null) {
							if (other.HASCOORDINATES != null)
								return false;
						} else if (!this.HASCOORDINATES
								.equals(other.HASCOORDINATES))
							return false;

						if (this.SOURCEFILEID == null) {
							if (other.SOURCEFILEID != null)
								return false;
						} else if (!this.SOURCEFILEID
								.equals(other.SOURCEFILEID))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
				AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
				java.util.Map<AggOperationStruct_tAggregateRow_7, AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7, AggOperationStruct_tAggregateRow_7>();

				/**
				 * [tAggregateRow_7_AGGOUT begin ] stop
				 */

				/**
				 * [tMemorizeRows_7 begin ] start
				 */

				ok_Hash.put("tMemorizeRows_7", false);
				start_Hash.put("tMemorizeRows_7", System.currentTimeMillis());

				currentComponent = "tMemorizeRows_7";

				int tos_count_tMemorizeRows_7 = 0;

				int iRows_tMemorizeRows_7 = 50;
				Integer[] LOCATIONID_tMemorizeRows_7 = new Integer[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_LOCATIONID",
						LOCATIONID_tMemorizeRows_7);
				String[] CONTINENT_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_CONTINENT",
						CONTINENT_tMemorizeRows_7);
				String[] COUNTRY_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_COUNTRY",
						COUNTRY_tMemorizeRows_7);
				String[] COUNTRYCODE_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_COUNTRYCODE",
						COUNTRYCODE_tMemorizeRows_7);
				String[] COUNTY_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_COUNTY", COUNTY_tMemorizeRows_7);
				String[] STATEPROVINCE_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_STATEPROVINCE",
						STATEPROVINCE_tMemorizeRows_7);
				String[] MUNICIPALITY_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_MUNICIPALITY",
						MUNICIPALITY_tMemorizeRows_7);
				String[] LOCALITY_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_LOCALITY",
						LOCALITY_tMemorizeRows_7);
				String[] LOCATIONREMARKS_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_LOCATIONREMARKS",
						LOCATIONREMARKS_tMemorizeRows_7);
				Float[] MINIMUMELEVATIONINMETERS_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_MINIMUMELEVATIONINMETERS",
						MINIMUMELEVATIONINMETERS_tMemorizeRows_7);
				Float[] MAXIMUMELEVATIONINMETERS_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_MAXIMUMELEVATIONINMETERS",
						MAXIMUMELEVATIONINMETERS_tMemorizeRows_7);
				Float[] MINIMUMDEPTHINMETERS_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_MINIMUMDEPTHINMETERS",
						MINIMUMDEPTHINMETERS_tMemorizeRows_7);
				Float[] MAXIMUMDEPTHINMETERS_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_MAXIMUMDEPTHINMETERS",
						MAXIMUMDEPTHINMETERS_tMemorizeRows_7);
				String[] GEODETICDATUM_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_GEODETICDATUM",
						GEODETICDATUM_tMemorizeRows_7);
				Float[] DECIMALLATITUDE_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_DECIMALLATITUDE",
						DECIMALLATITUDE_tMemorizeRows_7);
				Float[] DECIMALLONGITUDE_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_DECIMALLONGITUDE",
						DECIMALLONGITUDE_tMemorizeRows_7);
				String[] VERBATIMELEVATION_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_VERBATIMELEVATION",
						VERBATIMELEVATION_tMemorizeRows_7);
				String[] VERBATIMLOCALITY_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_VERBATIMLOCALITY",
						VERBATIMLOCALITY_tMemorizeRows_7);
				String[] VERBATIMCOUNTRY_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_VERBATIMCOUNTRY",
						VERBATIMCOUNTRY_tMemorizeRows_7);
				String[] GEOREFERENCESOURCES_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_GEOREFERENCESOURCES",
						GEOREFERENCESOURCES_tMemorizeRows_7);
				Float[] AVERAGEALTITUDEROUNDED_tMemorizeRows_7 = new Float[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_AVERAGEALTITUDEROUNDED",
						AVERAGEALTITUDEROUNDED_tMemorizeRows_7);
				Boolean[] HASCOORDINATES_tMemorizeRows_7 = new Boolean[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_HASCOORDINATES",
						HASCOORDINATES_tMemorizeRows_7);
				String[] SOURCEFILEID_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_SOURCEFILEID",
						SOURCEFILEID_tMemorizeRows_7);
				String[] fieldName_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_fieldName",
						fieldName_tMemorizeRows_7);
				String[] data_tMemorizeRows_7 = new String[iRows_tMemorizeRows_7];
				globalMap.put("tMemorizeRows_7_data", data_tMemorizeRows_7);
				globalMap.put("tMemorizeRows_7_NB_LINE_ROWS",
						iRows_tMemorizeRows_7);

				/**
				 * [tMemorizeRows_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<localisation_choicesStruct> tHash_Lookup_localisation_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<localisation_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<localisation_choicesStruct>) globalMap
						.get("tHash_Lookup_localisation_choices"));

				localisation_choicesStruct localisation_choicesHashKey = new localisation_choicesStruct();
				localisation_choicesStruct localisation_choicesDefault = new localisation_choicesStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				rows_localisationsStruct rows_localisations_tmp = new rows_localisationsStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tOracleInput_7 begin ] start
				 */

				ok_Hash.put("tOracleInput_7", false);
				start_Hash.put("tOracleInput_7", System.currentTimeMillis());

				currentComponent = "tOracleInput_7";

				int tos_count_tOracleInput_7 = 0;

				int nb_line_tOracleInput_7 = 0;
				java.sql.Connection conn_tOracleInput_7 = null;
				String driverClass_tOracleInput_7 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_7);

				String url_tOracleInput_7 = null;
				url_tOracleInput_7 = "jdbc:oracle:thin:@"
						+ context.recolnat_Server + ":" + context.recolnat_Port
						+ ":" + context.recolnat_Sid;

				String dbUser_tOracleInput_7 = context.recolnat_Login;

				final String decryptedPassword_tOracleInput_7 = context.recolnat_Password;

				String dbPwd_tOracleInput_7 = decryptedPassword_tOracleInput_7;

				java.util.Properties atnParamsPrope_tOracleInput_7 = new java.util.Properties();
				atnParamsPrope_tOracleInput_7
						.put("user", dbUser_tOracleInput_7);
				atnParamsPrope_tOracleInput_7.put("password",
						dbPwd_tOracleInput_7);
				if (context.recolnat_AdditionalParams != null
						&& !"\"\"".equals(context.recolnat_AdditionalParams)
						&& !"".equals(context.recolnat_AdditionalParams)) {
					atnParamsPrope_tOracleInput_7
							.load(new java.io.ByteArrayInputStream(
									context.recolnat_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}
				conn_tOracleInput_7 = java.sql.DriverManager.getConnection(
						url_tOracleInput_7, atnParamsPrope_tOracleInput_7);
				java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_7 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_7.next()) {
					sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_7)
						.setSessionTimeZone(sessionTimezone_tOracleInput_7);

				java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7
						.createStatement();

				String dbquery_tOracleInput_7 = "SELECT \n  *\nFROM "
						+ context.recolnat_Schema
						+ ".LOCALISATIONS \nWHERE LOCATIONID="
						+ ((Integer) globalMap.get("locationId"));

				globalMap.put("tOracleInput_7_QUERY", dbquery_tOracleInput_7);

				java.sql.ResultSet rs_tOracleInput_7 = null;
				try {
					rs_tOracleInput_7 = stmt_tOracleInput_7
							.executeQuery(dbquery_tOracleInput_7);
					java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7
							.getMetaData();
					int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7
							.getColumnCount();

					String tmpContent_tOracleInput_7 = null;

					while (rs_tOracleInput_7.next()) {
						nb_line_tOracleInput_7++;

						if (colQtyInRs_tOracleInput_7 < 1) {
							db_localisations.LOCATIONID = 0;
						} else {

							if (rs_tOracleInput_7.getObject(1) != null) {
								db_localisations.LOCATIONID = rs_tOracleInput_7
										.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_7 < 2) {
							db_localisations.CONTINENT = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(2);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.CONTINENT = tmpContent_tOracleInput_7;
							} else {
								db_localisations.CONTINENT = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 3) {
							db_localisations.COUNTRY = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(3);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.COUNTRY = tmpContent_tOracleInput_7;
							} else {
								db_localisations.COUNTRY = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 4) {
							db_localisations.COUNTRYCODE = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(4);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.COUNTRYCODE = tmpContent_tOracleInput_7;
							} else {
								db_localisations.COUNTRYCODE = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 5) {
							db_localisations.COUNTY = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(5);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.COUNTY = tmpContent_tOracleInput_7;
							} else {
								db_localisations.COUNTY = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 6) {
							db_localisations.STATEPROVINCE = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(6);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.STATEPROVINCE = tmpContent_tOracleInput_7;
							} else {
								db_localisations.STATEPROVINCE = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 7) {
							db_localisations.MUNICIPALITY = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(7);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.MUNICIPALITY = tmpContent_tOracleInput_7;
							} else {
								db_localisations.MUNICIPALITY = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 8) {
							db_localisations.LOCALITY = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(8);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.LOCALITY = tmpContent_tOracleInput_7;
							} else {
								db_localisations.LOCALITY = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 9) {
							db_localisations.LOCATIONREMARKS = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(9);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.LOCATIONREMARKS = tmpContent_tOracleInput_7;
							} else {
								db_localisations.LOCATIONREMARKS = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 10) {
							db_localisations.MINIMUMELEVATIONINMETERS = null;
						} else {

							if (rs_tOracleInput_7.getObject(10) != null) {
								db_localisations.MINIMUMELEVATIONINMETERS = rs_tOracleInput_7
										.getFloat(10);
							} else {

								db_localisations.MINIMUMELEVATIONINMETERS = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 11) {
							db_localisations.MAXIMUMELEVATIONINMETERS = null;
						} else {

							if (rs_tOracleInput_7.getObject(11) != null) {
								db_localisations.MAXIMUMELEVATIONINMETERS = rs_tOracleInput_7
										.getFloat(11);
							} else {

								db_localisations.MAXIMUMELEVATIONINMETERS = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 12) {
							db_localisations.MINIMUMDEPTHINMETERS = null;
						} else {

							if (rs_tOracleInput_7.getObject(12) != null) {
								db_localisations.MINIMUMDEPTHINMETERS = rs_tOracleInput_7
										.getFloat(12);
							} else {

								db_localisations.MINIMUMDEPTHINMETERS = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 13) {
							db_localisations.MAXIMUMDEPTHINMETERS = null;
						} else {

							if (rs_tOracleInput_7.getObject(13) != null) {
								db_localisations.MAXIMUMDEPTHINMETERS = rs_tOracleInput_7
										.getFloat(13);
							} else {

								db_localisations.MAXIMUMDEPTHINMETERS = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 14) {
							db_localisations.GEODETICDATUM = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(14);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.GEODETICDATUM = tmpContent_tOracleInput_7;
							} else {
								db_localisations.GEODETICDATUM = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 15) {
							db_localisations.DECIMALLATITUDE = null;
						} else {

							if (rs_tOracleInput_7.getObject(15) != null) {
								db_localisations.DECIMALLATITUDE = rs_tOracleInput_7
										.getFloat(15);
							} else {

								db_localisations.DECIMALLATITUDE = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 16) {
							db_localisations.DECIMALLONGITUDE = null;
						} else {

							if (rs_tOracleInput_7.getObject(16) != null) {
								db_localisations.DECIMALLONGITUDE = rs_tOracleInput_7
										.getFloat(16);
							} else {

								db_localisations.DECIMALLONGITUDE = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 17) {
							db_localisations.VERBATIMELEVATION = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(17);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.VERBATIMELEVATION = tmpContent_tOracleInput_7;
							} else {
								db_localisations.VERBATIMELEVATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 18) {
							db_localisations.VERBATIMLOCALITY = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(18);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.VERBATIMLOCALITY = tmpContent_tOracleInput_7;
							} else {
								db_localisations.VERBATIMLOCALITY = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 19) {
							db_localisations.VERBATIMCOUNTRY = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(19);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.VERBATIMCOUNTRY = tmpContent_tOracleInput_7;
							} else {
								db_localisations.VERBATIMCOUNTRY = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 20) {
							db_localisations.GEOREFERENCESOURCES = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(20);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.GEOREFERENCESOURCES = tmpContent_tOracleInput_7;
							} else {
								db_localisations.GEOREFERENCESOURCES = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 21) {
							db_localisations.AVERAGEALTITUDEROUNDED = null;
						} else {

							if (rs_tOracleInput_7.getObject(21) != null) {
								db_localisations.AVERAGEALTITUDEROUNDED = rs_tOracleInput_7
										.getFloat(21);
							} else {

								db_localisations.AVERAGEALTITUDEROUNDED = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 22) {
							db_localisations.HASCOORDINATES = null;
						} else {

							if (rs_tOracleInput_7.getObject(22) != null) {
								db_localisations.HASCOORDINATES = rs_tOracleInput_7
										.getBoolean(22);
							} else {

								db_localisations.HASCOORDINATES = null;
							}
						}
						if (colQtyInRs_tOracleInput_7 < 23) {
							db_localisations.SOURCEFILEID = null;
						} else {

							tmpContent_tOracleInput_7 = rs_tOracleInput_7
									.getString(23);
							if (tmpContent_tOracleInput_7 != null) {
								db_localisations.SOURCEFILEID = tmpContent_tOracleInput_7;
							} else {
								db_localisations.SOURCEFILEID = null;
							}
						}

						/**
						 * [tOracleInput_7 begin ] stop
						 */

						/**
						 * [tOracleInput_7 main ] start
						 */

						currentComponent = "tOracleInput_7";

						tos_count_tOracleInput_7++;

						/**
						 * [tOracleInput_7 main ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "localisation_choices"
						// /////////////////////////////////////////////

						boolean forceLooplocalisation_choices = false;

						localisation_choicesStruct localisation_choicesObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_7 = false;

							localisation_choicesHashKey.className = "Localisation";

							localisation_choicesHashKey.relationId = String
									.valueOf(db_localisations.LOCATIONID);

							localisation_choicesHashKey.hashCodeDirty = true;

							tHash_Lookup_localisation_choices
									.lookup(localisation_choicesHashKey);

							if (!tHash_Lookup_localisation_choices.hasNext()) { // G_TM_M_090

								forceLooplocalisation_choices = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooplocalisation_choices = true;
						} // G 21

						localisation_choicesStruct localisation_choices = null;

						while ((tHash_Lookup_localisation_choices != null && tHash_Lookup_localisation_choices
								.hasNext()) || forceLooplocalisation_choices) { // G_TM_M_043

							// CALL close loop of lookup 'localisation_choices'

							localisation_choicesStruct fromLookup_localisation_choices = null;
							localisation_choices = localisation_choicesDefault;

							if (!forceLooplocalisation_choices) { // G 46

								fromLookup_localisation_choices = tHash_Lookup_localisation_choices
										.next();

								if (fromLookup_localisation_choices != null) {
									localisation_choices = fromLookup_localisation_choices;
								}

							} // G 46

							forceLooplocalisation_choices = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								rows_localisations = null;

								// # Output table : 'rows_localisations'
								rows_localisations_tmp.LOCATIONID = db_localisations.LOCATIONID;
								rows_localisations_tmp.CONTINENT = db_localisations.CONTINENT;
								rows_localisations_tmp.COUNTRY = db_localisations.COUNTRY;
								rows_localisations_tmp.COUNTRYCODE = db_localisations.COUNTRYCODE;
								rows_localisations_tmp.COUNTY = db_localisations.COUNTY;
								rows_localisations_tmp.STATEPROVINCE = db_localisations.STATEPROVINCE;
								rows_localisations_tmp.MUNICIPALITY = db_localisations.MUNICIPALITY;
								rows_localisations_tmp.LOCALITY = db_localisations.LOCALITY;
								rows_localisations_tmp.LOCATIONREMARKS = db_localisations.LOCATIONREMARKS;
								rows_localisations_tmp.MINIMUMELEVATIONINMETERS = db_localisations.MINIMUMELEVATIONINMETERS;
								rows_localisations_tmp.MAXIMUMELEVATIONINMETERS = db_localisations.MAXIMUMELEVATIONINMETERS;
								rows_localisations_tmp.MINIMUMDEPTHINMETERS = db_localisations.MINIMUMDEPTHINMETERS;
								rows_localisations_tmp.MAXIMUMDEPTHINMETERS = db_localisations.MAXIMUMDEPTHINMETERS;
								rows_localisations_tmp.GEODETICDATUM = db_localisations.GEODETICDATUM;
								rows_localisations_tmp.DECIMALLATITUDE = db_localisations.DECIMALLATITUDE;
								rows_localisations_tmp.DECIMALLONGITUDE = db_localisations.DECIMALLONGITUDE;
								rows_localisations_tmp.VERBATIMELEVATION = db_localisations.VERBATIMELEVATION;
								rows_localisations_tmp.VERBATIMLOCALITY = db_localisations.VERBATIMLOCALITY;
								rows_localisations_tmp.VERBATIMCOUNTRY = db_localisations.VERBATIMCOUNTRY;
								rows_localisations_tmp.GEOREFERENCESOURCES = db_localisations.GEOREFERENCESOURCES;
								rows_localisations_tmp.AVERAGEALTITUDEROUNDED = db_localisations.AVERAGEALTITUDEROUNDED;
								rows_localisations_tmp.HASCOORDINATES = db_localisations.HASCOORDINATES;
								rows_localisations_tmp.SOURCEFILEID = db_localisations.SOURCEFILEID;
								rows_localisations_tmp.fieldName = localisation_choices.fieldName;
								rows_localisations_tmp.data = localisation_choices.data;
								rows_localisations = rows_localisations_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "rows_localisations"
							if (rows_localisations != null) {

								/**
								 * [tMemorizeRows_7 main ] start
								 */

								currentComponent = "tMemorizeRows_7";

								for (int i_tMemorizeRows_7 = iRows_tMemorizeRows_7 - 1; i_tMemorizeRows_7 > 0; i_tMemorizeRows_7--) {
									fieldName_tMemorizeRows_7[i_tMemorizeRows_7] = fieldName_tMemorizeRows_7[i_tMemorizeRows_7 - 1];
									data_tMemorizeRows_7[i_tMemorizeRows_7] = data_tMemorizeRows_7[i_tMemorizeRows_7 - 1];
								}
								fieldName_tMemorizeRows_7[0] = rows_localisations.fieldName;
								data_tMemorizeRows_7[0] = rows_localisations.data;

								row5 = rows_localisations;

								tos_count_tMemorizeRows_7++;

								/**
								 * [tMemorizeRows_7 main ] stop
								 */

								/**
								 * [tAggregateRow_7_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_7";

								currentComponent = "tAggregateRow_7_AGGOUT";

								operation_finder_tAggregateRow_7.LOCATIONID = row5.LOCATIONID;
								operation_finder_tAggregateRow_7.CONTINENT = row5.CONTINENT;
								operation_finder_tAggregateRow_7.COUNTRY = row5.COUNTRY;
								operation_finder_tAggregateRow_7.COUNTRYCODE = row5.COUNTRYCODE;
								operation_finder_tAggregateRow_7.COUNTY = row5.COUNTY;
								operation_finder_tAggregateRow_7.STATEPROVINCE = row5.STATEPROVINCE;
								operation_finder_tAggregateRow_7.MUNICIPALITY = row5.MUNICIPALITY;
								operation_finder_tAggregateRow_7.LOCALITY = row5.LOCALITY;
								operation_finder_tAggregateRow_7.LOCATIONREMARKS = row5.LOCATIONREMARKS;
								operation_finder_tAggregateRow_7.MINIMUMELEVATIONINMETERS = row5.MINIMUMELEVATIONINMETERS;
								operation_finder_tAggregateRow_7.MAXIMUMELEVATIONINMETERS = row5.MAXIMUMELEVATIONINMETERS;
								operation_finder_tAggregateRow_7.MINIMUMDEPTHINMETERS = row5.MINIMUMDEPTHINMETERS;
								operation_finder_tAggregateRow_7.MAXIMUMDEPTHINMETERS = row5.MAXIMUMDEPTHINMETERS;
								operation_finder_tAggregateRow_7.GEODETICDATUM = row5.GEODETICDATUM;
								operation_finder_tAggregateRow_7.DECIMALLATITUDE = row5.DECIMALLATITUDE;
								operation_finder_tAggregateRow_7.DECIMALLONGITUDE = row5.DECIMALLONGITUDE;
								operation_finder_tAggregateRow_7.VERBATIMELEVATION = row5.VERBATIMELEVATION;
								operation_finder_tAggregateRow_7.VERBATIMLOCALITY = row5.VERBATIMLOCALITY;
								operation_finder_tAggregateRow_7.VERBATIMCOUNTRY = row5.VERBATIMCOUNTRY;
								operation_finder_tAggregateRow_7.GEOREFERENCESOURCES = row5.GEOREFERENCESOURCES;
								operation_finder_tAggregateRow_7.AVERAGEALTITUDEROUNDED = row5.AVERAGEALTITUDEROUNDED;
								operation_finder_tAggregateRow_7.HASCOORDINATES = row5.HASCOORDINATES;
								operation_finder_tAggregateRow_7.SOURCEFILEID = row5.SOURCEFILEID;

								operation_finder_tAggregateRow_7.hashCodeDirty = true;

								operation_result_tAggregateRow_7 = hash_tAggregateRow_7
										.get(operation_finder_tAggregateRow_7);

								if (operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

									operation_result_tAggregateRow_7.LOCATIONID = operation_finder_tAggregateRow_7.LOCATIONID;
									operation_result_tAggregateRow_7.CONTINENT = operation_finder_tAggregateRow_7.CONTINENT;
									operation_result_tAggregateRow_7.COUNTRY = operation_finder_tAggregateRow_7.COUNTRY;
									operation_result_tAggregateRow_7.COUNTRYCODE = operation_finder_tAggregateRow_7.COUNTRYCODE;
									operation_result_tAggregateRow_7.COUNTY = operation_finder_tAggregateRow_7.COUNTY;
									operation_result_tAggregateRow_7.STATEPROVINCE = operation_finder_tAggregateRow_7.STATEPROVINCE;
									operation_result_tAggregateRow_7.MUNICIPALITY = operation_finder_tAggregateRow_7.MUNICIPALITY;
									operation_result_tAggregateRow_7.LOCALITY = operation_finder_tAggregateRow_7.LOCALITY;
									operation_result_tAggregateRow_7.LOCATIONREMARKS = operation_finder_tAggregateRow_7.LOCATIONREMARKS;
									operation_result_tAggregateRow_7.MINIMUMELEVATIONINMETERS = operation_finder_tAggregateRow_7.MINIMUMELEVATIONINMETERS;
									operation_result_tAggregateRow_7.MAXIMUMELEVATIONINMETERS = operation_finder_tAggregateRow_7.MAXIMUMELEVATIONINMETERS;
									operation_result_tAggregateRow_7.MINIMUMDEPTHINMETERS = operation_finder_tAggregateRow_7.MINIMUMDEPTHINMETERS;
									operation_result_tAggregateRow_7.MAXIMUMDEPTHINMETERS = operation_finder_tAggregateRow_7.MAXIMUMDEPTHINMETERS;
									operation_result_tAggregateRow_7.GEODETICDATUM = operation_finder_tAggregateRow_7.GEODETICDATUM;
									operation_result_tAggregateRow_7.DECIMALLATITUDE = operation_finder_tAggregateRow_7.DECIMALLATITUDE;
									operation_result_tAggregateRow_7.DECIMALLONGITUDE = operation_finder_tAggregateRow_7.DECIMALLONGITUDE;
									operation_result_tAggregateRow_7.VERBATIMELEVATION = operation_finder_tAggregateRow_7.VERBATIMELEVATION;
									operation_result_tAggregateRow_7.VERBATIMLOCALITY = operation_finder_tAggregateRow_7.VERBATIMLOCALITY;
									operation_result_tAggregateRow_7.VERBATIMCOUNTRY = operation_finder_tAggregateRow_7.VERBATIMCOUNTRY;
									operation_result_tAggregateRow_7.GEOREFERENCESOURCES = operation_finder_tAggregateRow_7.GEOREFERENCESOURCES;
									operation_result_tAggregateRow_7.AVERAGEALTITUDEROUNDED = operation_finder_tAggregateRow_7.AVERAGEALTITUDEROUNDED;
									operation_result_tAggregateRow_7.HASCOORDINATES = operation_finder_tAggregateRow_7.HASCOORDINATES;
									operation_result_tAggregateRow_7.SOURCEFILEID = operation_finder_tAggregateRow_7.SOURCEFILEID;

									hash_tAggregateRow_7.put(
											operation_result_tAggregateRow_7,
											operation_result_tAggregateRow_7);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_7_AGGOUT++;

								/**
								 * [tAggregateRow_7_AGGOUT main ] stop
								 */

							} // End of branch "rows_localisations"

						} // close loop of lookup 'localisation_choices' //
							// G_TM_M_043

						/**
						 * [tOracleInput_7 end ] start
						 */

						currentComponent = "tOracleInput_7";

					}
				} finally {
					stmt_tOracleInput_7.close();

					if (conn_tOracleInput_7 != null
							&& !conn_tOracleInput_7.isClosed()) {

						conn_tOracleInput_7.close();

					}

				}

				globalMap.put("tOracleInput_7_NB_LINE", nb_line_tOracleInput_7);

				ok_Hash.put("tOracleInput_7", true);
				end_Hash.put("tOracleInput_7", System.currentTimeMillis());

				/**
				 * [tOracleInput_7 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_localisation_choices != null) {
					tHash_Lookup_localisation_choices.endGet();
				}
				globalMap.remove("tHash_Lookup_localisation_choices");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tMemorizeRows_7 end ] start
				 */

				currentComponent = "tMemorizeRows_7";

				ok_Hash.put("tMemorizeRows_7", true);
				end_Hash.put("tMemorizeRows_7", System.currentTimeMillis());

				/**
				 * [tMemorizeRows_7 end ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGOUT";

				ok_Hash.put("tAggregateRow_7_AGGOUT", true);
				end_Hash.put("tAggregateRow_7_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_7_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.exportpath + "/localisations.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);
				if (filetFileOutputDelimited_7.exists()) {
					isFileGenerated_tFileOutputDelimited_7 = false;
				}
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /**
				 * Start field
				 * tFileOutputDelimited_7:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
				 * Start
				 * field tFileOutputDelimited_7:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				outtFileOutputDelimited_7 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_7, true),
								"UTF-8"));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("LOCATIONID");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CONTINENT");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("COUNTRY");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("COUNTRYCODE");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("COUNTY");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("STATEPROVINCE");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("MUNICIPALITY");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("LOCALITY");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("LOCATIONREMARKS");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("MINIMUMELEVATIONINMETERS");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("MAXIMUMELEVATIONINMETERS");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("MINIMUMDEPTHINMETERS");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("MAXIMUMDEPTHINMETERS");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("GEODETICDATUM");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("DECIMALLATITUDE");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("DECIMALLONGITUDE");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("VERBATIMELEVATION");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("VERBATIMLOCALITY");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("VERBATIMCOUNTRY");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("GEOREFERENCESOURCES");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("AVERAGEALTITUDEROUNDED");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("HASCOORDINATES");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("SOURCEFILEID");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7",
						outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_7_AGGIN", false);
				start_Hash.put("tAggregateRow_7_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGIN";

				int tos_count_tAggregateRow_7_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7
						.values();

				globalMap.put("tAggregateRow_7_NB_LINE",
						values_tAggregateRow_7.size());

				for (AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600

					/**
					 * [tAggregateRow_7_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGIN";

					row_local.LOCATIONID = aggregated_row_tAggregateRow_7.LOCATIONID;

					row_local.CONTINENT = aggregated_row_tAggregateRow_7.CONTINENT;

					row_local.COUNTRY = aggregated_row_tAggregateRow_7.COUNTRY;

					row_local.COUNTRYCODE = aggregated_row_tAggregateRow_7.COUNTRYCODE;

					row_local.COUNTY = aggregated_row_tAggregateRow_7.COUNTY;

					row_local.STATEPROVINCE = aggregated_row_tAggregateRow_7.STATEPROVINCE;

					row_local.MUNICIPALITY = aggregated_row_tAggregateRow_7.MUNICIPALITY;

					row_local.LOCALITY = aggregated_row_tAggregateRow_7.LOCALITY;

					row_local.LOCATIONREMARKS = aggregated_row_tAggregateRow_7.LOCATIONREMARKS;

					row_local.MINIMUMELEVATIONINMETERS = aggregated_row_tAggregateRow_7.MINIMUMELEVATIONINMETERS;

					row_local.MAXIMUMELEVATIONINMETERS = aggregated_row_tAggregateRow_7.MAXIMUMELEVATIONINMETERS;

					row_local.MINIMUMDEPTHINMETERS = aggregated_row_tAggregateRow_7.MINIMUMDEPTHINMETERS;

					row_local.MAXIMUMDEPTHINMETERS = aggregated_row_tAggregateRow_7.MAXIMUMDEPTHINMETERS;

					row_local.GEODETICDATUM = aggregated_row_tAggregateRow_7.GEODETICDATUM;

					row_local.DECIMALLATITUDE = aggregated_row_tAggregateRow_7.DECIMALLATITUDE;

					row_local.DECIMALLONGITUDE = aggregated_row_tAggregateRow_7.DECIMALLONGITUDE;

					row_local.VERBATIMELEVATION = aggregated_row_tAggregateRow_7.VERBATIMELEVATION;

					row_local.VERBATIMLOCALITY = aggregated_row_tAggregateRow_7.VERBATIMLOCALITY;

					row_local.VERBATIMCOUNTRY = aggregated_row_tAggregateRow_7.VERBATIMCOUNTRY;

					row_local.GEOREFERENCESOURCES = aggregated_row_tAggregateRow_7.GEOREFERENCESOURCES;

					row_local.AVERAGEALTITUDEROUNDED = aggregated_row_tAggregateRow_7.AVERAGEALTITUDEROUNDED;

					row_local.HASCOORDINATES = aggregated_row_tAggregateRow_7.HASCOORDINATES;

					row_local.SOURCEFILEID = aggregated_row_tAggregateRow_7.SOURCEFILEID;

					tos_count_tAggregateRow_7_AGGIN++;

					/**
					 * [tAggregateRow_7_AGGIN main ] stop
					 */

					/**
					 * [tJavaRow_7 main ] start
					 */

					currentComponent = "tJavaRow_7";

					// Code généré selon le schémas d'entrée et de sortie
					local_to_csv.LOCATIONID = row_local.LOCATIONID;
					local_to_csv.CONTINENT = row_local.CONTINENT;
					local_to_csv.COUNTRY = row_local.COUNTRY;
					local_to_csv.COUNTRYCODE = row_local.COUNTRYCODE;
					local_to_csv.COUNTY = row_local.COUNTY;
					local_to_csv.STATEPROVINCE = row_local.STATEPROVINCE;
					local_to_csv.MUNICIPALITY = row_local.MUNICIPALITY;
					local_to_csv.LOCALITY = row_local.LOCALITY;
					local_to_csv.LOCATIONREMARKS = row_local.LOCATIONREMARKS;
					local_to_csv.MINIMUMELEVATIONINMETERS = row_local.MINIMUMELEVATIONINMETERS;
					local_to_csv.MAXIMUMELEVATIONINMETERS = row_local.MAXIMUMELEVATIONINMETERS;
					local_to_csv.MINIMUMDEPTHINMETERS = row_local.MINIMUMDEPTHINMETERS;
					local_to_csv.MAXIMUMDEPTHINMETERS = row_local.MAXIMUMDEPTHINMETERS;
					local_to_csv.GEODETICDATUM = row_local.GEODETICDATUM;
					local_to_csv.DECIMALLATITUDE = row_local.DECIMALLATITUDE;
					local_to_csv.DECIMALLONGITUDE = row_local.DECIMALLONGITUDE;
					local_to_csv.VERBATIMELEVATION = row_local.VERBATIMELEVATION;
					local_to_csv.VERBATIMLOCALITY = row_local.VERBATIMLOCALITY;
					local_to_csv.VERBATIMCOUNTRY = row_local.VERBATIMCOUNTRY;
					local_to_csv.GEOREFERENCESOURCES = row_local.GEOREFERENCESOURCES;
					local_to_csv.AVERAGEALTITUDEROUNDED = row_local.AVERAGEALTITUDEROUNDED;
					local_to_csv.HASCOORDINATES = row_local.HASCOORDINATES;
					local_to_csv.SOURCEFILEID = row_local.SOURCEFILEID;

					ConversionString.setChoices(local_to_csv,
							((String[]) globalMap
									.get("tMemorizeRows_7_fieldName")),
							(String[]) globalMap.get("tMemorizeRows_7_data"));
					nb_line_tJavaRow_7++;

					tos_count_tJavaRow_7++;

					/**
					 * [tJavaRow_7 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 main ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

					StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
					sb_tFileOutputDelimited_7.append(local_to_csv.LOCATIONID);
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.CONTINENT != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.CONTINENT);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.COUNTRY != null) {
						sb_tFileOutputDelimited_7.append(local_to_csv.COUNTRY);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.COUNTRYCODE != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.COUNTRYCODE);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.COUNTY != null) {
						sb_tFileOutputDelimited_7.append(local_to_csv.COUNTY);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.STATEPROVINCE != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.STATEPROVINCE);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.MUNICIPALITY != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.MUNICIPALITY);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.LOCALITY != null) {
						sb_tFileOutputDelimited_7.append(local_to_csv.LOCALITY);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.LOCATIONREMARKS != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.LOCATIONREMARKS);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.MINIMUMELEVATIONINMETERS != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.MINIMUMELEVATIONINMETERS);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.MAXIMUMELEVATIONINMETERS != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.MAXIMUMELEVATIONINMETERS);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.MINIMUMDEPTHINMETERS != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.MINIMUMDEPTHINMETERS);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.MAXIMUMDEPTHINMETERS != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.MAXIMUMDEPTHINMETERS);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.GEODETICDATUM != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.GEODETICDATUM);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.DECIMALLATITUDE != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.DECIMALLATITUDE);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.DECIMALLONGITUDE != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.DECIMALLONGITUDE);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.VERBATIMELEVATION != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.VERBATIMELEVATION);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.VERBATIMLOCALITY != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.VERBATIMLOCALITY);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.VERBATIMCOUNTRY != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.VERBATIMCOUNTRY);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.GEOREFERENCESOURCES != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.GEOREFERENCESOURCES);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.AVERAGEALTITUDEROUNDED != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.AVERAGEALTITUDEROUNDED);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.HASCOORDINATES != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.HASCOORDINATES);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_tFileOutputDelimited_7);
					if (local_to_csv.SOURCEFILEID != null) {
						sb_tFileOutputDelimited_7
								.append(local_to_csv.SOURCEFILEID);
					}
					sb_tFileOutputDelimited_7
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

					nb_line_tFileOutputDelimited_7++;
					resourceMap.put("nb_line_tFileOutputDelimited_7",
							nb_line_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7
							.toString());

					tos_count_tFileOutputDelimited_7++;

					/**
					 * [tFileOutputDelimited_7 main ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_7_AGGIN", true);
				end_Hash.put("tAggregateRow_7_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_7_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE",
						nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_7_AGGIN"
			globalMap.remove("tAggregateRow_7");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_localisation_choices");

			try {

				/**
				 * [tOracleInput_7 finally ] start
				 */

				currentComponent = "tOracleInput_7";

				/**
				 * [tOracleInput_7 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tMemorizeRows_7 finally ] start
				 */

				currentComponent = "tMemorizeRows_7";

				/**
				 * [tMemorizeRows_7 finally ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGOUT";

				/**
				 * [tAggregateRow_7_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGIN";

				/**
				 * [tAggregateRow_7_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}

	public static class taxon_to_csvStruct implements
			routines.system.IPersistableRow<taxon_to_csvStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TAXONID;

		public String getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TAXONID == null) ? 0 : this.TAXONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final taxon_to_csvStruct other = (taxon_to_csvStruct) obj;

			if (this.TAXONID == null) {
				if (other.TAXONID != null)
					return false;

			} else if (!this.TAXONID.equals(other.TAXONID))

				return false;

			return true;
		}

		public void copyDataTo(taxon_to_csvStruct other) {

			other.TAXONID = this.TAXONID;
			other.SCIENTIFICNAME = this.SCIENTIFICNAME;
			other.SCIENTIFICNAMEAUTHORSHIP = this.SCIENTIFICNAMEAUTHORSHIP;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.NAMEACCORDINGTO = this.NAMEACCORDINGTO;
			other.SPECIFICEPITHET = this.SPECIFICEPITHET;
			other.INFRASPECIFICEPITHET = this.INFRASPECIFICEPITHET;
			other.NOMENCLATURALCODE = this.NOMENCLATURALCODE;
			other.TAXONRANK = this.TAXONRANK;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.VERBATIMTAXONRANK = this.VERBATIMTAXONRANK;
			other.ACCEPTEDNAMEUSAGE = this.ACCEPTEDNAMEUSAGE;
			other.ORIGINALNAMEUSAGE = this.ORIGINALNAMEUSAGE;
			other.PARENTNAMEUSAGE = this.PARENTNAMEUSAGE;
			other.HIGHERCLASSIFICATION = this.HIGHERCLASSIFICATION;
			other.TAXONOMICSTATUS = this.TAXONOMICSTATUS;
			other.NAMEPUBLISHEDIN = this.NAMEPUBLISHEDIN;
			other.NAMEPUBLISHEDINYEAR = this.NAMEPUBLISHEDINYEAR;
			other.NOMENCLATURALSTATUS = this.NOMENCLATURALSTATUS;
			other.KINGDOM = this.KINGDOM;
			other.PHYLUM = this.PHYLUM;
			other.CLASS_ = this.CLASS_;
			other.ORDER_ = this.ORDER_;
			other.FAMILY = this.FAMILY;
			other.GENUS = this.GENUS;
			other.SUBGENUS = this.SUBGENUS;
			other.VERNACULARNAME = this.VERNACULARNAME;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCATAXONID = this.DWCATAXONID;

		}

		public void copyKeysDataTo(taxon_to_csvStruct other) {

			other.TAXONID = this.TAXONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readString(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + TAXONID);
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(taxon_to_csvStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TAXONID, other.TAXONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_taxonStruct implements
			routines.system.IPersistableRow<row_taxonStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TAXONID;

		public String getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TAXONID == null) ? 0 : this.TAXONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_taxonStruct other = (row_taxonStruct) obj;

			if (this.TAXONID == null) {
				if (other.TAXONID != null)
					return false;

			} else if (!this.TAXONID.equals(other.TAXONID))

				return false;

			return true;
		}

		public void copyDataTo(row_taxonStruct other) {

			other.TAXONID = this.TAXONID;
			other.SCIENTIFICNAME = this.SCIENTIFICNAME;
			other.SCIENTIFICNAMEAUTHORSHIP = this.SCIENTIFICNAMEAUTHORSHIP;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.NAMEACCORDINGTO = this.NAMEACCORDINGTO;
			other.SPECIFICEPITHET = this.SPECIFICEPITHET;
			other.INFRASPECIFICEPITHET = this.INFRASPECIFICEPITHET;
			other.NOMENCLATURALCODE = this.NOMENCLATURALCODE;
			other.TAXONRANK = this.TAXONRANK;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.VERBATIMTAXONRANK = this.VERBATIMTAXONRANK;
			other.ACCEPTEDNAMEUSAGE = this.ACCEPTEDNAMEUSAGE;
			other.ORIGINALNAMEUSAGE = this.ORIGINALNAMEUSAGE;
			other.PARENTNAMEUSAGE = this.PARENTNAMEUSAGE;
			other.HIGHERCLASSIFICATION = this.HIGHERCLASSIFICATION;
			other.TAXONOMICSTATUS = this.TAXONOMICSTATUS;
			other.NAMEPUBLISHEDIN = this.NAMEPUBLISHEDIN;
			other.NAMEPUBLISHEDINYEAR = this.NAMEPUBLISHEDINYEAR;
			other.NOMENCLATURALSTATUS = this.NOMENCLATURALSTATUS;
			other.KINGDOM = this.KINGDOM;
			other.PHYLUM = this.PHYLUM;
			other.CLASS_ = this.CLASS_;
			other.ORDER_ = this.ORDER_;
			other.FAMILY = this.FAMILY;
			other.GENUS = this.GENUS;
			other.SUBGENUS = this.SUBGENUS;
			other.VERNACULARNAME = this.VERNACULARNAME;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCATAXONID = this.DWCATAXONID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row_taxonStruct other) {

			other.TAXONID = this.TAXONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readString(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + TAXONID);
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_taxonStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TAXONID, other.TAXONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TAXONID;

		public String getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TAXONID == null) ? 0 : this.TAXONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_3 other = (OnRowsEndStructtAggregateRow_3) obj;

			if (this.TAXONID == null) {
				if (other.TAXONID != null)
					return false;

			} else if (!this.TAXONID.equals(other.TAXONID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_3 other) {

			other.TAXONID = this.TAXONID;
			other.SCIENTIFICNAME = this.SCIENTIFICNAME;
			other.SCIENTIFICNAMEAUTHORSHIP = this.SCIENTIFICNAMEAUTHORSHIP;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.NAMEACCORDINGTO = this.NAMEACCORDINGTO;
			other.SPECIFICEPITHET = this.SPECIFICEPITHET;
			other.INFRASPECIFICEPITHET = this.INFRASPECIFICEPITHET;
			other.NOMENCLATURALCODE = this.NOMENCLATURALCODE;
			other.TAXONRANK = this.TAXONRANK;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.VERBATIMTAXONRANK = this.VERBATIMTAXONRANK;
			other.ACCEPTEDNAMEUSAGE = this.ACCEPTEDNAMEUSAGE;
			other.ORIGINALNAMEUSAGE = this.ORIGINALNAMEUSAGE;
			other.PARENTNAMEUSAGE = this.PARENTNAMEUSAGE;
			other.HIGHERCLASSIFICATION = this.HIGHERCLASSIFICATION;
			other.TAXONOMICSTATUS = this.TAXONOMICSTATUS;
			other.NAMEPUBLISHEDIN = this.NAMEPUBLISHEDIN;
			other.NAMEPUBLISHEDINYEAR = this.NAMEPUBLISHEDINYEAR;
			other.NOMENCLATURALSTATUS = this.NOMENCLATURALSTATUS;
			other.KINGDOM = this.KINGDOM;
			other.PHYLUM = this.PHYLUM;
			other.CLASS_ = this.CLASS_;
			other.ORDER_ = this.ORDER_;
			other.FAMILY = this.FAMILY;
			other.GENUS = this.GENUS;
			other.SUBGENUS = this.SUBGENUS;
			other.VERNACULARNAME = this.VERNACULARNAME;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCATAXONID = this.DWCATAXONID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_3 other) {

			other.TAXONID = this.TAXONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readString(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + TAXONID);
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TAXONID, other.TAXONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TAXONID;

		public String getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TAXONID == null) ? 0 : this.TAXONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.TAXONID == null) {
				if (other.TAXONID != null)
					return false;

			} else if (!this.TAXONID.equals(other.TAXONID))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.TAXONID = this.TAXONID;
			other.SCIENTIFICNAME = this.SCIENTIFICNAME;
			other.SCIENTIFICNAMEAUTHORSHIP = this.SCIENTIFICNAMEAUTHORSHIP;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.NAMEACCORDINGTO = this.NAMEACCORDINGTO;
			other.SPECIFICEPITHET = this.SPECIFICEPITHET;
			other.INFRASPECIFICEPITHET = this.INFRASPECIFICEPITHET;
			other.NOMENCLATURALCODE = this.NOMENCLATURALCODE;
			other.TAXONRANK = this.TAXONRANK;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.VERBATIMTAXONRANK = this.VERBATIMTAXONRANK;
			other.ACCEPTEDNAMEUSAGE = this.ACCEPTEDNAMEUSAGE;
			other.ORIGINALNAMEUSAGE = this.ORIGINALNAMEUSAGE;
			other.PARENTNAMEUSAGE = this.PARENTNAMEUSAGE;
			other.HIGHERCLASSIFICATION = this.HIGHERCLASSIFICATION;
			other.TAXONOMICSTATUS = this.TAXONOMICSTATUS;
			other.NAMEPUBLISHEDIN = this.NAMEPUBLISHEDIN;
			other.NAMEPUBLISHEDINYEAR = this.NAMEPUBLISHEDINYEAR;
			other.NOMENCLATURALSTATUS = this.NOMENCLATURALSTATUS;
			other.KINGDOM = this.KINGDOM;
			other.PHYLUM = this.PHYLUM;
			other.CLASS_ = this.CLASS_;
			other.ORDER_ = this.ORDER_;
			other.FAMILY = this.FAMILY;
			other.GENUS = this.GENUS;
			other.SUBGENUS = this.SUBGENUS;
			other.VERNACULARNAME = this.VERNACULARNAME;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCATAXONID = this.DWCATAXONID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.TAXONID = this.TAXONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readString(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + TAXONID);
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TAXONID, other.TAXONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rows_taxonStruct implements
			routines.system.IPersistableRow<rows_taxonStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TAXONID;

		public String getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TAXONID == null) ? 0 : this.TAXONID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rows_taxonStruct other = (rows_taxonStruct) obj;

			if (this.TAXONID == null) {
				if (other.TAXONID != null)
					return false;

			} else if (!this.TAXONID.equals(other.TAXONID))

				return false;

			return true;
		}

		public void copyDataTo(rows_taxonStruct other) {

			other.TAXONID = this.TAXONID;
			other.SCIENTIFICNAME = this.SCIENTIFICNAME;
			other.SCIENTIFICNAMEAUTHORSHIP = this.SCIENTIFICNAMEAUTHORSHIP;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.NAMEACCORDINGTO = this.NAMEACCORDINGTO;
			other.SPECIFICEPITHET = this.SPECIFICEPITHET;
			other.INFRASPECIFICEPITHET = this.INFRASPECIFICEPITHET;
			other.NOMENCLATURALCODE = this.NOMENCLATURALCODE;
			other.TAXONRANK = this.TAXONRANK;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.VERBATIMTAXONRANK = this.VERBATIMTAXONRANK;
			other.ACCEPTEDNAMEUSAGE = this.ACCEPTEDNAMEUSAGE;
			other.ORIGINALNAMEUSAGE = this.ORIGINALNAMEUSAGE;
			other.PARENTNAMEUSAGE = this.PARENTNAMEUSAGE;
			other.HIGHERCLASSIFICATION = this.HIGHERCLASSIFICATION;
			other.TAXONOMICSTATUS = this.TAXONOMICSTATUS;
			other.NAMEPUBLISHEDIN = this.NAMEPUBLISHEDIN;
			other.NAMEPUBLISHEDINYEAR = this.NAMEPUBLISHEDINYEAR;
			other.NOMENCLATURALSTATUS = this.NOMENCLATURALSTATUS;
			other.KINGDOM = this.KINGDOM;
			other.PHYLUM = this.PHYLUM;
			other.CLASS_ = this.CLASS_;
			other.ORDER_ = this.ORDER_;
			other.FAMILY = this.FAMILY;
			other.GENUS = this.GENUS;
			other.SUBGENUS = this.SUBGENUS;
			other.VERNACULARNAME = this.VERNACULARNAME;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCATAXONID = this.DWCATAXONID;
			other.fieldName = this.fieldName;
			other.data = this.data;

		}

		public void copyKeysDataTo(rows_taxonStruct other) {

			other.TAXONID = this.TAXONID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readString(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

					this.fieldName = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + TAXONID);
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append(",fieldName=" + fieldName);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rows_taxonStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TAXONID, other.TAXONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class db_taxonsStruct implements
			routines.system.IPersistableRow<db_taxonsStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readByteArray(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + String.valueOf(TAXONID));
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(db_taxonsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_3Struct implements
			routines.system.IPersistableRow<after_tOracleInput_3Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public byte[] TAXONID;

		public byte[] getTAXONID() {
			return this.TAXONID;
		}

		public String SCIENTIFICNAME;

		public String getSCIENTIFICNAME() {
			return this.SCIENTIFICNAME;
		}

		public String SCIENTIFICNAMEAUTHORSHIP;

		public String getSCIENTIFICNAMEAUTHORSHIP() {
			return this.SCIENTIFICNAMEAUTHORSHIP;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date MODIFIED;

		public java.util.Date getMODIFIED() {
			return this.MODIFIED;
		}

		public String NAMEACCORDINGTO;

		public String getNAMEACCORDINGTO() {
			return this.NAMEACCORDINGTO;
		}

		public String SPECIFICEPITHET;

		public String getSPECIFICEPITHET() {
			return this.SPECIFICEPITHET;
		}

		public String INFRASPECIFICEPITHET;

		public String getINFRASPECIFICEPITHET() {
			return this.INFRASPECIFICEPITHET;
		}

		public String NOMENCLATURALCODE;

		public String getNOMENCLATURALCODE() {
			return this.NOMENCLATURALCODE;
		}

		public String TAXONRANK;

		public String getTAXONRANK() {
			return this.TAXONRANK;
		}

		public String TAXONREMARKS;

		public String getTAXONREMARKS() {
			return this.TAXONREMARKS;
		}

		public String VERBATIMTAXONRANK;

		public String getVERBATIMTAXONRANK() {
			return this.VERBATIMTAXONRANK;
		}

		public String ACCEPTEDNAMEUSAGE;

		public String getACCEPTEDNAMEUSAGE() {
			return this.ACCEPTEDNAMEUSAGE;
		}

		public String ORIGINALNAMEUSAGE;

		public String getORIGINALNAMEUSAGE() {
			return this.ORIGINALNAMEUSAGE;
		}

		public String PARENTNAMEUSAGE;

		public String getPARENTNAMEUSAGE() {
			return this.PARENTNAMEUSAGE;
		}

		public String HIGHERCLASSIFICATION;

		public String getHIGHERCLASSIFICATION() {
			return this.HIGHERCLASSIFICATION;
		}

		public String TAXONOMICSTATUS;

		public String getTAXONOMICSTATUS() {
			return this.TAXONOMICSTATUS;
		}

		public String NAMEPUBLISHEDIN;

		public String getNAMEPUBLISHEDIN() {
			return this.NAMEPUBLISHEDIN;
		}

		public BigDecimal NAMEPUBLISHEDINYEAR;

		public BigDecimal getNAMEPUBLISHEDINYEAR() {
			return this.NAMEPUBLISHEDINYEAR;
		}

		public String NOMENCLATURALSTATUS;

		public String getNOMENCLATURALSTATUS() {
			return this.NOMENCLATURALSTATUS;
		}

		public String KINGDOM;

		public String getKINGDOM() {
			return this.KINGDOM;
		}

		public String PHYLUM;

		public String getPHYLUM() {
			return this.PHYLUM;
		}

		public String CLASS_;

		public String getCLASS_() {
			return this.CLASS_;
		}

		public String ORDER_;

		public String getORDER_() {
			return this.ORDER_;
		}

		public String FAMILY;

		public String getFAMILY() {
			return this.FAMILY;
		}

		public String GENUS;

		public String getGENUS() {
			return this.GENUS;
		}

		public String SUBGENUS;

		public String getSUBGENUS() {
			return this.SUBGENUS;
		}

		public String VERNACULARNAME;

		public String getVERNACULARNAME() {
			return this.VERNACULARNAME;
		}

		public String SOURCEFILEID;

		public String getSOURCEFILEID() {
			return this.SOURCEFILEID;
		}

		public String DWCATAXONID;

		public String getDWCATAXONID() {
			return this.DWCATAXONID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ java.util.Arrays.hashCode(this.TAXONID);

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tOracleInput_3Struct other = (after_tOracleInput_3Struct) obj;

			if (!java.util.Arrays.equals(this.TAXONID, other.TAXONID)) {
				return false;
			}

			return true;
		}

		public void copyDataTo(after_tOracleInput_3Struct other) {

			other.TAXONID = this.TAXONID;
			other.SCIENTIFICNAME = this.SCIENTIFICNAME;
			other.SCIENTIFICNAMEAUTHORSHIP = this.SCIENTIFICNAMEAUTHORSHIP;
			other.CREATED = this.CREATED;
			other.MODIFIED = this.MODIFIED;
			other.NAMEACCORDINGTO = this.NAMEACCORDINGTO;
			other.SPECIFICEPITHET = this.SPECIFICEPITHET;
			other.INFRASPECIFICEPITHET = this.INFRASPECIFICEPITHET;
			other.NOMENCLATURALCODE = this.NOMENCLATURALCODE;
			other.TAXONRANK = this.TAXONRANK;
			other.TAXONREMARKS = this.TAXONREMARKS;
			other.VERBATIMTAXONRANK = this.VERBATIMTAXONRANK;
			other.ACCEPTEDNAMEUSAGE = this.ACCEPTEDNAMEUSAGE;
			other.ORIGINALNAMEUSAGE = this.ORIGINALNAMEUSAGE;
			other.PARENTNAMEUSAGE = this.PARENTNAMEUSAGE;
			other.HIGHERCLASSIFICATION = this.HIGHERCLASSIFICATION;
			other.TAXONOMICSTATUS = this.TAXONOMICSTATUS;
			other.NAMEPUBLISHEDIN = this.NAMEPUBLISHEDIN;
			other.NAMEPUBLISHEDINYEAR = this.NAMEPUBLISHEDINYEAR;
			other.NOMENCLATURALSTATUS = this.NOMENCLATURALSTATUS;
			other.KINGDOM = this.KINGDOM;
			other.PHYLUM = this.PHYLUM;
			other.CLASS_ = this.CLASS_;
			other.ORDER_ = this.ORDER_;
			other.FAMILY = this.FAMILY;
			other.GENUS = this.GENUS;
			other.SUBGENUS = this.SUBGENUS;
			other.VERNACULARNAME = this.VERNACULARNAME;
			other.SOURCEFILEID = this.SOURCEFILEID;
			other.DWCATAXONID = this.DWCATAXONID;

		}

		public void copyKeysDataTo(after_tOracleInput_3Struct other) {

			other.TAXONID = this.TAXONID;

		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.TAXONID = readByteArray(dis);

					this.SCIENTIFICNAME = readString(dis);

					this.SCIENTIFICNAMEAUTHORSHIP = readString(dis);

					this.CREATED = readDate(dis);

					this.MODIFIED = readDate(dis);

					this.NAMEACCORDINGTO = readString(dis);

					this.SPECIFICEPITHET = readString(dis);

					this.INFRASPECIFICEPITHET = readString(dis);

					this.NOMENCLATURALCODE = readString(dis);

					this.TAXONRANK = readString(dis);

					this.TAXONREMARKS = readString(dis);

					this.VERBATIMTAXONRANK = readString(dis);

					this.ACCEPTEDNAMEUSAGE = readString(dis);

					this.ORIGINALNAMEUSAGE = readString(dis);

					this.PARENTNAMEUSAGE = readString(dis);

					this.HIGHERCLASSIFICATION = readString(dis);

					this.TAXONOMICSTATUS = readString(dis);

					this.NAMEPUBLISHEDIN = readString(dis);

					this.NAMEPUBLISHEDINYEAR = (BigDecimal) dis.readObject();

					this.NOMENCLATURALSTATUS = readString(dis);

					this.KINGDOM = readString(dis);

					this.PHYLUM = readString(dis);

					this.CLASS_ = readString(dis);

					this.ORDER_ = readString(dis);

					this.FAMILY = readString(dis);

					this.GENUS = readString(dis);

					this.SUBGENUS = readString(dis);

					this.VERNACULARNAME = readString(dis);

					this.SOURCEFILEID = readString(dis);

					this.DWCATAXONID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.TAXONID, dos);

				// String

				writeString(this.SCIENTIFICNAME, dos);

				// String

				writeString(this.SCIENTIFICNAMEAUTHORSHIP, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.MODIFIED, dos);

				// String

				writeString(this.NAMEACCORDINGTO, dos);

				// String

				writeString(this.SPECIFICEPITHET, dos);

				// String

				writeString(this.INFRASPECIFICEPITHET, dos);

				// String

				writeString(this.NOMENCLATURALCODE, dos);

				// String

				writeString(this.TAXONRANK, dos);

				// String

				writeString(this.TAXONREMARKS, dos);

				// String

				writeString(this.VERBATIMTAXONRANK, dos);

				// String

				writeString(this.ACCEPTEDNAMEUSAGE, dos);

				// String

				writeString(this.ORIGINALNAMEUSAGE, dos);

				// String

				writeString(this.PARENTNAMEUSAGE, dos);

				// String

				writeString(this.HIGHERCLASSIFICATION, dos);

				// String

				writeString(this.TAXONOMICSTATUS, dos);

				// String

				writeString(this.NAMEPUBLISHEDIN, dos);

				// BigDecimal

				dos.writeObject(this.NAMEPUBLISHEDINYEAR);

				// String

				writeString(this.NOMENCLATURALSTATUS, dos);

				// String

				writeString(this.KINGDOM, dos);

				// String

				writeString(this.PHYLUM, dos);

				// String

				writeString(this.CLASS_, dos);

				// String

				writeString(this.ORDER_, dos);

				// String

				writeString(this.FAMILY, dos);

				// String

				writeString(this.GENUS, dos);

				// String

				writeString(this.SUBGENUS, dos);

				// String

				writeString(this.VERNACULARNAME, dos);

				// String

				writeString(this.SOURCEFILEID, dos);

				// String

				writeString(this.DWCATAXONID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TAXONID=" + String.valueOf(TAXONID));
			sb.append(",SCIENTIFICNAME=" + SCIENTIFICNAME);
			sb.append(",SCIENTIFICNAMEAUTHORSHIP=" + SCIENTIFICNAMEAUTHORSHIP);
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",MODIFIED=" + String.valueOf(MODIFIED));
			sb.append(",NAMEACCORDINGTO=" + NAMEACCORDINGTO);
			sb.append(",SPECIFICEPITHET=" + SPECIFICEPITHET);
			sb.append(",INFRASPECIFICEPITHET=" + INFRASPECIFICEPITHET);
			sb.append(",NOMENCLATURALCODE=" + NOMENCLATURALCODE);
			sb.append(",TAXONRANK=" + TAXONRANK);
			sb.append(",TAXONREMARKS=" + TAXONREMARKS);
			sb.append(",VERBATIMTAXONRANK=" + VERBATIMTAXONRANK);
			sb.append(",ACCEPTEDNAMEUSAGE=" + ACCEPTEDNAMEUSAGE);
			sb.append(",ORIGINALNAMEUSAGE=" + ORIGINALNAMEUSAGE);
			sb.append(",PARENTNAMEUSAGE=" + PARENTNAMEUSAGE);
			sb.append(",HIGHERCLASSIFICATION=" + HIGHERCLASSIFICATION);
			sb.append(",TAXONOMICSTATUS=" + TAXONOMICSTATUS);
			sb.append(",NAMEPUBLISHEDIN=" + NAMEPUBLISHEDIN);
			sb.append(",NAMEPUBLISHEDINYEAR="
					+ String.valueOf(NAMEPUBLISHEDINYEAR));
			sb.append(",NOMENCLATURALSTATUS=" + NOMENCLATURALSTATUS);
			sb.append(",KINGDOM=" + KINGDOM);
			sb.append(",PHYLUM=" + PHYLUM);
			sb.append(",CLASS_=" + CLASS_);
			sb.append(",ORDER_=" + ORDER_);
			sb.append(",FAMILY=" + FAMILY);
			sb.append(",GENUS=" + GENUS);
			sb.append(",SUBGENUS=" + SUBGENUS);
			sb.append(",VERNACULARNAME=" + VERNACULARNAME);
			sb.append(",SOURCEFILEID=" + SOURCEFILEID);
			sb.append(",DWCATAXONID=" + DWCATAXONID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TAXONID, other.TAXONID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_3Process(globalMap);

				db_taxonsStruct db_taxons = new db_taxonsStruct();
				rows_taxonStruct rows_taxon = new rows_taxonStruct();
				rows_taxonStruct row12 = rows_taxon;
				row_taxonStruct row_taxon = new row_taxonStruct();
				taxon_to_csvStruct taxon_to_csv = new taxon_to_csvStruct();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				int tos_count_tAggregateRow_3_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String TAXONID;
					String SCIENTIFICNAME;
					String SCIENTIFICNAMEAUTHORSHIP;
					java.util.Date CREATED;
					java.util.Date MODIFIED;
					String NAMEACCORDINGTO;
					String SPECIFICEPITHET;
					String INFRASPECIFICEPITHET;
					String NOMENCLATURALCODE;
					String TAXONRANK;
					String TAXONREMARKS;
					String VERBATIMTAXONRANK;
					String ACCEPTEDNAMEUSAGE;
					String ORIGINALNAMEUSAGE;
					String PARENTNAMEUSAGE;
					String HIGHERCLASSIFICATION;
					String TAXONOMICSTATUS;
					String NAMEPUBLISHEDIN;
					BigDecimal NAMEPUBLISHEDINYEAR;
					String NOMENCLATURALSTATUS;
					String KINGDOM;
					String PHYLUM;
					String CLASS_;
					String ORDER_;
					String FAMILY;
					String GENUS;
					String SUBGENUS;
					String VERNACULARNAME;
					String SOURCEFILEID;
					String DWCATAXONID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.TAXONID == null) ? 0
											: this.TAXONID.hashCode());

							result = prime
									* result
									+ ((this.SCIENTIFICNAME == null) ? 0
											: this.SCIENTIFICNAME.hashCode());

							result = prime
									* result
									+ ((this.SCIENTIFICNAMEAUTHORSHIP == null) ? 0
											: this.SCIENTIFICNAMEAUTHORSHIP
													.hashCode());

							result = prime
									* result
									+ ((this.CREATED == null) ? 0
											: this.CREATED.hashCode());

							result = prime
									* result
									+ ((this.MODIFIED == null) ? 0
											: this.MODIFIED.hashCode());

							result = prime
									* result
									+ ((this.NAMEACCORDINGTO == null) ? 0
											: this.NAMEACCORDINGTO.hashCode());

							result = prime
									* result
									+ ((this.SPECIFICEPITHET == null) ? 0
											: this.SPECIFICEPITHET.hashCode());

							result = prime
									* result
									+ ((this.INFRASPECIFICEPITHET == null) ? 0
											: this.INFRASPECIFICEPITHET
													.hashCode());

							result = prime
									* result
									+ ((this.NOMENCLATURALCODE == null) ? 0
											: this.NOMENCLATURALCODE.hashCode());

							result = prime
									* result
									+ ((this.TAXONRANK == null) ? 0
											: this.TAXONRANK.hashCode());

							result = prime
									* result
									+ ((this.TAXONREMARKS == null) ? 0
											: this.TAXONREMARKS.hashCode());

							result = prime
									* result
									+ ((this.VERBATIMTAXONRANK == null) ? 0
											: this.VERBATIMTAXONRANK.hashCode());

							result = prime
									* result
									+ ((this.ACCEPTEDNAMEUSAGE == null) ? 0
											: this.ACCEPTEDNAMEUSAGE.hashCode());

							result = prime
									* result
									+ ((this.ORIGINALNAMEUSAGE == null) ? 0
											: this.ORIGINALNAMEUSAGE.hashCode());

							result = prime
									* result
									+ ((this.PARENTNAMEUSAGE == null) ? 0
											: this.PARENTNAMEUSAGE.hashCode());

							result = prime
									* result
									+ ((this.HIGHERCLASSIFICATION == null) ? 0
											: this.HIGHERCLASSIFICATION
													.hashCode());

							result = prime
									* result
									+ ((this.TAXONOMICSTATUS == null) ? 0
											: this.TAXONOMICSTATUS.hashCode());

							result = prime
									* result
									+ ((this.NAMEPUBLISHEDIN == null) ? 0
											: this.NAMEPUBLISHEDIN.hashCode());

							result = prime
									* result
									+ ((this.NAMEPUBLISHEDINYEAR == null) ? 0
											: this.NAMEPUBLISHEDINYEAR
													.hashCode());

							result = prime
									* result
									+ ((this.NOMENCLATURALSTATUS == null) ? 0
											: this.NOMENCLATURALSTATUS
													.hashCode());

							result = prime
									* result
									+ ((this.KINGDOM == null) ? 0
											: this.KINGDOM.hashCode());

							result = prime
									* result
									+ ((this.PHYLUM == null) ? 0 : this.PHYLUM
											.hashCode());

							result = prime
									* result
									+ ((this.CLASS_ == null) ? 0 : this.CLASS_
											.hashCode());

							result = prime
									* result
									+ ((this.ORDER_ == null) ? 0 : this.ORDER_
											.hashCode());

							result = prime
									* result
									+ ((this.FAMILY == null) ? 0 : this.FAMILY
											.hashCode());

							result = prime
									* result
									+ ((this.GENUS == null) ? 0 : this.GENUS
											.hashCode());

							result = prime
									* result
									+ ((this.SUBGENUS == null) ? 0
											: this.SUBGENUS.hashCode());

							result = prime
									* result
									+ ((this.VERNACULARNAME == null) ? 0
											: this.VERNACULARNAME.hashCode());

							result = prime
									* result
									+ ((this.SOURCEFILEID == null) ? 0
											: this.SOURCEFILEID.hashCode());

							result = prime
									* result
									+ ((this.DWCATAXONID == null) ? 0
											: this.DWCATAXONID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.TAXONID == null) {
							if (other.TAXONID != null)
								return false;
						} else if (!this.TAXONID.equals(other.TAXONID))
							return false;

						if (this.SCIENTIFICNAME == null) {
							if (other.SCIENTIFICNAME != null)
								return false;
						} else if (!this.SCIENTIFICNAME
								.equals(other.SCIENTIFICNAME))
							return false;

						if (this.SCIENTIFICNAMEAUTHORSHIP == null) {
							if (other.SCIENTIFICNAMEAUTHORSHIP != null)
								return false;
						} else if (!this.SCIENTIFICNAMEAUTHORSHIP
								.equals(other.SCIENTIFICNAMEAUTHORSHIP))
							return false;

						if (this.CREATED == null) {
							if (other.CREATED != null)
								return false;
						} else if (!this.CREATED.equals(other.CREATED))
							return false;

						if (this.MODIFIED == null) {
							if (other.MODIFIED != null)
								return false;
						} else if (!this.MODIFIED.equals(other.MODIFIED))
							return false;

						if (this.NAMEACCORDINGTO == null) {
							if (other.NAMEACCORDINGTO != null)
								return false;
						} else if (!this.NAMEACCORDINGTO
								.equals(other.NAMEACCORDINGTO))
							return false;

						if (this.SPECIFICEPITHET == null) {
							if (other.SPECIFICEPITHET != null)
								return false;
						} else if (!this.SPECIFICEPITHET
								.equals(other.SPECIFICEPITHET))
							return false;

						if (this.INFRASPECIFICEPITHET == null) {
							if (other.INFRASPECIFICEPITHET != null)
								return false;
						} else if (!this.INFRASPECIFICEPITHET
								.equals(other.INFRASPECIFICEPITHET))
							return false;

						if (this.NOMENCLATURALCODE == null) {
							if (other.NOMENCLATURALCODE != null)
								return false;
						} else if (!this.NOMENCLATURALCODE
								.equals(other.NOMENCLATURALCODE))
							return false;

						if (this.TAXONRANK == null) {
							if (other.TAXONRANK != null)
								return false;
						} else if (!this.TAXONRANK.equals(other.TAXONRANK))
							return false;

						if (this.TAXONREMARKS == null) {
							if (other.TAXONREMARKS != null)
								return false;
						} else if (!this.TAXONREMARKS
								.equals(other.TAXONREMARKS))
							return false;

						if (this.VERBATIMTAXONRANK == null) {
							if (other.VERBATIMTAXONRANK != null)
								return false;
						} else if (!this.VERBATIMTAXONRANK
								.equals(other.VERBATIMTAXONRANK))
							return false;

						if (this.ACCEPTEDNAMEUSAGE == null) {
							if (other.ACCEPTEDNAMEUSAGE != null)
								return false;
						} else if (!this.ACCEPTEDNAMEUSAGE
								.equals(other.ACCEPTEDNAMEUSAGE))
							return false;

						if (this.ORIGINALNAMEUSAGE == null) {
							if (other.ORIGINALNAMEUSAGE != null)
								return false;
						} else if (!this.ORIGINALNAMEUSAGE
								.equals(other.ORIGINALNAMEUSAGE))
							return false;

						if (this.PARENTNAMEUSAGE == null) {
							if (other.PARENTNAMEUSAGE != null)
								return false;
						} else if (!this.PARENTNAMEUSAGE
								.equals(other.PARENTNAMEUSAGE))
							return false;

						if (this.HIGHERCLASSIFICATION == null) {
							if (other.HIGHERCLASSIFICATION != null)
								return false;
						} else if (!this.HIGHERCLASSIFICATION
								.equals(other.HIGHERCLASSIFICATION))
							return false;

						if (this.TAXONOMICSTATUS == null) {
							if (other.TAXONOMICSTATUS != null)
								return false;
						} else if (!this.TAXONOMICSTATUS
								.equals(other.TAXONOMICSTATUS))
							return false;

						if (this.NAMEPUBLISHEDIN == null) {
							if (other.NAMEPUBLISHEDIN != null)
								return false;
						} else if (!this.NAMEPUBLISHEDIN
								.equals(other.NAMEPUBLISHEDIN))
							return false;

						if (this.NAMEPUBLISHEDINYEAR == null) {
							if (other.NAMEPUBLISHEDINYEAR != null)
								return false;
						} else if (!this.NAMEPUBLISHEDINYEAR
								.equals(other.NAMEPUBLISHEDINYEAR))
							return false;

						if (this.NOMENCLATURALSTATUS == null) {
							if (other.NOMENCLATURALSTATUS != null)
								return false;
						} else if (!this.NOMENCLATURALSTATUS
								.equals(other.NOMENCLATURALSTATUS))
							return false;

						if (this.KINGDOM == null) {
							if (other.KINGDOM != null)
								return false;
						} else if (!this.KINGDOM.equals(other.KINGDOM))
							return false;

						if (this.PHYLUM == null) {
							if (other.PHYLUM != null)
								return false;
						} else if (!this.PHYLUM.equals(other.PHYLUM))
							return false;

						if (this.CLASS_ == null) {
							if (other.CLASS_ != null)
								return false;
						} else if (!this.CLASS_.equals(other.CLASS_))
							return false;

						if (this.ORDER_ == null) {
							if (other.ORDER_ != null)
								return false;
						} else if (!this.ORDER_.equals(other.ORDER_))
							return false;

						if (this.FAMILY == null) {
							if (other.FAMILY != null)
								return false;
						} else if (!this.FAMILY.equals(other.FAMILY))
							return false;

						if (this.GENUS == null) {
							if (other.GENUS != null)
								return false;
						} else if (!this.GENUS.equals(other.GENUS))
							return false;

						if (this.SUBGENUS == null) {
							if (other.SUBGENUS != null)
								return false;
						} else if (!this.SUBGENUS.equals(other.SUBGENUS))
							return false;

						if (this.VERNACULARNAME == null) {
							if (other.VERNACULARNAME != null)
								return false;
						} else if (!this.VERNACULARNAME
								.equals(other.VERNACULARNAME))
							return false;

						if (this.SOURCEFILEID == null) {
							if (other.SOURCEFILEID != null)
								return false;
						} else if (!this.SOURCEFILEID
								.equals(other.SOURCEFILEID))
							return false;

						if (this.DWCATAXONID == null) {
							if (other.DWCATAXONID != null)
								return false;
						} else if (!this.DWCATAXONID.equals(other.DWCATAXONID))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tMemorizeRows_3 begin ] start
				 */

				ok_Hash.put("tMemorizeRows_3", false);
				start_Hash.put("tMemorizeRows_3", System.currentTimeMillis());

				currentComponent = "tMemorizeRows_3";

				int tos_count_tMemorizeRows_3 = 0;

				int iRows_tMemorizeRows_3 = 50;
				String[] TAXONID_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_TAXONID",
						TAXONID_tMemorizeRows_3);
				String[] SCIENTIFICNAME_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_SCIENTIFICNAME",
						SCIENTIFICNAME_tMemorizeRows_3);
				String[] SCIENTIFICNAMEAUTHORSHIP_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_SCIENTIFICNAMEAUTHORSHIP",
						SCIENTIFICNAMEAUTHORSHIP_tMemorizeRows_3);
				java.util.Date[] CREATED_tMemorizeRows_3 = new java.util.Date[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_CREATED",
						CREATED_tMemorizeRows_3);
				java.util.Date[] MODIFIED_tMemorizeRows_3 = new java.util.Date[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_MODIFIED",
						MODIFIED_tMemorizeRows_3);
				String[] NAMEACCORDINGTO_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_NAMEACCORDINGTO",
						NAMEACCORDINGTO_tMemorizeRows_3);
				String[] SPECIFICEPITHET_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_SPECIFICEPITHET",
						SPECIFICEPITHET_tMemorizeRows_3);
				String[] INFRASPECIFICEPITHET_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_INFRASPECIFICEPITHET",
						INFRASPECIFICEPITHET_tMemorizeRows_3);
				String[] NOMENCLATURALCODE_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_NOMENCLATURALCODE",
						NOMENCLATURALCODE_tMemorizeRows_3);
				String[] TAXONRANK_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_TAXONRANK",
						TAXONRANK_tMemorizeRows_3);
				String[] TAXONREMARKS_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_TAXONREMARKS",
						TAXONREMARKS_tMemorizeRows_3);
				String[] VERBATIMTAXONRANK_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_VERBATIMTAXONRANK",
						VERBATIMTAXONRANK_tMemorizeRows_3);
				String[] ACCEPTEDNAMEUSAGE_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_ACCEPTEDNAMEUSAGE",
						ACCEPTEDNAMEUSAGE_tMemorizeRows_3);
				String[] ORIGINALNAMEUSAGE_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_ORIGINALNAMEUSAGE",
						ORIGINALNAMEUSAGE_tMemorizeRows_3);
				String[] PARENTNAMEUSAGE_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_PARENTNAMEUSAGE",
						PARENTNAMEUSAGE_tMemorizeRows_3);
				String[] HIGHERCLASSIFICATION_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_HIGHERCLASSIFICATION",
						HIGHERCLASSIFICATION_tMemorizeRows_3);
				String[] TAXONOMICSTATUS_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_TAXONOMICSTATUS",
						TAXONOMICSTATUS_tMemorizeRows_3);
				String[] NAMEPUBLISHEDIN_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_NAMEPUBLISHEDIN",
						NAMEPUBLISHEDIN_tMemorizeRows_3);
				BigDecimal[] NAMEPUBLISHEDINYEAR_tMemorizeRows_3 = new BigDecimal[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_NAMEPUBLISHEDINYEAR",
						NAMEPUBLISHEDINYEAR_tMemorizeRows_3);
				String[] NOMENCLATURALSTATUS_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_NOMENCLATURALSTATUS",
						NOMENCLATURALSTATUS_tMemorizeRows_3);
				String[] KINGDOM_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_KINGDOM",
						KINGDOM_tMemorizeRows_3);
				String[] PHYLUM_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_PHYLUM", PHYLUM_tMemorizeRows_3);
				String[] CLASS__tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_CLASS_", CLASS__tMemorizeRows_3);
				String[] ORDER__tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_ORDER_", ORDER__tMemorizeRows_3);
				String[] FAMILY_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_FAMILY", FAMILY_tMemorizeRows_3);
				String[] GENUS_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_GENUS", GENUS_tMemorizeRows_3);
				String[] SUBGENUS_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_SUBGENUS",
						SUBGENUS_tMemorizeRows_3);
				String[] VERNACULARNAME_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_VERNACULARNAME",
						VERNACULARNAME_tMemorizeRows_3);
				String[] SOURCEFILEID_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_SOURCEFILEID",
						SOURCEFILEID_tMemorizeRows_3);
				String[] DWCATAXONID_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_DWCATAXONID",
						DWCATAXONID_tMemorizeRows_3);
				String[] fieldName_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_fieldName",
						fieldName_tMemorizeRows_3);
				String[] data_tMemorizeRows_3 = new String[iRows_tMemorizeRows_3];
				globalMap.put("tMemorizeRows_3_data", data_tMemorizeRows_3);
				globalMap.put("tMemorizeRows_3_NB_LINE_ROWS",
						iRows_tMemorizeRows_3);

				/**
				 * [tMemorizeRows_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<taxon_choicesStruct> tHash_Lookup_taxon_choices = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<taxon_choicesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<taxon_choicesStruct>) globalMap
						.get("tHash_Lookup_taxon_choices"));

				taxon_choicesStruct taxon_choicesHashKey = new taxon_choicesStruct();
				taxon_choicesStruct taxon_choicesDefault = new taxon_choicesStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				rows_taxonStruct rows_taxon_tmp = new rows_taxonStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tOracleInput_3 begin ] start
				 */

				ok_Hash.put("tOracleInput_3", false);
				start_Hash.put("tOracleInput_3", System.currentTimeMillis());

				currentComponent = "tOracleInput_3";

				int tos_count_tOracleInput_3 = 0;

				int nb_line_tOracleInput_3 = 0;
				java.sql.Connection conn_tOracleInput_3 = null;
				String driverClass_tOracleInput_3 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_3);

				String url_tOracleInput_3 = null;
				url_tOracleInput_3 = "jdbc:oracle:thin:@"
						+ context.recolnat_Server + ":" + context.recolnat_Port
						+ ":" + context.recolnat_Sid;

				String dbUser_tOracleInput_3 = context.recolnat_Login;

				final String decryptedPassword_tOracleInput_3 = context.recolnat_Password;

				String dbPwd_tOracleInput_3 = decryptedPassword_tOracleInput_3;

				java.util.Properties atnParamsPrope_tOracleInput_3 = new java.util.Properties();
				atnParamsPrope_tOracleInput_3
						.put("user", dbUser_tOracleInput_3);
				atnParamsPrope_tOracleInput_3.put("password",
						dbPwd_tOracleInput_3);
				if (context.recolnat_AdditionalParams != null
						&& !"\"\"".equals(context.recolnat_AdditionalParams)
						&& !"".equals(context.recolnat_AdditionalParams)) {
					atnParamsPrope_tOracleInput_3
							.load(new java.io.ByteArrayInputStream(
									context.recolnat_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}
				conn_tOracleInput_3 = java.sql.DriverManager.getConnection(
						url_tOracleInput_3, atnParamsPrope_tOracleInput_3);
				java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_3 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_3.next()) {
					sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_3)
						.setSessionTimeZone(sessionTimezone_tOracleInput_3);

				java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3
						.createStatement();

				String dbquery_tOracleInput_3 = "SELECT \n  "
						+ context.recolnat_Schema + ".TAXONS.TAXONID, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.SCIENTIFICNAME, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.SCIENTIFICNAMEAUTHORSHIP, \n  "
						+ context.recolnat_Schema + ".TAXONS.CREATED, \n  "
						+ context.recolnat_Schema + ".TAXONS.MODIFIED, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.NAMEACCORDINGTO, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.SPECIFICEPITHET, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.INFRASPECIFICEPITHET, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.NOMENCLATURALCODE, \n  "
						+ context.recolnat_Schema + ".TAXONS.TAXONRANK, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.TAXONREMARKS, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.VERBATIMTAXONRANK, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.ACCEPTEDNAMEUSAGE, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.ORIGINALNAMEUSAGE, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.PARENTNAMEUSAGE, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.HIGHERCLASSIFICATION, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.TAXONOMICSTATUS, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.NAMEPUBLISHEDIN, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.NAMEPUBLISHEDINYEAR, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.NOMENCLATURALSTATUS, \n  "
						+ context.recolnat_Schema + ".TAXONS.KINGDOM, \n  "
						+ context.recolnat_Schema + ".TAXONS.PHYLUM, \n  "
						+ context.recolnat_Schema + ".TAXONS.CLASS_, \n  "
						+ context.recolnat_Schema + ".TAXONS.ORDER_, \n  "
						+ context.recolnat_Schema + ".TAXONS.FAMILY, \n  "
						+ context.recolnat_Schema + ".TAXONS.GENUS, \n  "
						+ context.recolnat_Schema + ".TAXONS.SUBGENUS, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.VERNACULARNAME, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.SOURCEFILEID, \n  "
						+ context.recolnat_Schema
						+ ".TAXONS.DWCATAXONID\nFROM "
						+ context.recolnat_Schema + ".TAXONS\nWHERE TAXONID='"
						+ ((String) globalMap.get("taxonId")) + "'";

				globalMap.put("tOracleInput_3_QUERY", dbquery_tOracleInput_3);

				java.sql.ResultSet rs_tOracleInput_3 = null;
				try {
					rs_tOracleInput_3 = stmt_tOracleInput_3
							.executeQuery(dbquery_tOracleInput_3);
					java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3
							.getMetaData();
					int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3
							.getColumnCount();

					String tmpContent_tOracleInput_3 = null;

					while (rs_tOracleInput_3.next()) {
						nb_line_tOracleInput_3++;

						if (colQtyInRs_tOracleInput_3 < 1) {
							db_taxons.TAXONID = null;
						} else {

							if (rs_tOracleInput_3.getObject(1) != null) {
								db_taxons.TAXONID = rs_tOracleInput_3
										.getBytes(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_3 < 2) {
							db_taxons.SCIENTIFICNAME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(2);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.SCIENTIFICNAME = tmpContent_tOracleInput_3;
							} else {
								db_taxons.SCIENTIFICNAME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 3) {
							db_taxons.SCIENTIFICNAMEAUTHORSHIP = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(3);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.SCIENTIFICNAMEAUTHORSHIP = tmpContent_tOracleInput_3;
							} else {
								db_taxons.SCIENTIFICNAMEAUTHORSHIP = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 4) {
							db_taxons.CREATED = null;
						} else {

							if (rs_tOracleInput_3.getTimestamp(4) != null) {
								db_taxons.CREATED = new java.util.Date(
										rs_tOracleInput_3.getTimestamp(4)
												.getTime());
							} else {
								db_taxons.CREATED = null;
							}

						}
						if (colQtyInRs_tOracleInput_3 < 5) {
							db_taxons.MODIFIED = null;
						} else {

							if (rs_tOracleInput_3.getTimestamp(5) != null) {
								db_taxons.MODIFIED = new java.util.Date(
										rs_tOracleInput_3.getTimestamp(5)
												.getTime());
							} else {
								db_taxons.MODIFIED = null;
							}

						}
						if (colQtyInRs_tOracleInput_3 < 6) {
							db_taxons.NAMEACCORDINGTO = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(6);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.NAMEACCORDINGTO = tmpContent_tOracleInput_3;
							} else {
								db_taxons.NAMEACCORDINGTO = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 7) {
							db_taxons.SPECIFICEPITHET = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(7);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.SPECIFICEPITHET = tmpContent_tOracleInput_3;
							} else {
								db_taxons.SPECIFICEPITHET = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 8) {
							db_taxons.INFRASPECIFICEPITHET = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(8);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.INFRASPECIFICEPITHET = tmpContent_tOracleInput_3;
							} else {
								db_taxons.INFRASPECIFICEPITHET = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 9) {
							db_taxons.NOMENCLATURALCODE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(9);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.NOMENCLATURALCODE = tmpContent_tOracleInput_3;
							} else {
								db_taxons.NOMENCLATURALCODE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 10) {
							db_taxons.TAXONRANK = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(10);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.TAXONRANK = tmpContent_tOracleInput_3;
							} else {
								db_taxons.TAXONRANK = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 11) {
							db_taxons.TAXONREMARKS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(11);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.TAXONREMARKS = tmpContent_tOracleInput_3;
							} else {
								db_taxons.TAXONREMARKS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 12) {
							db_taxons.VERBATIMTAXONRANK = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(12);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.VERBATIMTAXONRANK = tmpContent_tOracleInput_3;
							} else {
								db_taxons.VERBATIMTAXONRANK = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 13) {
							db_taxons.ACCEPTEDNAMEUSAGE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(13);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.ACCEPTEDNAMEUSAGE = tmpContent_tOracleInput_3;
							} else {
								db_taxons.ACCEPTEDNAMEUSAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 14) {
							db_taxons.ORIGINALNAMEUSAGE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(14);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.ORIGINALNAMEUSAGE = tmpContent_tOracleInput_3;
							} else {
								db_taxons.ORIGINALNAMEUSAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 15) {
							db_taxons.PARENTNAMEUSAGE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(15);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.PARENTNAMEUSAGE = tmpContent_tOracleInput_3;
							} else {
								db_taxons.PARENTNAMEUSAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 16) {
							db_taxons.HIGHERCLASSIFICATION = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(16);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.HIGHERCLASSIFICATION = tmpContent_tOracleInput_3;
							} else {
								db_taxons.HIGHERCLASSIFICATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 17) {
							db_taxons.TAXONOMICSTATUS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(17);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.TAXONOMICSTATUS = tmpContent_tOracleInput_3;
							} else {
								db_taxons.TAXONOMICSTATUS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 18) {
							db_taxons.NAMEPUBLISHEDIN = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(18);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.NAMEPUBLISHEDIN = tmpContent_tOracleInput_3;
							} else {
								db_taxons.NAMEPUBLISHEDIN = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 19) {
							db_taxons.NAMEPUBLISHEDINYEAR = null;
						} else {

							if (rs_tOracleInput_3.getObject(19) != null) {
								db_taxons.NAMEPUBLISHEDINYEAR = rs_tOracleInput_3
										.getBigDecimal(19);
							} else {

								db_taxons.NAMEPUBLISHEDINYEAR = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 20) {
							db_taxons.NOMENCLATURALSTATUS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(20);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.NOMENCLATURALSTATUS = tmpContent_tOracleInput_3;
							} else {
								db_taxons.NOMENCLATURALSTATUS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 21) {
							db_taxons.KINGDOM = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(21);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.KINGDOM = tmpContent_tOracleInput_3;
							} else {
								db_taxons.KINGDOM = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 22) {
							db_taxons.PHYLUM = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(22);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.PHYLUM = tmpContent_tOracleInput_3;
							} else {
								db_taxons.PHYLUM = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 23) {
							db_taxons.CLASS_ = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(23);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.CLASS_ = tmpContent_tOracleInput_3;
							} else {
								db_taxons.CLASS_ = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 24) {
							db_taxons.ORDER_ = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(24);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.ORDER_ = tmpContent_tOracleInput_3;
							} else {
								db_taxons.ORDER_ = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 25) {
							db_taxons.FAMILY = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(25);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.FAMILY = tmpContent_tOracleInput_3;
							} else {
								db_taxons.FAMILY = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 26) {
							db_taxons.GENUS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(26);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.GENUS = tmpContent_tOracleInput_3;
							} else {
								db_taxons.GENUS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 27) {
							db_taxons.SUBGENUS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(27);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.SUBGENUS = tmpContent_tOracleInput_3;
							} else {
								db_taxons.SUBGENUS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 28) {
							db_taxons.VERNACULARNAME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(28);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.VERNACULARNAME = tmpContent_tOracleInput_3;
							} else {
								db_taxons.VERNACULARNAME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 29) {
							db_taxons.SOURCEFILEID = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(29);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.SOURCEFILEID = tmpContent_tOracleInput_3;
							} else {
								db_taxons.SOURCEFILEID = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 30) {
							db_taxons.DWCATAXONID = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3
									.getString(30);
							if (tmpContent_tOracleInput_3 != null) {
								db_taxons.DWCATAXONID = tmpContent_tOracleInput_3;
							} else {
								db_taxons.DWCATAXONID = null;
							}
						}

						/**
						 * [tOracleInput_3 begin ] stop
						 */

						/**
						 * [tOracleInput_3 main ] start
						 */

						currentComponent = "tOracleInput_3";

						tos_count_tOracleInput_3++;

						/**
						 * [tOracleInput_3 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "taxon_choices"
						// /////////////////////////////////////////////

						boolean forceLooptaxon_choices = false;

						taxon_choicesStruct taxon_choicesObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							taxon_choicesHashKey.className = "Taxon";

							taxon_choicesHashKey.relationId = javax.xml.bind.DatatypeConverter
									.printHexBinary(db_taxons.TAXONID);

							taxon_choicesHashKey.hashCodeDirty = true;

							tHash_Lookup_taxon_choices
									.lookup(taxon_choicesHashKey);

							if (!tHash_Lookup_taxon_choices.hasNext()) { // G_TM_M_090

								forceLooptaxon_choices = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooptaxon_choices = true;
						} // G 21

						taxon_choicesStruct taxon_choices = null;

						while ((tHash_Lookup_taxon_choices != null && tHash_Lookup_taxon_choices
								.hasNext()) || forceLooptaxon_choices) { // G_TM_M_043

							// CALL close loop of lookup 'taxon_choices'

							taxon_choicesStruct fromLookup_taxon_choices = null;
							taxon_choices = taxon_choicesDefault;

							if (!forceLooptaxon_choices) { // G 46

								fromLookup_taxon_choices = tHash_Lookup_taxon_choices
										.next();

								if (fromLookup_taxon_choices != null) {
									taxon_choices = fromLookup_taxon_choices;
								}

							} // G 46

							forceLooptaxon_choices = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								rows_taxon = null;

								// # Output table : 'rows_taxon'
								rows_taxon_tmp.TAXONID = javax.xml.bind.DatatypeConverter
										.printHexBinary(db_taxons.TAXONID);
								rows_taxon_tmp.SCIENTIFICNAME = db_taxons.SCIENTIFICNAME;
								rows_taxon_tmp.SCIENTIFICNAMEAUTHORSHIP = db_taxons.SCIENTIFICNAMEAUTHORSHIP;
								rows_taxon_tmp.CREATED = db_taxons.CREATED;
								rows_taxon_tmp.MODIFIED = db_taxons.MODIFIED;
								rows_taxon_tmp.NAMEACCORDINGTO = db_taxons.NAMEACCORDINGTO;
								rows_taxon_tmp.SPECIFICEPITHET = db_taxons.SPECIFICEPITHET;
								rows_taxon_tmp.INFRASPECIFICEPITHET = db_taxons.INFRASPECIFICEPITHET;
								rows_taxon_tmp.NOMENCLATURALCODE = db_taxons.NOMENCLATURALCODE;
								rows_taxon_tmp.TAXONRANK = db_taxons.TAXONRANK;
								rows_taxon_tmp.TAXONREMARKS = db_taxons.TAXONREMARKS;
								rows_taxon_tmp.VERBATIMTAXONRANK = db_taxons.VERBATIMTAXONRANK;
								rows_taxon_tmp.ACCEPTEDNAMEUSAGE = db_taxons.ACCEPTEDNAMEUSAGE;
								rows_taxon_tmp.ORIGINALNAMEUSAGE = db_taxons.ORIGINALNAMEUSAGE;
								rows_taxon_tmp.PARENTNAMEUSAGE = db_taxons.PARENTNAMEUSAGE;
								rows_taxon_tmp.HIGHERCLASSIFICATION = db_taxons.HIGHERCLASSIFICATION;
								rows_taxon_tmp.TAXONOMICSTATUS = db_taxons.TAXONOMICSTATUS;
								rows_taxon_tmp.NAMEPUBLISHEDIN = db_taxons.NAMEPUBLISHEDIN;
								rows_taxon_tmp.NAMEPUBLISHEDINYEAR = db_taxons.NAMEPUBLISHEDINYEAR;
								rows_taxon_tmp.NOMENCLATURALSTATUS = db_taxons.NOMENCLATURALSTATUS;
								rows_taxon_tmp.KINGDOM = db_taxons.KINGDOM;
								rows_taxon_tmp.PHYLUM = db_taxons.PHYLUM;
								rows_taxon_tmp.CLASS_ = db_taxons.CLASS_;
								rows_taxon_tmp.ORDER_ = db_taxons.ORDER_;
								rows_taxon_tmp.FAMILY = db_taxons.FAMILY;
								rows_taxon_tmp.GENUS = db_taxons.GENUS;
								rows_taxon_tmp.SUBGENUS = db_taxons.SUBGENUS;
								rows_taxon_tmp.VERNACULARNAME = db_taxons.VERNACULARNAME;
								rows_taxon_tmp.SOURCEFILEID = db_taxons.SOURCEFILEID;
								rows_taxon_tmp.DWCATAXONID = db_taxons.DWCATAXONID;
								rows_taxon_tmp.fieldName = taxon_choices.fieldName;
								rows_taxon_tmp.data = taxon_choices.data;
								rows_taxon = rows_taxon_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "rows_taxon"
							if (rows_taxon != null) {

								/**
								 * [tMemorizeRows_3 main ] start
								 */

								currentComponent = "tMemorizeRows_3";

								for (int i_tMemorizeRows_3 = iRows_tMemorizeRows_3 - 1; i_tMemorizeRows_3 > 0; i_tMemorizeRows_3--) {
									fieldName_tMemorizeRows_3[i_tMemorizeRows_3] = fieldName_tMemorizeRows_3[i_tMemorizeRows_3 - 1];
									data_tMemorizeRows_3[i_tMemorizeRows_3] = data_tMemorizeRows_3[i_tMemorizeRows_3 - 1];
								}
								fieldName_tMemorizeRows_3[0] = rows_taxon.fieldName;
								data_tMemorizeRows_3[0] = rows_taxon.data;

								row12 = rows_taxon;

								tos_count_tMemorizeRows_3++;

								/**
								 * [tMemorizeRows_3 main ] stop
								 */

								/**
								 * [tAggregateRow_3_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_3";

								currentComponent = "tAggregateRow_3_AGGOUT";

								operation_finder_tAggregateRow_3.TAXONID = row12.TAXONID;
								operation_finder_tAggregateRow_3.SCIENTIFICNAME = row12.SCIENTIFICNAME;
								operation_finder_tAggregateRow_3.SCIENTIFICNAMEAUTHORSHIP = row12.SCIENTIFICNAMEAUTHORSHIP;
								operation_finder_tAggregateRow_3.CREATED = row12.CREATED;
								operation_finder_tAggregateRow_3.MODIFIED = row12.MODIFIED;
								operation_finder_tAggregateRow_3.NAMEACCORDINGTO = row12.NAMEACCORDINGTO;
								operation_finder_tAggregateRow_3.SPECIFICEPITHET = row12.SPECIFICEPITHET;
								operation_finder_tAggregateRow_3.INFRASPECIFICEPITHET = row12.INFRASPECIFICEPITHET;
								operation_finder_tAggregateRow_3.NOMENCLATURALCODE = row12.NOMENCLATURALCODE;
								operation_finder_tAggregateRow_3.TAXONRANK = row12.TAXONRANK;
								operation_finder_tAggregateRow_3.TAXONREMARKS = row12.TAXONREMARKS;
								operation_finder_tAggregateRow_3.VERBATIMTAXONRANK = row12.VERBATIMTAXONRANK;
								operation_finder_tAggregateRow_3.ACCEPTEDNAMEUSAGE = row12.ACCEPTEDNAMEUSAGE;
								operation_finder_tAggregateRow_3.ORIGINALNAMEUSAGE = row12.ORIGINALNAMEUSAGE;
								operation_finder_tAggregateRow_3.PARENTNAMEUSAGE = row12.PARENTNAMEUSAGE;
								operation_finder_tAggregateRow_3.HIGHERCLASSIFICATION = row12.HIGHERCLASSIFICATION;
								operation_finder_tAggregateRow_3.TAXONOMICSTATUS = row12.TAXONOMICSTATUS;
								operation_finder_tAggregateRow_3.NAMEPUBLISHEDIN = row12.NAMEPUBLISHEDIN;
								operation_finder_tAggregateRow_3.NAMEPUBLISHEDINYEAR = row12.NAMEPUBLISHEDINYEAR;
								operation_finder_tAggregateRow_3.NOMENCLATURALSTATUS = row12.NOMENCLATURALSTATUS;
								operation_finder_tAggregateRow_3.KINGDOM = row12.KINGDOM;
								operation_finder_tAggregateRow_3.PHYLUM = row12.PHYLUM;
								operation_finder_tAggregateRow_3.CLASS_ = row12.CLASS_;
								operation_finder_tAggregateRow_3.ORDER_ = row12.ORDER_;
								operation_finder_tAggregateRow_3.FAMILY = row12.FAMILY;
								operation_finder_tAggregateRow_3.GENUS = row12.GENUS;
								operation_finder_tAggregateRow_3.SUBGENUS = row12.SUBGENUS;
								operation_finder_tAggregateRow_3.VERNACULARNAME = row12.VERNACULARNAME;
								operation_finder_tAggregateRow_3.SOURCEFILEID = row12.SOURCEFILEID;
								operation_finder_tAggregateRow_3.DWCATAXONID = row12.DWCATAXONID;

								operation_finder_tAggregateRow_3.hashCodeDirty = true;

								operation_result_tAggregateRow_3 = hash_tAggregateRow_3
										.get(operation_finder_tAggregateRow_3);

								if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

									operation_result_tAggregateRow_3.TAXONID = operation_finder_tAggregateRow_3.TAXONID;
									operation_result_tAggregateRow_3.SCIENTIFICNAME = operation_finder_tAggregateRow_3.SCIENTIFICNAME;
									operation_result_tAggregateRow_3.SCIENTIFICNAMEAUTHORSHIP = operation_finder_tAggregateRow_3.SCIENTIFICNAMEAUTHORSHIP;
									operation_result_tAggregateRow_3.CREATED = operation_finder_tAggregateRow_3.CREATED;
									operation_result_tAggregateRow_3.MODIFIED = operation_finder_tAggregateRow_3.MODIFIED;
									operation_result_tAggregateRow_3.NAMEACCORDINGTO = operation_finder_tAggregateRow_3.NAMEACCORDINGTO;
									operation_result_tAggregateRow_3.SPECIFICEPITHET = operation_finder_tAggregateRow_3.SPECIFICEPITHET;
									operation_result_tAggregateRow_3.INFRASPECIFICEPITHET = operation_finder_tAggregateRow_3.INFRASPECIFICEPITHET;
									operation_result_tAggregateRow_3.NOMENCLATURALCODE = operation_finder_tAggregateRow_3.NOMENCLATURALCODE;
									operation_result_tAggregateRow_3.TAXONRANK = operation_finder_tAggregateRow_3.TAXONRANK;
									operation_result_tAggregateRow_3.TAXONREMARKS = operation_finder_tAggregateRow_3.TAXONREMARKS;
									operation_result_tAggregateRow_3.VERBATIMTAXONRANK = operation_finder_tAggregateRow_3.VERBATIMTAXONRANK;
									operation_result_tAggregateRow_3.ACCEPTEDNAMEUSAGE = operation_finder_tAggregateRow_3.ACCEPTEDNAMEUSAGE;
									operation_result_tAggregateRow_3.ORIGINALNAMEUSAGE = operation_finder_tAggregateRow_3.ORIGINALNAMEUSAGE;
									operation_result_tAggregateRow_3.PARENTNAMEUSAGE = operation_finder_tAggregateRow_3.PARENTNAMEUSAGE;
									operation_result_tAggregateRow_3.HIGHERCLASSIFICATION = operation_finder_tAggregateRow_3.HIGHERCLASSIFICATION;
									operation_result_tAggregateRow_3.TAXONOMICSTATUS = operation_finder_tAggregateRow_3.TAXONOMICSTATUS;
									operation_result_tAggregateRow_3.NAMEPUBLISHEDIN = operation_finder_tAggregateRow_3.NAMEPUBLISHEDIN;
									operation_result_tAggregateRow_3.NAMEPUBLISHEDINYEAR = operation_finder_tAggregateRow_3.NAMEPUBLISHEDINYEAR;
									operation_result_tAggregateRow_3.NOMENCLATURALSTATUS = operation_finder_tAggregateRow_3.NOMENCLATURALSTATUS;
									operation_result_tAggregateRow_3.KINGDOM = operation_finder_tAggregateRow_3.KINGDOM;
									operation_result_tAggregateRow_3.PHYLUM = operation_finder_tAggregateRow_3.PHYLUM;
									operation_result_tAggregateRow_3.CLASS_ = operation_finder_tAggregateRow_3.CLASS_;
									operation_result_tAggregateRow_3.ORDER_ = operation_finder_tAggregateRow_3.ORDER_;
									operation_result_tAggregateRow_3.FAMILY = operation_finder_tAggregateRow_3.FAMILY;
									operation_result_tAggregateRow_3.GENUS = operation_finder_tAggregateRow_3.GENUS;
									operation_result_tAggregateRow_3.SUBGENUS = operation_finder_tAggregateRow_3.SUBGENUS;
									operation_result_tAggregateRow_3.VERNACULARNAME = operation_finder_tAggregateRow_3.VERNACULARNAME;
									operation_result_tAggregateRow_3.SOURCEFILEID = operation_finder_tAggregateRow_3.SOURCEFILEID;
									operation_result_tAggregateRow_3.DWCATAXONID = operation_finder_tAggregateRow_3.DWCATAXONID;

									hash_tAggregateRow_3.put(
											operation_result_tAggregateRow_3,
											operation_result_tAggregateRow_3);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_3_AGGOUT++;

								/**
								 * [tAggregateRow_3_AGGOUT main ] stop
								 */

							} // End of branch "rows_taxon"

						} // close loop of lookup 'taxon_choices' // G_TM_M_043

						/**
						 * [tOracleInput_3 end ] start
						 */

						currentComponent = "tOracleInput_3";

					}
				} finally {
					stmt_tOracleInput_3.close();

					if (conn_tOracleInput_3 != null
							&& !conn_tOracleInput_3.isClosed()) {

						conn_tOracleInput_3.close();

					}

				}

				globalMap.put("tOracleInput_3_NB_LINE", nb_line_tOracleInput_3);

				ok_Hash.put("tOracleInput_3", true);
				end_Hash.put("tOracleInput_3", System.currentTimeMillis());

				/**
				 * [tOracleInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_taxon_choices != null) {
					tHash_Lookup_taxon_choices.endGet();
				}
				globalMap.remove("tHash_Lookup_taxon_choices");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMemorizeRows_3 end ] start
				 */

				currentComponent = "tMemorizeRows_3";

				ok_Hash.put("tMemorizeRows_3", true);
				end_Hash.put("tMemorizeRows_3", System.currentTimeMillis());

				/**
				 * [tMemorizeRows_3 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.exportpath + "/taxons.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, true),
								"UTF-8"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("TAXONID");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SCIENTIFICNAME");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SCIENTIFICNAMEAUTHORSHIP");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("CREATED");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("MODIFIED");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NAMEACCORDINGTO");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SPECIFICEPITHET");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("INFRASPECIFICEPITHET");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NOMENCLATURALCODE");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("TAXONRANK");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("TAXONREMARKS");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("VERBATIMTAXONRANK");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ACCEPTEDNAMEUSAGE");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ORIGINALNAMEUSAGE");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("PARENTNAMEUSAGE");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("HIGHERCLASSIFICATION");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("TAXONOMICSTATUS");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NAMEPUBLISHEDIN");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NAMEPUBLISHEDINYEAR");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NOMENCLATURALSTATUS");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("KINGDOM");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("PHYLUM");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("CLASS_");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ORDER_");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("FAMILY");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("GENUS");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SUBGENUS");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("VERNACULARNAME");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("SOURCEFILEID");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("DWCATAXONID");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE",
						values_tAggregateRow_3.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					row_taxon.TAXONID = aggregated_row_tAggregateRow_3.TAXONID;

					row_taxon.SCIENTIFICNAME = aggregated_row_tAggregateRow_3.SCIENTIFICNAME;

					row_taxon.SCIENTIFICNAMEAUTHORSHIP = aggregated_row_tAggregateRow_3.SCIENTIFICNAMEAUTHORSHIP;

					row_taxon.CREATED = aggregated_row_tAggregateRow_3.CREATED;

					row_taxon.MODIFIED = aggregated_row_tAggregateRow_3.MODIFIED;

					row_taxon.NAMEACCORDINGTO = aggregated_row_tAggregateRow_3.NAMEACCORDINGTO;

					row_taxon.SPECIFICEPITHET = aggregated_row_tAggregateRow_3.SPECIFICEPITHET;

					row_taxon.INFRASPECIFICEPITHET = aggregated_row_tAggregateRow_3.INFRASPECIFICEPITHET;

					row_taxon.NOMENCLATURALCODE = aggregated_row_tAggregateRow_3.NOMENCLATURALCODE;

					row_taxon.TAXONRANK = aggregated_row_tAggregateRow_3.TAXONRANK;

					row_taxon.TAXONREMARKS = aggregated_row_tAggregateRow_3.TAXONREMARKS;

					row_taxon.VERBATIMTAXONRANK = aggregated_row_tAggregateRow_3.VERBATIMTAXONRANK;

					row_taxon.ACCEPTEDNAMEUSAGE = aggregated_row_tAggregateRow_3.ACCEPTEDNAMEUSAGE;

					row_taxon.ORIGINALNAMEUSAGE = aggregated_row_tAggregateRow_3.ORIGINALNAMEUSAGE;

					row_taxon.PARENTNAMEUSAGE = aggregated_row_tAggregateRow_3.PARENTNAMEUSAGE;

					row_taxon.HIGHERCLASSIFICATION = aggregated_row_tAggregateRow_3.HIGHERCLASSIFICATION;

					row_taxon.TAXONOMICSTATUS = aggregated_row_tAggregateRow_3.TAXONOMICSTATUS;

					row_taxon.NAMEPUBLISHEDIN = aggregated_row_tAggregateRow_3.NAMEPUBLISHEDIN;

					row_taxon.NAMEPUBLISHEDINYEAR = aggregated_row_tAggregateRow_3.NAMEPUBLISHEDINYEAR;

					row_taxon.NOMENCLATURALSTATUS = aggregated_row_tAggregateRow_3.NOMENCLATURALSTATUS;

					row_taxon.KINGDOM = aggregated_row_tAggregateRow_3.KINGDOM;

					row_taxon.PHYLUM = aggregated_row_tAggregateRow_3.PHYLUM;

					row_taxon.CLASS_ = aggregated_row_tAggregateRow_3.CLASS_;

					row_taxon.ORDER_ = aggregated_row_tAggregateRow_3.ORDER_;

					row_taxon.FAMILY = aggregated_row_tAggregateRow_3.FAMILY;

					row_taxon.GENUS = aggregated_row_tAggregateRow_3.GENUS;

					row_taxon.SUBGENUS = aggregated_row_tAggregateRow_3.SUBGENUS;

					row_taxon.VERNACULARNAME = aggregated_row_tAggregateRow_3.VERNACULARNAME;

					row_taxon.SOURCEFILEID = aggregated_row_tAggregateRow_3.SOURCEFILEID;

					row_taxon.DWCATAXONID = aggregated_row_tAggregateRow_3.DWCATAXONID;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tJavaRow_3 main ] start
					 */

					currentComponent = "tJavaRow_3";

					// Code généré selon le schémas d'entrée et de sortie
					taxon_to_csv.TAXONID = row_taxon.TAXONID;
					taxon_to_csv.SCIENTIFICNAME = row_taxon.SCIENTIFICNAME;
					taxon_to_csv.SCIENTIFICNAMEAUTHORSHIP = row_taxon.SCIENTIFICNAMEAUTHORSHIP;
					taxon_to_csv.CREATED = row_taxon.CREATED;
					taxon_to_csv.MODIFIED = row_taxon.MODIFIED;
					taxon_to_csv.NAMEACCORDINGTO = row_taxon.NAMEACCORDINGTO;
					taxon_to_csv.SPECIFICEPITHET = row_taxon.SPECIFICEPITHET;
					taxon_to_csv.INFRASPECIFICEPITHET = row_taxon.INFRASPECIFICEPITHET;
					taxon_to_csv.NOMENCLATURALCODE = row_taxon.NOMENCLATURALCODE;
					taxon_to_csv.TAXONRANK = row_taxon.TAXONRANK;
					taxon_to_csv.TAXONREMARKS = row_taxon.TAXONREMARKS;
					taxon_to_csv.VERBATIMTAXONRANK = row_taxon.VERBATIMTAXONRANK;
					taxon_to_csv.ACCEPTEDNAMEUSAGE = row_taxon.ACCEPTEDNAMEUSAGE;
					taxon_to_csv.ORIGINALNAMEUSAGE = row_taxon.ORIGINALNAMEUSAGE;
					taxon_to_csv.PARENTNAMEUSAGE = row_taxon.PARENTNAMEUSAGE;
					taxon_to_csv.HIGHERCLASSIFICATION = row_taxon.HIGHERCLASSIFICATION;
					taxon_to_csv.TAXONOMICSTATUS = row_taxon.TAXONOMICSTATUS;
					taxon_to_csv.NAMEPUBLISHEDIN = row_taxon.NAMEPUBLISHEDIN;
					taxon_to_csv.NAMEPUBLISHEDINYEAR = row_taxon.NAMEPUBLISHEDINYEAR;
					taxon_to_csv.NOMENCLATURALSTATUS = row_taxon.NOMENCLATURALSTATUS;
					taxon_to_csv.KINGDOM = row_taxon.KINGDOM;
					taxon_to_csv.PHYLUM = row_taxon.PHYLUM;
					taxon_to_csv.CLASS_ = row_taxon.CLASS_;
					taxon_to_csv.ORDER_ = row_taxon.ORDER_;
					taxon_to_csv.FAMILY = row_taxon.FAMILY;
					taxon_to_csv.GENUS = row_taxon.GENUS;
					taxon_to_csv.SUBGENUS = row_taxon.SUBGENUS;
					taxon_to_csv.VERNACULARNAME = row_taxon.VERNACULARNAME;
					taxon_to_csv.SOURCEFILEID = row_taxon.SOURCEFILEID;
					taxon_to_csv.DWCATAXONID = row_taxon.DWCATAXONID;

					ConversionString.setChoices(taxon_to_csv,
							((String[]) globalMap
									.get("tMemorizeRows_3_fieldName")),
							(String[]) globalMap.get("tMemorizeRows_3_data"));

					nb_line_tJavaRow_3++;

					tos_count_tJavaRow_3++;

					/**
					 * [tJavaRow_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 main ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
					if (taxon_to_csv.TAXONID != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.TAXONID);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.SCIENTIFICNAME != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.SCIENTIFICNAME);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.SCIENTIFICNAMEAUTHORSHIP != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.SCIENTIFICNAMEAUTHORSHIP);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.CREATED != null) {
						sb_tFileOutputDelimited_3
								.append(FormatterUtils.format_Date(
										taxon_to_csv.CREATED, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.MODIFIED != null) {
						sb_tFileOutputDelimited_3.append(FormatterUtils
								.format_Date(taxon_to_csv.MODIFIED,
										"dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.NAMEACCORDINGTO != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.NAMEACCORDINGTO);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.SPECIFICEPITHET != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.SPECIFICEPITHET);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.INFRASPECIFICEPITHET != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.INFRASPECIFICEPITHET);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.NOMENCLATURALCODE != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.NOMENCLATURALCODE);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.TAXONRANK != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.TAXONRANK);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.TAXONREMARKS != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.TAXONREMARKS);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.VERBATIMTAXONRANK != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.VERBATIMTAXONRANK);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.ACCEPTEDNAMEUSAGE != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.ACCEPTEDNAMEUSAGE);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.ORIGINALNAMEUSAGE != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.ORIGINALNAMEUSAGE);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.PARENTNAMEUSAGE != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.PARENTNAMEUSAGE);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.HIGHERCLASSIFICATION != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.HIGHERCLASSIFICATION);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.TAXONOMICSTATUS != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.TAXONOMICSTATUS);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.NAMEPUBLISHEDIN != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.NAMEPUBLISHEDIN);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.NAMEPUBLISHEDINYEAR != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.NAMEPUBLISHEDINYEAR
										.setScale(0,
												java.math.RoundingMode.HALF_UP)
										.toPlainString());
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.NOMENCLATURALSTATUS != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.NOMENCLATURALSTATUS);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.KINGDOM != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.KINGDOM);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.PHYLUM != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.PHYLUM);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.CLASS_ != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.CLASS_);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.ORDER_ != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.ORDER_);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.FAMILY != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.FAMILY);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.GENUS != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.GENUS);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.SUBGENUS != null) {
						sb_tFileOutputDelimited_3.append(taxon_to_csv.SUBGENUS);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.VERNACULARNAME != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.VERNACULARNAME);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.SOURCEFILEID != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.SOURCEFILEID);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (taxon_to_csv.DWCATAXONID != null) {
						sb_tFileOutputDelimited_3
								.append(taxon_to_csv.DWCATAXONID);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

					nb_line_tFileOutputDelimited_3++;
					resourceMap.put("nb_line_tFileOutputDelimited_3",
							nb_line_tFileOutputDelimited_3);

					outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3
							.toString());

					tos_count_tFileOutputDelimited_3++;

					/**
					 * [tFileOutputDelimited_3 main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_taxon_choices");

			try {

				/**
				 * [tOracleInput_3 finally ] start
				 */

				currentComponent = "tOracleInput_3";

				/**
				 * [tOracleInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMemorizeRows_3 finally ] start
				 */

				currentComponent = "tMemorizeRows_3";

				/**
				 * [tMemorizeRows_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				/**
				 * [tAggregateRow_3_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				/**
				 * [tAggregateRow_3_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				recolnat_diff.delete_files_0_1.delete_files childJob_tRunJob_1 = new recolnat_diff.delete_files_0_1.delete_files();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputJSON_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public static class deter_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<deter_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final deter_choicesStruct other = (deter_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(deter_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(deter_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(deter_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class specimen_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<specimen_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final specimen_choicesStruct other = (specimen_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(specimen_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(specimen_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(specimen_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class taxon_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<taxon_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final taxon_choicesStruct other = (taxon_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(taxon_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(taxon_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(taxon_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class biblio_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<biblio_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final biblio_choicesStruct other = (biblio_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(biblio_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(biblio_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(biblio_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class strati_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<strati_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final strati_choicesStruct other = (strati_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(strati_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(strati_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(strati_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class recolte_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<recolte_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final recolte_choicesStruct other = (recolte_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(recolte_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(recolte_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(recolte_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class localisation_choicesStruct
			implements
			routines.system.IPersistableComparableLookupRow<localisation_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.className == null) ? 0 : this.className
								.hashCode());

				result = prime
						* result
						+ ((this.relationId == null) ? 0 : this.relationId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final localisation_choicesStruct other = (localisation_choicesStruct) obj;

			if (this.className == null) {
				if (other.className != null)
					return false;

			} else if (!this.className.equals(other.className))

				return false;

			if (this.relationId == null) {
				if (other.relationId != null)
					return false;

			} else if (!this.relationId.equals(other.relationId))

				return false;

			return true;
		}

		public void copyDataTo(localisation_choicesStruct other) {

			other.className = this.className;
			other.fieldName = this.fieldName;
			other.relationId = this.relationId;
			other.choice = this.choice;
			other.data = this.data;

		}

		public void copyKeysDataTo(localisation_choicesStruct other) {

			other.className = this.className;
			other.relationId = this.relationId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.relationId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.relationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fieldName = readString(dis, ois);

				this.choice = readString(dis, ois);

				this.data = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.fieldName, dos, oos);

				writeString(this.choice, dos, oos);

				writeString(this.data, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(localisation_choicesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.className, other.className);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.relationId,
					other.relationId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class input_choicesStruct implements
			routines.system.IPersistableRow<input_choicesStruct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public String className;

		public String getClassName() {
			return this.className;
		}

		public String fieldName;

		public String getFieldName() {
			return this.fieldName;
		}

		public String relationId;

		public String getRelationId() {
			return this.relationId;
		}

		public String choice;

		public String getChoice() {
			return this.choice;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.className = readString(dis);

					this.fieldName = readString(dis);

					this.relationId = readString(dis);

					this.choice = readString(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.className, dos);

				// String

				writeString(this.fieldName, dos);

				// String

				writeString(this.relationId, dos);

				// String

				writeString(this.choice, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("className=" + className);
			sb.append(",fieldName=" + fieldName);
			sb.append(",relationId=" + relationId);
			sb.append(",choice=" + choice);
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(input_choicesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				input_choicesStruct input_choices = new input_choicesStruct();
				deter_choicesStruct deter_choices = new deter_choicesStruct();
				specimen_choicesStruct specimen_choices = new specimen_choicesStruct();
				taxon_choicesStruct taxon_choices = new taxon_choicesStruct();
				biblio_choicesStruct biblio_choices = new biblio_choicesStruct();
				strati_choicesStruct strati_choices = new strati_choicesStruct();
				recolte_choicesStruct recolte_choices = new recolte_choicesStruct();
				localisation_choicesStruct localisation_choices = new localisation_choicesStruct();

				/**
				 * [tAdvancedHash_deter_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_deter_choices", false);
				start_Hash.put("tAdvancedHash_deter_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_deter_choices";

				int tos_count_tAdvancedHash_deter_choices = 0;

				// connection name:deter_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_deter_choices -
				// inputs:(deter_choices) outputs:()
				// linked node: tMap_2 - inputs:(db_deter,deter_choices)
				// outputs:(determination_choices)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_deter_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<deter_choicesStruct> tHash_Lookup_deter_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<deter_choicesStruct> getLookup(matchingModeEnum_deter_choices);

				globalMap.put("tHash_Lookup_deter_choices",
						tHash_Lookup_deter_choices);

				/**
				 * [tAdvancedHash_deter_choices begin ] stop
				 */

				/**
				 * [tAdvancedHash_specimen_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_specimen_choices", false);
				start_Hash.put("tAdvancedHash_specimen_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_specimen_choices";

				int tos_count_tAdvancedHash_specimen_choices = 0;

				// connection name:specimen_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_specimen_choices -
				// inputs:(specimen_choices) outputs:()
				// linked node: tMap_1 - inputs:(db_specimens,specimen_choices)
				// outputs:(rows_specimens)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_specimen_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<specimen_choicesStruct> tHash_Lookup_specimen_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<specimen_choicesStruct> getLookup(matchingModeEnum_specimen_choices);

				globalMap.put("tHash_Lookup_specimen_choices",
						tHash_Lookup_specimen_choices);

				/**
				 * [tAdvancedHash_specimen_choices begin ] stop
				 */

				/**
				 * [tAdvancedHash_taxon_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_taxon_choices", false);
				start_Hash.put("tAdvancedHash_taxon_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_taxon_choices";

				int tos_count_tAdvancedHash_taxon_choices = 0;

				// connection name:taxon_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_taxon_choices -
				// inputs:(taxon_choices) outputs:()
				// linked node: tMap_3 - inputs:(db_taxons,taxon_choices)
				// outputs:(rows_taxon)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_taxon_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<taxon_choicesStruct> tHash_Lookup_taxon_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<taxon_choicesStruct> getLookup(matchingModeEnum_taxon_choices);

				globalMap.put("tHash_Lookup_taxon_choices",
						tHash_Lookup_taxon_choices);

				/**
				 * [tAdvancedHash_taxon_choices begin ] stop
				 */

				/**
				 * [tAdvancedHash_biblio_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_biblio_choices", false);
				start_Hash.put("tAdvancedHash_biblio_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_biblio_choices";

				int tos_count_tAdvancedHash_biblio_choices = 0;

				// connection name:biblio_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_biblio_choices -
				// inputs:(biblio_choices) outputs:()
				// linked node: tMap_4 - inputs:(db_biblio,biblio_choices)
				// outputs:(rows_biblio)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_biblio_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<biblio_choicesStruct> tHash_Lookup_biblio_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<biblio_choicesStruct> getLookup(matchingModeEnum_biblio_choices);

				globalMap.put("tHash_Lookup_biblio_choices",
						tHash_Lookup_biblio_choices);

				/**
				 * [tAdvancedHash_biblio_choices begin ] stop
				 */

				/**
				 * [tAdvancedHash_strati_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_strati_choices", false);
				start_Hash.put("tAdvancedHash_strati_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_strati_choices";

				int tos_count_tAdvancedHash_strati_choices = 0;

				// connection name:strati_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_strati_choices -
				// inputs:(strati_choices) outputs:()
				// linked node: tMap_5 - inputs:(db_strati,strati_choices)
				// outputs:(rows_strati)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_strati_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<strati_choicesStruct> tHash_Lookup_strati_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<strati_choicesStruct> getLookup(matchingModeEnum_strati_choices);

				globalMap.put("tHash_Lookup_strati_choices",
						tHash_Lookup_strati_choices);

				/**
				 * [tAdvancedHash_strati_choices begin ] stop
				 */

				/**
				 * [tAdvancedHash_recolte_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_recolte_choices", false);
				start_Hash.put("tAdvancedHash_recolte_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_recolte_choices";

				int tos_count_tAdvancedHash_recolte_choices = 0;

				// connection name:recolte_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_recolte_choices -
				// inputs:(recolte_choices) outputs:()
				// linked node: tMap_6 - inputs:(db_recolte,recolte_choices)
				// outputs:(rows_recolte)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_recolte_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<recolte_choicesStruct> tHash_Lookup_recolte_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<recolte_choicesStruct> getLookup(matchingModeEnum_recolte_choices);

				globalMap.put("tHash_Lookup_recolte_choices",
						tHash_Lookup_recolte_choices);

				/**
				 * [tAdvancedHash_recolte_choices begin ] stop
				 */

				/**
				 * [tAdvancedHash_localisation_choices begin ] start
				 */

				ok_Hash.put("tAdvancedHash_localisation_choices", false);
				start_Hash.put("tAdvancedHash_localisation_choices",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_localisation_choices";

				int tos_count_tAdvancedHash_localisation_choices = 0;

				// connection name:localisation_choices
				// source node:tReplicate_1 - inputs:(input_choices)
				// outputs:(deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices,deter_choices,specimen_choices,taxon_choices,biblio_choices,strati_choices,recolte_choices,localisation_choices)
				// | target node:tAdvancedHash_localisation_choices -
				// inputs:(localisation_choices) outputs:()
				// linked node: tMap_7 -
				// inputs:(db_localisations,localisation_choices)
				// outputs:(rows_localisations)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_localisation_choices = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<localisation_choicesStruct> tHash_Lookup_localisation_choices = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<localisation_choicesStruct> getLookup(matchingModeEnum_localisation_choices);

				globalMap.put("tHash_Lookup_localisation_choices",
						tHash_Lookup_localisation_choices);

				/**
				 * [tAdvancedHash_localisation_choices begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFileInputJSON_3 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_3", false);
				start_Hash.put("tFileInputJSON_3", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_3";

				int tos_count_tFileInputJSON_3 = 0;

				class JsonPathCache_tFileInputJSON_3 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
							String jsonPath) {
						if (jsonPathString2compiledJsonPath
								.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath
									.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath,
									compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_3 = 0;

				JsonPathCache_tFileInputJSON_3 jsonPathCache_tFileInputJSON_3 = new JsonPathCache_tFileInputJSON_3();

				String loopPath_tFileInputJSON_3 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_3 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_3 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_3 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration
								.defaultConfiguration());
				try {

					is_tFileInputJSON_3 = new java.io.FileInputStream(
							context.choices);

					com.jayway.jsonpath.ReadContext document_tFileInputJSON_3 = parseContext_tFileInputJSON_3
							.parse(is_tFileInputJSON_3, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
							.getCompiledJsonPath(loopPath_tFileInputJSON_3);
					Object result_tFileInputJSON_3 = document_tFileInputJSON_3
							.read(compiledLoopPath_tFileInputJSON_3,
									net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_3 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_3 = (net.minidev.json.JSONArray) result_tFileInputJSON_3;
					} else {
						resultset_tFileInputJSON_3.add(result_tFileInputJSON_3);
					}
				} catch (java.lang.Exception e_tFileInputJSON_3) {
					System.err.println(e_tFileInputJSON_3.getMessage());
				} finally {
					if (is_tFileInputJSON_3 != null) {
						is_tFileInputJSON_3.close();
					}
				}

				String jsonPath_tFileInputJSON_3 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_3 = null;

				Object value_tFileInputJSON_3 = null;
				for (Object row_tFileInputJSON_3 : resultset_tFileInputJSON_3) {
					nb_line_tFileInputJSON_3++;
					input_choices = null;
					boolean whetherReject_tFileInputJSON_3 = false;
					input_choices = new input_choicesStruct();

					try {
						jsonPath_tFileInputJSON_3 = "$.className";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {
							value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3
									.read(row_tFileInputJSON_3);
							input_choices.className = value_tFileInputJSON_3 == null ?

							null
									: value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							input_choices.className =

							null;
						}
						jsonPath_tFileInputJSON_3 = "$.fieldName";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {
							value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3
									.read(row_tFileInputJSON_3);
							input_choices.fieldName = value_tFileInputJSON_3 == null ?

							null
									: value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							input_choices.fieldName =

							null;
						}
						jsonPath_tFileInputJSON_3 = "$.relationId";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {
							value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3
									.read(row_tFileInputJSON_3);
							input_choices.relationId = value_tFileInputJSON_3 == null ?

							null
									: value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							input_choices.relationId =

							null;
						}
						jsonPath_tFileInputJSON_3 = "$.choice";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {
							value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3
									.read(row_tFileInputJSON_3);
							input_choices.choice = value_tFileInputJSON_3 == null ?

							null
									: value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							input_choices.choice =

							null;
						}
						jsonPath_tFileInputJSON_3 = "$.data";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {
							value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3
									.read(row_tFileInputJSON_3);
							input_choices.data = value_tFileInputJSON_3 == null ?

							null
									: value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							input_choices.data =

							null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_3) {
						whetherReject_tFileInputJSON_3 = true;
						System.err.println(e_tFileInputJSON_3.getMessage());
						input_choices = null;
					}
					// }

					/**
					 * [tFileInputJSON_3 begin ] stop
					 */

					/**
					 * [tFileInputJSON_3 main ] start
					 */

					currentComponent = "tFileInputJSON_3";

					tos_count_tFileInputJSON_3++;

					/**
					 * [tFileInputJSON_3 main ] stop
					 */
					// Start of branch "input_choices"
					if (input_choices != null) {

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						deter_choices = new deter_choicesStruct();

						deter_choices.className = input_choices.className;
						deter_choices.fieldName = input_choices.fieldName;
						deter_choices.relationId = input_choices.relationId;
						deter_choices.choice = input_choices.choice;
						deter_choices.data = input_choices.data;
						specimen_choices = new specimen_choicesStruct();

						specimen_choices.className = input_choices.className;
						specimen_choices.fieldName = input_choices.fieldName;
						specimen_choices.relationId = input_choices.relationId;
						specimen_choices.choice = input_choices.choice;
						specimen_choices.data = input_choices.data;
						taxon_choices = new taxon_choicesStruct();

						taxon_choices.className = input_choices.className;
						taxon_choices.fieldName = input_choices.fieldName;
						taxon_choices.relationId = input_choices.relationId;
						taxon_choices.choice = input_choices.choice;
						taxon_choices.data = input_choices.data;
						biblio_choices = new biblio_choicesStruct();

						biblio_choices.className = input_choices.className;
						biblio_choices.fieldName = input_choices.fieldName;
						biblio_choices.relationId = input_choices.relationId;
						biblio_choices.choice = input_choices.choice;
						biblio_choices.data = input_choices.data;
						strati_choices = new strati_choicesStruct();

						strati_choices.className = input_choices.className;
						strati_choices.fieldName = input_choices.fieldName;
						strati_choices.relationId = input_choices.relationId;
						strati_choices.choice = input_choices.choice;
						strati_choices.data = input_choices.data;
						recolte_choices = new recolte_choicesStruct();

						recolte_choices.className = input_choices.className;
						recolte_choices.fieldName = input_choices.fieldName;
						recolte_choices.relationId = input_choices.relationId;
						recolte_choices.choice = input_choices.choice;
						recolte_choices.data = input_choices.data;
						localisation_choices = new localisation_choicesStruct();

						localisation_choices.className = input_choices.className;
						localisation_choices.fieldName = input_choices.fieldName;
						localisation_choices.relationId = input_choices.relationId;
						localisation_choices.choice = input_choices.choice;
						localisation_choices.data = input_choices.data;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_deter_choices main ] start
						 */

						currentComponent = "tAdvancedHash_deter_choices";

						deter_choicesStruct deter_choices_HashRow = new deter_choicesStruct();

						deter_choices_HashRow.className = deter_choices.className;

						deter_choices_HashRow.fieldName = deter_choices.fieldName;

						deter_choices_HashRow.relationId = deter_choices.relationId;

						deter_choices_HashRow.choice = deter_choices.choice;

						deter_choices_HashRow.data = deter_choices.data;

						tHash_Lookup_deter_choices.put(deter_choices_HashRow);

						tos_count_tAdvancedHash_deter_choices++;

						/**
						 * [tAdvancedHash_deter_choices main ] stop
						 */

						/**
						 * [tAdvancedHash_specimen_choices main ] start
						 */

						currentComponent = "tAdvancedHash_specimen_choices";

						specimen_choicesStruct specimen_choices_HashRow = new specimen_choicesStruct();

						specimen_choices_HashRow.className = specimen_choices.className;

						specimen_choices_HashRow.fieldName = specimen_choices.fieldName;

						specimen_choices_HashRow.relationId = specimen_choices.relationId;

						specimen_choices_HashRow.choice = specimen_choices.choice;

						specimen_choices_HashRow.data = specimen_choices.data;

						tHash_Lookup_specimen_choices
								.put(specimen_choices_HashRow);

						tos_count_tAdvancedHash_specimen_choices++;

						/**
						 * [tAdvancedHash_specimen_choices main ] stop
						 */

						/**
						 * [tAdvancedHash_taxon_choices main ] start
						 */

						currentComponent = "tAdvancedHash_taxon_choices";

						taxon_choicesStruct taxon_choices_HashRow = new taxon_choicesStruct();

						taxon_choices_HashRow.className = taxon_choices.className;

						taxon_choices_HashRow.fieldName = taxon_choices.fieldName;

						taxon_choices_HashRow.relationId = taxon_choices.relationId;

						taxon_choices_HashRow.choice = taxon_choices.choice;

						taxon_choices_HashRow.data = taxon_choices.data;

						tHash_Lookup_taxon_choices.put(taxon_choices_HashRow);

						tos_count_tAdvancedHash_taxon_choices++;

						/**
						 * [tAdvancedHash_taxon_choices main ] stop
						 */

						/**
						 * [tAdvancedHash_biblio_choices main ] start
						 */

						currentComponent = "tAdvancedHash_biblio_choices";

						biblio_choicesStruct biblio_choices_HashRow = new biblio_choicesStruct();

						biblio_choices_HashRow.className = biblio_choices.className;

						biblio_choices_HashRow.fieldName = biblio_choices.fieldName;

						biblio_choices_HashRow.relationId = biblio_choices.relationId;

						biblio_choices_HashRow.choice = biblio_choices.choice;

						biblio_choices_HashRow.data = biblio_choices.data;

						tHash_Lookup_biblio_choices.put(biblio_choices_HashRow);

						tos_count_tAdvancedHash_biblio_choices++;

						/**
						 * [tAdvancedHash_biblio_choices main ] stop
						 */

						/**
						 * [tAdvancedHash_strati_choices main ] start
						 */

						currentComponent = "tAdvancedHash_strati_choices";

						strati_choicesStruct strati_choices_HashRow = new strati_choicesStruct();

						strati_choices_HashRow.className = strati_choices.className;

						strati_choices_HashRow.fieldName = strati_choices.fieldName;

						strati_choices_HashRow.relationId = strati_choices.relationId;

						strati_choices_HashRow.choice = strati_choices.choice;

						strati_choices_HashRow.data = strati_choices.data;

						tHash_Lookup_strati_choices.put(strati_choices_HashRow);

						tos_count_tAdvancedHash_strati_choices++;

						/**
						 * [tAdvancedHash_strati_choices main ] stop
						 */

						/**
						 * [tAdvancedHash_recolte_choices main ] start
						 */

						currentComponent = "tAdvancedHash_recolte_choices";

						recolte_choicesStruct recolte_choices_HashRow = new recolte_choicesStruct();

						recolte_choices_HashRow.className = recolte_choices.className;

						recolte_choices_HashRow.fieldName = recolte_choices.fieldName;

						recolte_choices_HashRow.relationId = recolte_choices.relationId;

						recolte_choices_HashRow.choice = recolte_choices.choice;

						recolte_choices_HashRow.data = recolte_choices.data;

						tHash_Lookup_recolte_choices
								.put(recolte_choices_HashRow);

						tos_count_tAdvancedHash_recolte_choices++;

						/**
						 * [tAdvancedHash_recolte_choices main ] stop
						 */

						/**
						 * [tAdvancedHash_localisation_choices main ] start
						 */

						currentComponent = "tAdvancedHash_localisation_choices";

						localisation_choicesStruct localisation_choices_HashRow = new localisation_choicesStruct();

						localisation_choices_HashRow.className = localisation_choices.className;

						localisation_choices_HashRow.fieldName = localisation_choices.fieldName;

						localisation_choices_HashRow.relationId = localisation_choices.relationId;

						localisation_choices_HashRow.choice = localisation_choices.choice;

						localisation_choices_HashRow.data = localisation_choices.data;

						tHash_Lookup_localisation_choices
								.put(localisation_choices_HashRow);

						tos_count_tAdvancedHash_localisation_choices++;

						/**
						 * [tAdvancedHash_localisation_choices main ] stop
						 */

					} // End of branch "input_choices"

					/**
					 * [tFileInputJSON_3 end ] start
					 */

					currentComponent = "tFileInputJSON_3";

				}
				globalMap.put("tFileInputJSON_3_NB_LINE",
						nb_line_tFileInputJSON_3);

				ok_Hash.put("tFileInputJSON_3", true);
				end_Hash.put("tFileInputJSON_3", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_3 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_deter_choices end ] start
				 */

				currentComponent = "tAdvancedHash_deter_choices";

				tHash_Lookup_deter_choices.endPut();

				ok_Hash.put("tAdvancedHash_deter_choices", true);
				end_Hash.put("tAdvancedHash_deter_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_deter_choices end ] stop
				 */

				/**
				 * [tAdvancedHash_specimen_choices end ] start
				 */

				currentComponent = "tAdvancedHash_specimen_choices";

				tHash_Lookup_specimen_choices.endPut();

				ok_Hash.put("tAdvancedHash_specimen_choices", true);
				end_Hash.put("tAdvancedHash_specimen_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_specimen_choices end ] stop
				 */

				/**
				 * [tAdvancedHash_taxon_choices end ] start
				 */

				currentComponent = "tAdvancedHash_taxon_choices";

				tHash_Lookup_taxon_choices.endPut();

				ok_Hash.put("tAdvancedHash_taxon_choices", true);
				end_Hash.put("tAdvancedHash_taxon_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_taxon_choices end ] stop
				 */

				/**
				 * [tAdvancedHash_biblio_choices end ] start
				 */

				currentComponent = "tAdvancedHash_biblio_choices";

				tHash_Lookup_biblio_choices.endPut();

				ok_Hash.put("tAdvancedHash_biblio_choices", true);
				end_Hash.put("tAdvancedHash_biblio_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_biblio_choices end ] stop
				 */

				/**
				 * [tAdvancedHash_strati_choices end ] start
				 */

				currentComponent = "tAdvancedHash_strati_choices";

				tHash_Lookup_strati_choices.endPut();

				ok_Hash.put("tAdvancedHash_strati_choices", true);
				end_Hash.put("tAdvancedHash_strati_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_strati_choices end ] stop
				 */

				/**
				 * [tAdvancedHash_recolte_choices end ] start
				 */

				currentComponent = "tAdvancedHash_recolte_choices";

				tHash_Lookup_recolte_choices.endPut();

				ok_Hash.put("tAdvancedHash_recolte_choices", true);
				end_Hash.put("tAdvancedHash_recolte_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_recolte_choices end ] stop
				 */

				/**
				 * [tAdvancedHash_localisation_choices end ] start
				 */

				currentComponent = "tAdvancedHash_localisation_choices";

				tHash_Lookup_localisation_choices.endPut();

				ok_Hash.put("tAdvancedHash_localisation_choices", true);
				end_Hash.put("tAdvancedHash_localisation_choices",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_localisation_choices end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_3 finally ] start
				 */

				currentComponent = "tFileInputJSON_3";

				/**
				 * [tFileInputJSON_3 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_deter_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_deter_choices";

				/**
				 * [tAdvancedHash_deter_choices finally ] stop
				 */

				/**
				 * [tAdvancedHash_specimen_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_specimen_choices";

				/**
				 * [tAdvancedHash_specimen_choices finally ] stop
				 */

				/**
				 * [tAdvancedHash_taxon_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_taxon_choices";

				/**
				 * [tAdvancedHash_taxon_choices finally ] stop
				 */

				/**
				 * [tAdvancedHash_biblio_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_biblio_choices";

				/**
				 * [tAdvancedHash_biblio_choices finally ] stop
				 */

				/**
				 * [tAdvancedHash_strati_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_strati_choices";

				/**
				 * [tAdvancedHash_strati_choices finally ] stop
				 */

				/**
				 * [tAdvancedHash_recolte_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_recolte_choices";

				/**
				 * [tAdvancedHash_recolte_choices finally ] stop
				 */

				/**
				 * [tAdvancedHash_localisation_choices finally ] start
				 */

				currentComponent = "tAdvancedHash_localisation_choices";

				/**
				 * [tAdvancedHash_localisation_choices finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_RECOLNAT_DIFF_converter = new byte[0];
		static byte[] commonByteArray_RECOLNAT_DIFF_converter = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RECOLNAT_DIFF_converter.length) {
					if (length < 1024
							&& commonByteArray_RECOLNAT_DIFF_converter.length == 0) {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[1024];
					} else {
						commonByteArray_RECOLNAT_DIFF_converter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RECOLNAT_DIFF_converter, 0,
						length);
				strReturn = new String(commonByteArray_RECOLNAT_DIFF_converter,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RECOLNAT_DIFF_converter) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row6.type = lcm.getType();
					row6.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row6.priority = lcm.getPriority();
					row6.message = lcm.getMessage();
					row6.code = lcm.getCode();

					row6.moment = java.util.Calendar.getInstance().getTime();

					row6.pid = pid;
					row6.root_pid = rootPid;
					row6.father_pid = fatherPid;

					row6.project = projectName;
					row6.job = jobName;
					row6.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tDie_1 main ] start
					 */

					currentComponent = "tDie_1";

					tLogCatcher_1.addMessage("tDie", "tDie_1", 5,
							"an error has occured", 4);
					tLogCatcher_1Process(globalMap);

					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("an error has occured");

					globalMap.put("tDie_1_DIE_MESSAGE", "an error has occured");
					globalMap
							.put("tDie_1_DIE_MESSAGES", "an error has occured");
					currentComponent = "tDie_1";
					status = "failure";
					errorCode = new Integer(4);
					globalMap.put("tDie_1_DIE_CODE", errorCode);

					if (true) {
						throw new TDieException();
					}

					tos_count_tDie_1++;

					/**
					 * [tDie_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final converter converterClass = new converter();

		int exitCode = converterClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = converter.class.getClassLoader()
					.getResourceAsStream(
							"recolnat_diff/converter_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.global_filepath = (String) context
					.getProperty("global_filepath");
			context.recolnat_AdditionalParams = (String) context
					.getProperty("recolnat_AdditionalParams");
			context.recolnat_Login = (String) context
					.getProperty("recolnat_Login");
			String pwd_recolnat_Password_value = context
					.getProperty("recolnat_Password");
			context.recolnat_Password = null;
			if (pwd_recolnat_Password_value != null) {
				if (context_param.containsKey("recolnat_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.recolnat_Password = pwd_recolnat_Password_value;
				} else if (!pwd_recolnat_Password_value.isEmpty()) {
					try {
						context.recolnat_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_recolnat_Password_value);
						context.put("recolnat_Password",
								context.recolnat_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.recolnat_Port = (String) context
					.getProperty("recolnat_Port");
			context.recolnat_Schema = (String) context
					.getProperty("recolnat_Schema");
			context.recolnat_Server = (String) context
					.getProperty("recolnat_Server");
			context.recolnat_Sid = (String) context.getProperty("recolnat_Sid");
			context.diffs = (String) context.getProperty("diffs");
			context.choices = (String) context.getProperty("choices");
			context.exportpath = (String) context.getProperty("exportpath");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("global_filepath")) {
				context.global_filepath = (String) parentContextMap
						.get("global_filepath");
			}
			if (parentContextMap.containsKey("recolnat_AdditionalParams")) {
				context.recolnat_AdditionalParams = (String) parentContextMap
						.get("recolnat_AdditionalParams");
			}
			if (parentContextMap.containsKey("recolnat_Login")) {
				context.recolnat_Login = (String) parentContextMap
						.get("recolnat_Login");
			}
			if (parentContextMap.containsKey("recolnat_Password")) {
				context.recolnat_Password = (java.lang.String) parentContextMap
						.get("recolnat_Password");
			}
			if (parentContextMap.containsKey("recolnat_Port")) {
				context.recolnat_Port = (String) parentContextMap
						.get("recolnat_Port");
			}
			if (parentContextMap.containsKey("recolnat_Schema")) {
				context.recolnat_Schema = (String) parentContextMap
						.get("recolnat_Schema");
			}
			if (parentContextMap.containsKey("recolnat_Server")) {
				context.recolnat_Server = (String) parentContextMap
						.get("recolnat_Server");
			}
			if (parentContextMap.containsKey("recolnat_Sid")) {
				context.recolnat_Sid = (String) parentContextMap
						.get("recolnat_Sid");
			}
			if (parentContextMap.containsKey("diffs")) {
				context.diffs = (String) parentContextMap.get("diffs");
			}
			if (parentContextMap.containsKey("choices")) {
				context.choices = (String) parentContextMap.get("choices");
			}
			if (parentContextMap.containsKey("exportpath")) {
				context.exportpath = (String) parentContextMap
						.get("exportpath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("recolnat_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRunJob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_1) {
			globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

			e_tRunJob_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : converter");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1181968 characters generated by Talend Open Studio for Data Integration on
 * the 11 décembre 2015 16:59:39 CET
 ************************************************************************************************/
